{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app.js","src/Cameras/CameraBase.js","src/Cameras/OrthographicCamera.js","src/Cameras/PerspectiveCamera.js","src/Cameras/index.js","src/Controls/ControlsBase.js","src/Controls/FirstPersonControls.js","src/Controls/OrbitalControls.js","src/Controls/index.js","src/Core/Attribute.js","src/Core/Color.js","src/Core/DrawModes.js","src/Core/Effect.js","src/Core/Geometry.js","src/Core/Graph.js","src/Core/Node.js","src/Core/Renderer.js","src/Core/Shader.js","src/Core/Tree.js","src/Core/Uniform.js","src/Core/index.js","src/Filters/FilterBase.js","src/Filters/InRangeFilter.js","src/Filters/index.js","src/Helpers/AABBHelper.js","src/Helpers/CoordinatesHelper.js","src/Helpers/HelperBase.js","src/Helpers/OctreeHelper.js","src/Helpers/PointHelper.js","src/Helpers/TreeHelper.js","src/Helpers/index.js","src/IO/CsvFileReader.js","src/IO/FileReaderBase.js","src/IO/MatrixFileReader.js","src/IO/index.js","src/Lore.js","src/Math/Matrix3f.js","src/Math/Matrix4f.js","src/Math/ProjectionMatrix.js","src/Math/Quaternion.js","src/Math/RadixSort.js","src/Math/Ray.js","src/Math/SphericalCoords.js","src/Math/Statistics.js","src/Math/Vector3f.js","src/Math/index.js","src/Shaders/Circle.js","src/Shaders/Coordinates.js","src/Shaders/Default.js","src/Shaders/DefaultAnimated.js","src/Shaders/DefaultEffect.js","src/Shaders/FXAAEffect.js","src/Shaders/SimpleSphere.js","src/Shaders/SmoothCircle.js","src/Shaders/Sphere.js","src/Shaders/Tree.js","src/Shaders/index.js","src/Spice/AABB.js","src/Spice/Octree.js","src/Spice/Raycaster.js","src/Spice/index.js","src/Utils/Utils.js","src/Utils/index.js"],"names":[],"mappings":"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","file":"lore.min.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","//@ts-check\r\n\r\n// Detect SSR (server side rendering)\r\nvar canUseDOM = !!(\r\n  (typeof window !== 'undefined' &&\r\n  window.document && window.document.createElement)\r\n);\r\n\r\nvar Lore = require('./src/Lore');\r\n\r\n// By Shmiddty from stackoverflow\r\nfunction Enum(a){\r\n  let i = Object\r\n    .keys(a)\r\n    .reduce((o, k)=>(o[a[k]] = k, o), {});\r\n\r\n  return Object.freeze(\r\n    Object.keys(a).reduce((o, k)=>(o[k] = a[k],o), v => i[v])\r\n  );\r\n}\r\n\r\nLore.Mouse = Enum({\r\n  Left: 0,\r\n  Middle: 1,\r\n  Right: 2\r\n});\r\n\r\nLore.Keyboard = Enum({\r\n  Backspace: 8,\r\n  Tab: 9,\r\n  Enter: 13,\r\n  Shift: 16,\r\n  Ctrl: 17,\r\n  Alt: 18,\r\n  Esc: 27\r\n});\r\n\r\nLore.init = function(canvas, options) {\r\n  this.opts = Lore.Utils.extend(true, Lore.defaults, options);\r\n  \r\n  // Lore.getGrakaInfo(canvas);\r\n  \r\n  var cc = Lore.Core.Color.fromHex(this.opts.clearColor);\r\n\r\n  var renderer = new Lore.Core.Renderer(canvas, {\r\n      clearColor: cc,\r\n      verbose: true,\r\n      fps: document.getElementById('fps'),\r\n      center: new Lore.Math.Vector3f(125, 125, 125),\r\n      antialiasing: this.opts.antialiasing\r\n  });\r\n \r\n  renderer.controls.limitRotationToHorizon(this.opts.limitRotationToHorizon);\r\n\r\n  renderer.render = function(camera, geometries) {\r\n      for(var key in geometries) {\r\n          geometries[key].draw(renderer);\r\n      }\r\n  }\r\n\r\n  return renderer;\r\n}\r\n\r\nLore.getGrakaInfo = function(targetId) {\r\n  let canvas = document.getElementById(targetId);\r\n  let gl = canvas.getContext('webgl') || \r\n           canvas.getContext('experimental-webgl');\r\n\r\n  let info = {\r\n      renderer: '',\r\n      vendor: ''\r\n  };\r\n\r\n  let dbgRenderInfo = gl.getExtension('WEBGL_debug_renderer_info');\r\n  \r\n  if (dbgRenderInfo != null) {\r\n      info.renderer = gl.getParameter(dbgRenderInfo.UNMASKED_RENDERER_WEBGL);\r\n      info.vendor   = gl.getParameter(dbgRenderInfo.UNMASKED_VENDOR_WEBGL);\r\n  }\r\n\r\n  return info;\r\n}\r\n\r\nLore.supportsHighQuality = function(targetId) {\r\n  let info = Lore.getGrakaInfo(targetId);\r\n  \r\n\r\n  return false;\r\n}\r\n\r\nLore.defaults = {\r\n  clearColor: '#121212',\r\n  limitRotationToHorizon: false,\r\n  antialiasing: false\r\n};\r\n\r\nif (canUseDOM) {\r\n  window['Lore'] = Lore\r\n}\r\n\r\nmodule.exports = Lore","//@ts-check\r\n\r\nconst Node = require ('../Core/Node');\r\nconst ProjectionMatrix = require('../Math/ProjectionMatrix');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/** \r\n * An abstract class representing the base for camera implementations. \r\n * \r\n * @property {string} type The type name of this object (Lore.CameraBase).\r\n * @property {Renderer} renderer A Lore.Renderer object.\r\n * @property {boolean} isProjectionMatrixStale A boolean indicating whether or not the projection matrix was changed and has to be updated.\r\n * @property {ProjectionMatrix} projectionMatrix A Lore.ProjectionMatrix object.\r\n * @property {Matrix4f} viewMatrix A Lore.Matrix4f object representing the view matrix for this camera.\r\n * */\r\nclass CameraBase extends Node {\r\n    /**\r\n     * Creates an instance of CameraBase.\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.type = 'Lore.CameraBase';\r\n        this.renderer = null;\r\n        this.isProjectionMatrixStale = false;\r\n        this.isViewMatrixStale = false;\r\n        this.projectionMatrix = new ProjectionMatrix();\r\n        this.viewMatrix = new Matrix4f();\r\n        this.near = 0.0;\r\n        this.far = 1000.0;\r\n    }\r\n\r\n    /**\r\n     * Initializes this camera instance.\r\n     * \r\n     * @param {any} gl A gl context.\r\n     * @param {any} program A program pointer.\r\n     * @returns {CameraBase} Returns itself.\r\n     */\r\n    init(gl, program) {\r\n        this.gl = gl;\r\n        this.program = program;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the lookat of this camera instance.\r\n     * \r\n     * @param {Vector3f} vec The vector to set the lookat to.\r\n     * @returns {CameraBase} Returns itself.\r\n     */\r\n    setLookAt(vec) {\r\n        this.rotation.lookAt(this.position, vec, Vector3f.up());\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Has to be called when the viewport size changes (e.g. window resize).\r\n     * \r\n     * @param {Number} width The width of the viewport.\r\n     * @param {Number} height The height of the viewport.\r\n     * \r\n     * @returns {CameraBase} Returns itself.\r\n     */\r\n    updateViewport(width, height) {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Virtual Method\r\n     * \r\n     * @returns {CameraBase} Returns itself.\r\n     */\r\n    updateProjectionMatrix() {\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Upates the view matrix of this camera.\r\n     * \r\n     * @returns {CameraBase} Returns itself.\r\n     */\r\n    updateViewMatrix() {\r\n        this.update();\r\n        \r\n        let viewMatrix = this.modelMatrix.clone();\r\n        \r\n        viewMatrix.invert();\r\n        this.viewMatrix = viewMatrix;\r\n        this.isViewMatrixStale = true;\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the projection matrix of this camera instance as an array.\r\n     * \r\n     * @returns {Float32Array} The entries of the projection matrix.\r\n     */\r\n    getProjectionMatrix() {\r\n        return this.projectionMatrix.entries;\r\n    }\r\n\r\n    /**\r\n     * Returns the view matrix of this camera instance as an array.\r\n     * \r\n     * @returns {Float32Array} The entries of the view matrix.\r\n     */\r\n    getViewMatrix() {\r\n        return this.viewMatrix.entries;\r\n    }\r\n\r\n    /**\r\n     * Projects a vector into screen space.\r\n     * \r\n     * @param {Vector3f} vec A vector.\r\n     * @param {Renderer} renderer An instance of a Lore renderer.\r\n     * @returns {Array} An array containing the x and y position in screen space.\r\n     */\r\n    sceneToScreen(vec, renderer) {\r\n        let vector = vec.clone();\r\n        let canvas = renderer.canvas;\r\n        \r\n        Matrix4f.projectVector(vector, this);\r\n        \r\n        // Map to 2D screen space\r\n        // Correct for high dpi display by dividing by device pixel ratio\r\n        let x = Math.round((vector.components[0] + 1) * canvas.width  / 2);// / window.devicePixelRatio;\r\n        let y = Math.round((-vector.components[1] + 1) * canvas.height / 2);// / window.devicePixelRatio;\r\n        \r\n        return [ x, y ];\r\n    }\r\n}\r\n\r\nmodule.exports = CameraBase;","//@ts-check\r\n\r\nconst CameraBase = require('./CameraBase');\r\n\r\n/** \r\n * A class representing an orthographic camera. \r\n * \r\n * @property {number} [zoom=1.0] The zoom value of this camera.\r\n * @property {number} left The left border of the frustum.\r\n * @property {number} right The right border of the frustum.\r\n * @property {number} top The top border of the frustum.\r\n * @property {number} bottom The bottom border of the frustum.\r\n * @property {number} near The near plane distance of the frustum.\r\n * @property {number} far The far plane distance of the frustum.\r\n * */\r\nclass OrthographicCamera extends CameraBase {\r\n    /**\r\n     * Creates an instance of OrthographicCamera.\r\n     * @param {Number} left Left extend of the viewing volume.\r\n     * @param {Number} right Right extend of the viewing volume.\r\n     * @param {Number} top Top extend of the viewing volume.\r\n     * @param {Number} bottom Bottom extend of the viewing volume.\r\n     * @param {Number} near Near extend of the viewing volume.\r\n     * @param {Number} far Far extend of the viewing volume.\r\n     */ \r\n    constructor(left, right, top, bottom, near = 0.1, far = 2500) {\r\n        super();\r\n\r\n        this.type = 'Lore.OrthographicCamera';\r\n        this.zoom = 1.0;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.top = top;\r\n        this.bottom = bottom;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * Updates the projection matrix of this orthographic camera.\r\n     * \r\n     * @returns {OrthographicCamera} Returns itself.\r\n     */\r\n    updateProjectionMatrix() {\r\n        let width = (this.right - this.left) / (2.0 * this.zoom);\r\n        let height = (this.top - this.bottom) / (2.0 * this.zoom);\r\n        let x = (this.right + this.left) / 2.0;\r\n        let y = (this.top + this.bottom) / 2.0;\r\n\r\n        let left = x - width;\r\n        let right = x + width;\r\n        let top = y + height;\r\n        let bottom = y - height;\r\n        \r\n        this.projectionMatrix.setOrthographic(left, right, top, bottom, this.near, this.far);\r\n        this.isProjectionMatrixStale = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Has to be called when the viewport size changes (e.g. window resize).\r\n     * \r\n     * @param {Number} width The width of the viewport.\r\n     * @param {Number} height The height of the viewport.\r\n     * \r\n     * @returns {OrthographicCamera} Returns itself.\r\n     */\r\n    updateViewport(width, height) {\r\n        this.left = -width / 2.0;\r\n        this.right = width / 2.0;\r\n        this.top = height / 2.0;\r\n        this.bottom = -height / 2.0;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = OrthographicCamera;","//@ts-check\r\n\r\nconst CameraBase = require('./CameraBase');\r\n\r\n/** A class representing an perspective camera. */\r\nclass PerspectiveCamera extends CameraBase {\r\n    /**\r\n     * Creates an instance of PerspectiveCamera.\r\n     * @param {Number} fov The field of view.\r\n     * @param {Number} aspect The aspect ration (width / height).\r\n     * @param {Number} near Near extend of the viewing volume.\r\n     * @param {Number} far Far extend of the viewing volume.\r\n     */ \r\n    constructor(fov, aspect, near = 0.1, far = 2500) {\r\n        super();\r\n\r\n        this.type = 'Lore.PerspectiveCamera';\r\n\r\n        // TODO: There shouldn't be a zoom here. The problem is, that the orbital controls\r\n        // and also the point helper and zoom rely on it. However, for the perspective camera,\r\n        // zooming is achieved by adjusting the fov. \r\n        this.zoom = 1.0;\r\n        this.fov = fov;\r\n        this.aspect = aspect;\r\n        this.near = near;\r\n        this.far = far;\r\n\r\n        this.updateProjectionMatrix();\r\n    }\r\n\r\n    /**\r\n     * Updates the projection matrix of this perspective camera.\r\n     * \r\n     * @returns {PerspectiveCamera} Returns itself.\r\n     */\r\n    updateProjectionMatrix() {\r\n        this.projectionMatrix.setPerspective(this.fov, this.aspect, this.near, this.far);\r\n        this.isProjectionMatrixStale = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Has to be called when the viewport size changes (e.g. window resize).\r\n     * \r\n     * @param {Number} width The width of the viewport.\r\n     * @param {Number} height The height of the viewport.\r\n     * \r\n     * @returns {PerspectiveCamera} Returns itself.\r\n     */\r\n    updateViewport(width, height) {\r\n      this.aspect = width / height;\r\n      return this;\r\n    }\r\n}\r\n\r\nmodule.exports = PerspectiveCamera;","const CameraBase = require('./CameraBase');\r\nconst OrthographicCamera = require('./OrthographicCamera');\r\nconst PerspectiveCamera = require('./PerspectiveCamera');\r\n\r\nmodule.exports = {\r\n  CameraBase,\r\n  OrthographicCamera,\r\n  PerspectiveCamera\r\n}","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\n/** \r\n * An abstract class representing the base for controls implementations. \r\n * \r\n * @property {Renderer} renderer A Lore Renderer instance.\r\n * @property {CameraBase} camera A Lore CameraBase extending object.\r\n * @property {HTMLCanvasElement} canvas A HTMLCanvasElement.\r\n * @property {Number} lowFps The FPS limit when throttling FPS.\r\n * @property {Number} highFps The FPS limit when not throttling FPS.\r\n * @property {String} touchMode The current touch mode.\r\n * @property {Vector3f} lookAt The current lookat associated with these controls.\r\n */\r\nclass ControlsBase {\r\n\r\n  /**\r\n   * Creates an instance of ControlsBase.\r\n   * @param {Renderer} renderer An instance of a Lore renderer.\r\n   * @param {Vector3f} [lookAt=new Vector3f()] The look at vector of the controls.\r\n   * @param {Boolean} [enableVR=false] Whether or not to track phone spatial information using the WebVR API.\r\n   */\r\n  constructor(renderer, lookAt = new Vector3f(0.0, 0.0, 0.0), enableVR = false) {\r\n    this.renderer = renderer;\r\n    this.camera = renderer.camera;\r\n    this.canvas = renderer.canvas;\r\n    this.lowFps = 15;\r\n    this.highFps = 30;\r\n    this._eventListeners = {};\r\n    this.renderer.setMaxFps(this.lowFps);\r\n    this.touchMode = 'drag';\r\n    this.lookAt = lookAt;\r\n\r\n    this.mouse = {\r\n      previousPosition: {\r\n        x: null,\r\n        y: null\r\n      },\r\n      delta: {\r\n        x: 0.0,\r\n        y: 0.0\r\n      },\r\n      position: {\r\n        x: 0.0,\r\n        y: 0.0\r\n      },\r\n      state: {\r\n        left: false,\r\n        middle: false,\r\n        right: false\r\n      },\r\n      normalizedPosition: {\r\n        x: 0.0,\r\n        y: 0.0\r\n      },\r\n      touches: 0\r\n    };\r\n\r\n    this.keyboard = {\r\n      alt: false,\r\n      ctrl: false,\r\n      shift: false\r\n    };\r\n\r\n    this.VR = {};\r\n\r\n    let that = this;\r\n    \r\n    this.canvas.addEventListener('mousemove', function (e) {\r\n      if (that.mouse.previousPosition.x !== null && that.mouse.state.left ||\r\n        that.mouse.state.middle ||\r\n        that.mouse.state.right) {\r\n        that.mouse.delta.x = e.pageX - that.mouse.previousPosition.x;\r\n        that.mouse.delta.y = e.pageY - that.mouse.previousPosition.y;\r\n\r\n        that.mouse.position.x += 0.01 * that.mouse.delta.x;\r\n        that.mouse.position.y += 0.01 * that.mouse.delta.y;\r\n\r\n        // Give priority to left, then middle, then right\r\n        if (that.mouse.state.left) {\r\n          that.raiseEvent('mousedrag', {\r\n            e: that.mouse.delta,\r\n            source: 'left'\r\n          });\r\n        } else if (that.mouse.state.middle) {\r\n          that.raiseEvent('mousedrag', {\r\n            e: that.mouse.delta,\r\n            source: 'middle'\r\n          });\r\n        } else if (that.mouse.state.right) {\r\n          that.raiseEvent('mousedrag', {\r\n            e: that.mouse.delta,\r\n            source: 'right'\r\n          });\r\n        }\r\n      }\r\n\r\n      // Set normalized mouse position\r\n      let rect = that.canvas.getBoundingClientRect();\r\n      that.mouse.normalizedPosition.x = ((e.clientX - rect.left) / that.canvas.width) * 2 - 1;\r\n      that.mouse.normalizedPosition.y = -((e.clientY - rect.top) / that.canvas.height) * 2 + 1;\r\n\r\n      that.raiseEvent('mousemove', {\r\n        e: that\r\n      });\r\n\r\n      that.mouse.previousPosition.x = e.pageX;\r\n      that.mouse.previousPosition.y = e.pageY;\r\n    });\r\n\r\n    this.canvas.addEventListener('touchstart', function (e) {\r\n      that.mouse.touches++;\r\n      let touch = e.touches[0];\r\n      e.preventDefault();\r\n\r\n      that.mouse.touched = true;\r\n\r\n      that.renderer.setMaxFps(that.highFps);\r\n\r\n      // This is for selecting stuff when touching but not moving\r\n\r\n      // Set normalized mouse position\r\n      let rect = that.canvas.getBoundingClientRect();\r\n      that.mouse.normalizedPosition.x = ((touch.clientX - rect.left) / that.canvas.width) * 2 - 1;\r\n      that.mouse.normalizedPosition.y = -((touch.clientY - rect.top) / that.canvas.height) * 2 + 1;\r\n\r\n      if (that.touchMode !== 'drag') {\r\n        that.raiseEvent('mousemove', {\r\n          e: that\r\n        });\r\n      }\r\n\r\n      that.raiseEvent('mousedown', {\r\n        e: that,\r\n        source: 'touch'\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('touchend', function (e) {\r\n      that.mouse.touches--;\r\n      e.preventDefault();\r\n\r\n      that.mouse.touched = false;\r\n\r\n      // Reset the previous position and delta of the mouse\r\n      that.mouse.previousPosition.x = null;\r\n      that.mouse.previousPosition.y = null;\r\n\r\n      that.renderer.setMaxFps(that.lowFps);\r\n\r\n      that.raiseEvent('mouseup', {\r\n        e: that,\r\n        source: 'touch'\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('touchmove', function (e) {\r\n      let touch = e.touches[0];\r\n      let source = 'left';\r\n\r\n      if (that.mouse.touches == 2) source = 'right';\r\n\r\n      e.preventDefault();\r\n\r\n      if (that.mouse.previousPosition.x !== null && that.mouse.touched) {\r\n        that.mouse.delta.x = touch.pageX - that.mouse.previousPosition.x;\r\n        that.mouse.delta.y = touch.pageY - that.mouse.previousPosition.y;\r\n\r\n        that.mouse.position.x += 0.01 * that.mouse.delta.x;\r\n        that.mouse.position.y += 0.01 * that.mouse.delta.y;\r\n\r\n        if (that.touchMode === 'drag')\r\n          that.raiseEvent('mousedrag', {\r\n            e: that.mouse.delta,\r\n            source: source\r\n          });\r\n      }\r\n\r\n      // Set normalized mouse position\r\n      let rect = that.canvas.getBoundingClientRect();\r\n      that.mouse.normalizedPosition.x = ((touch.clientX - rect.left) / that.canvas.width) * 2 - 1;\r\n      that.mouse.normalizedPosition.y = -((touch.clientY - rect.top) / that.canvas.height) * 2 + 1;\r\n\r\n      if (that.touchMode !== 'drag')\r\n        that.raiseEvent('mousemove', {\r\n          e: that\r\n        });\r\n\r\n      that.mouse.previousPosition.x = touch.pageX;\r\n      that.mouse.previousPosition.y = touch.pageY;\r\n    });\r\n\r\n    let wheelevent = 'mousewheel';\r\n    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) wheelevent = 'DOMMouseScroll';\r\n\r\n    this.canvas.addEventListener(wheelevent, function (e) {\r\n      e.preventDefault();\r\n\r\n      let delta = 'wheelDelta' in e ? e.wheelDelta : -40 * e.detail;\r\n      that.raiseEvent('mousewheel', {\r\n        e: delta\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('keydown', function (e) {\r\n      if (e.which == 16) {\r\n        that.keyboard.shift = true;\r\n      } else if (e.which == 17) {\r\n        that.keyboard.ctrl = true;\r\n      } else if (e.which == 18) {\r\n        that.keyboard.alt = true;\r\n      }\r\n\r\n      that.raiseEvent('keydown', {\r\n        e: e.which\r\n      })\r\n    });\r\n\r\n    this.canvas.addEventListener('keyup', function (e) {\r\n      if (e.which == 16) {\r\n        that.keyboard.shift = false;\r\n      } else if (e.which == 17) {\r\n        that.keyboard.ctrl = false;\r\n      } else if (e.which == 18) {\r\n        that.keyboard.alt = false;\r\n      }\r\n\r\n      that.raiseEvent('keyup', {\r\n        e: e.which\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('mousedown', function (e) {\r\n      let btn = e.button;\r\n      let source = 'left';\r\n\r\n      // Only handle single button events\r\n      if (btn == 0) {\r\n        that.mouse.state.left = true;\r\n      } else if (btn == 1) {\r\n        that.mouse.state.middle = true;\r\n        source = 'middle';\r\n      } else if (btn == 2) {\r\n        that.mouse.state.right = true;\r\n        source = 'right';\r\n      }\r\n\r\n      that.renderer.setMaxFps(that.highFps);\r\n\r\n      that.raiseEvent('mousedown', {\r\n        e: that,\r\n        source: source\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('click', function (e) {\r\n      let btn = e.button;\r\n      let source = 'left';\r\n\r\n      that.raiseEvent('click', {\r\n        e: that,\r\n        source: source\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('dblclick', function (e) {\r\n      let btn = e.button;\r\n      let source = 'left';\r\n\r\n      that.raiseEvent('dblclick', {\r\n        e: that,\r\n        source: source\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('mouseup', function (e) {\r\n      let btn = e.button;\r\n      let source = 'left';\r\n\r\n      // Only handle single button events\r\n      if (btn == 0) {\r\n        that.mouse.state.left = false;\r\n      } else if (btn == 1) {\r\n        that.mouse.state.middle = false;\r\n        source = 'middle';\r\n      } else if (btn == 2) {\r\n        that.mouse.state.right = false;\r\n        source = 'right';\r\n      }\r\n\r\n      // Reset the previous position and delta of the mouse\r\n      that.mouse.previousPosition.x = null;\r\n      that.mouse.previousPosition.y = null;\r\n\r\n      that.renderer.setMaxFps(that.lowFps);\r\n\r\n      that.raiseEvent('mouseup', {\r\n        e: that,\r\n        source: source\r\n      });\r\n    });\r\n\r\n    this.canvas.addEventListener('mouseleave', function (e) {\r\n      that.mouse.state.left = false;\r\n      that.mouse.state.middle = false;\r\n      that.mouse.state.right = false;\r\n\r\n      that.mouse.previousPosition.x = null;\r\n      that.mouse.previousPosition.y = null;\r\n\r\n      that.renderer.setMaxFps(that.lowFps);\r\n\r\n      that.raiseEvent('mouseleave', {\r\n        e: that,\r\n        source: that.canvas\r\n      });\r\n    });\r\n\r\n\r\n  }\r\n\r\n  /**\r\n   * Initialiizes WebVR, if the API is available and the device suppports it.\r\n   */\r\n  /*\r\n  initWebVR() {\r\n    if (navigator && navigator.getVRDevices) {\r\n      navigator.getVRDisplays().then(function (displays) {\r\n        if (displays.length === 0) {\r\n          return;\r\n        }\r\n\r\n        for (var i = 0; i < displays.length; ++i) {\r\n\r\n        }\r\n      });\r\n    }\r\n  }\r\n  */\r\n\r\n  /**\r\n   * Adds an event listener to this controls instance.\r\n   * \r\n   * @param {String} eventName The name of the event that is to be listened for.\r\n   * @param {Function} callback A callback function to be called on the event being fired.\r\n   */\r\n  addEventListener(eventName, callback) {\r\n    if (!this._eventListeners[eventName]) {\r\n      this._eventListeners[eventName] = [];\r\n    }\r\n\r\n    this._eventListeners[eventName].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Remove an event listener from this controls instance.\r\n   * \r\n   * @param {String} eventName The name of the event that is to be listened for.\r\n   * @param {Function} callback A callback function to be called on the event being fired.\r\n   */\r\n  removeEventListener(eventName, callback) {\r\n    if (!this._eventListeners.hasOwnProperty(eventName)) {\r\n      return;\r\n    }\r\n\r\n    let index = this._eventListeners[eventName].indexOf(callback);\r\n\r\n    if (index > -1) {\r\n      this._eventListeners[eventName].splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Raises an event.\r\n   * \r\n   * @param {String} eventName The name of the event to be raised.\r\n   * @param {*} [data={}] The data to be supplied to the callback function.\r\n   */\r\n  raiseEvent(eventName, data = {}) {\r\n    if (this._eventListeners[eventName]) {\r\n      for (let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n        this._eventListeners[eventName][i](data);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the current look at vector associated with this controls.\r\n   * \r\n   * @returns {Vector3f} The current look at vector.\r\n   */\r\n  getLookAt() {\r\n    return this.lookAt;\r\n  }\r\n\r\n  /**\r\n   * Sets the lookat vector, which is the center of the orbital camera sphere.\r\n   * \r\n   * @param {Vector3f} lookAt The lookat vector.\r\n   * @returns {ControlsBase} Returns itself.\r\n   */\r\n  setLookAt(lookAt) {\r\n    //this.camera.position = new Vector3f(this.radius, this.radius, this.radius);\r\n    this.lookAt = lookAt.clone();\r\n    this.update();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the camera (on mouse move, touch drag, mousewheel scroll, ...).\r\n   * \r\n   * @param {*} [e=null] A mouse or touch events data.\r\n   * @param {String} [source=null] The source of the input ('left', 'middle', 'right', 'wheel', ...).\r\n   * @returns {ControlsBase} Returns itself.\r\n   */\r\n  update(e = null, source = null) {\r\n    return this;\r\n  }\r\n}\r\n\r\nmodule.exports = ControlsBase;","//@ts-check\r\n\r\nconst ControlsBase = require('../Controls/ControlsBase')\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/** A class representing orbital controls. */\r\nclass FirstPersonControls extends ControlsBase {\r\n\r\n    /**\r\n     * Creates an instance of FirstPersonControls.\r\n     * @param {Renderer} renderer An instance of a Lore renderer.\r\n     */\r\n    constructor(renderer, radius) {\r\n        super(renderer);\r\n\r\n        this.up = Vector3f.up();\r\n        this.renderer = renderer;\r\n        this.camera = renderer.camera;\r\n        this.canvas = renderer.canvas;\r\n\r\n        this.camera.position = new Vector3f(radius, radius, radius);\r\n        this.camera.updateProjectionMatrix();\r\n        this.camera.updateViewMatrix();\r\n\r\n        this.rotationLocked = false;\r\n\r\n        let that = this;\r\n\r\n        this.addEventListener('mousedrag', function (e) {\r\n            that.update(e.e, e.source);\r\n        });\r\n\r\n        // Initial update\r\n        this.update({\r\n            x: 0,\r\n            y: 0\r\n        }, 'left');\r\n    }\r\n\r\n    /**\r\n     * Update the camera (on mouse move, touch drag, mousewheel scroll, ...).\r\n     * \r\n     * @param {any} e A mouse or touch events data.\r\n     * @param {String} source The source of the input ('left', 'middle', 'right', 'wheel', ...).\r\n     * @returns {FirstPersonControls} Returns itself.\r\n     */\r\n    update(e, source) {\r\n        if (source === 'left') {\r\n            // Move forward here\r\n        }\r\n\r\n        // Update the camera\r\n        let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n        this.camera.position.copyFrom(this.lookAt).add(offset);\r\n        this.camera.setLookAt(this.lookAt);\r\n        this.camera.updateViewMatrix();\r\n\r\n        this.raiseEvent('updated');\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = FirstPersonControls;","//@ts-check\r\n\r\nconst ControlsBase = require('../Controls/ControlsBase')\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst SphericalCoords = require('../Math/SphericalCoords');\r\n\r\n/** \r\n * A class representing orbital controls.\r\n * \r\n * @property {Vector3f} up The global up vector.\r\n * @property {Number} radius The distance from the camera to the lookat vector.\r\n * @property {Number} [yRotationLimit=Math.PI] The limit for the vertical rotation.\r\n * @property {SphericalCoords} spherical The spherical coordinates of the camera on the sphere around the lookat vector.\r\n * @property {Number} scale The sensitivity scale.\r\n * @property {CameraBase} camera The camera associated with these controls.\r\n */\r\nclass OrbitalControls extends ControlsBase {\r\n\r\n    /**\r\n     * Creates an instance of OrbitalControls.\r\n     * @param {Renderer} renderer An instance of a Lore renderer.\r\n     * @param {Number} radius The distance of the camera to the lookat vector.\r\n     * @param {Vector3f} lookAt The lookat vector.\r\n     */\r\n    constructor(renderer, radius, lookAt = new Vector3f(0.0, 0.0, 0.0)) {\r\n        super(renderer, lookAt);\r\n\r\n        this.up = Vector3f.up();\r\n        this.radius = radius;\r\n        \r\n        this.yRotationLimit = Math.PI;\r\n\r\n        this._dPhi = 0.0;\r\n        this._dTheta = 0.0;\r\n        this._dPan = new Vector3f(0.0, 0.0, 0.0);\r\n\r\n        this.spherical = new SphericalCoords();\r\n\r\n        this.scale = 0.95;\r\n        \r\n        this.camera.position = new Vector3f(radius, radius, radius);\r\n        this.camera.updateProjectionMatrix();\r\n        this.camera.updateViewMatrix();\r\n\r\n        this.rotationLocked = false;\r\n\r\n        let that = this;\r\n\r\n        this.addEventListener('mousedrag', function (e) {\r\n            that.update(e.e, e.source);\r\n        });\r\n\r\n        this.addEventListener('mousewheel', function (e) {\r\n            that.update({\r\n                x: 0,\r\n                y: -e.e\r\n            }, 'wheel');\r\n        });\r\n\r\n        // Initial update\r\n        this.update({\r\n            x: 0,\r\n            y: 0\r\n        }, 'left');\r\n    }\r\n\r\n    /**\r\n     * Limit the vertical rotation to the horizon (the upper hemisphere).\r\n     * \r\n     * @param {Boolean} limit A boolean indicating whether or not to limit the vertical rotation to the horizon.\r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    limitRotationToHorizon(limit) {\r\n        if (limit) {\r\n            this.yRotationLimit = 0.5 * Math.PI;\r\n        } else {\r\n            this.yRotationLimit = Math.PI;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the distance (radius of the sphere) from the lookat vector to the camera.\r\n     * \r\n     * @param {Number} radius The radius.\r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setRadius(radius) {\r\n        this.radius = radius;\r\n        this.camera.position = new Vector3f(0, 0, radius);\r\n\r\n        this.camera.updateProjectionMatrix();\r\n        this.camera.updateViewMatrix();\r\n        this.update();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Update the camera (on mouse move, touch drag, mousewheel scroll, ...).\r\n     * \r\n     * @param {*} [e=null] A mouse or touch events data.\r\n     * @param {String} [source=null] The source of the input ('left', 'middle', 'right', 'wheel', ...).\r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    update(e = null, source = null) {\r\n        if (source == 'left' && !this.rotationLocked) {\r\n            // Rotate\r\n            this._dTheta = -2 * Math.PI * e.x / (this.canvas.clientWidth * this.camera.zoom);\r\n            this._dPhi = -2 * Math.PI * e.y / (this.canvas.clientHeight * this.camera.zoom);\r\n            \r\n            // It's just to fast like this ...\r\n            // this._dTheta = -2 * Math.PI * e.x / this.canvas.clientWidth;\r\n            // this._dPhi = -2 * Math.PI * e.y / this.canvas.clientHeight;\r\n        } else if (source == 'right' || source == 'left' && this.rotationLocked) {\r\n            // Translate\r\n            let x = e.x * (this.camera.right - this.camera.left) /\r\n                this.camera.zoom / this.canvas.clientWidth;\r\n            let y = e.y * (this.camera.top - this.camera.bottom) /\r\n                this.camera.zoom / this.canvas.clientHeight;\r\n\r\n            let u = this.camera.getUpVector().components;\r\n            let r = this.camera.getRightVector().components;\r\n\r\n            this._dPan.components[0] = r[0] * -x + u[0] * y;\r\n            this._dPan.components[1] = r[1] * -x + u[1] * y;\r\n            this._dPan.components[2] = r[2] * -x + u[2] * y;\r\n        } else if (source == 'middle' || source == 'wheel') {\r\n            if (e.y > 0) {\r\n                // Zoom Out\r\n                this.camera.zoom = Math.max(0, this.camera.zoom * this.scale);\r\n                this.camera.updateProjectionMatrix();\r\n                this.raiseEvent('zoomchanged', this.camera.zoom);\r\n            } else if (e.y < 0) {\r\n                // Zoom In\r\n                this.camera.zoom = Math.max(0, this.camera.zoom / this.scale);\r\n                this.camera.updateProjectionMatrix();\r\n                this.raiseEvent('zoomchanged', this.camera.zoom);\r\n            }\r\n        }\r\n\r\n        // Update the camera\r\n        let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n        this.spherical.setFromVector(offset);\r\n        this.spherical.components[1] += this._dPhi;\r\n        this.spherical.components[2] += this._dTheta;\r\n        this.spherical.limit(0, this.yRotationLimit, -Infinity, Infinity);\r\n        this.spherical.secure();\r\n\r\n        // Limit radius here\r\n        this.lookAt.add(this._dPan);\r\n        offset.setFromSphericalCoords(this.spherical);\r\n\r\n        this.camera.position.copyFrom(this.lookAt).add(offset);\r\n        this.camera.setLookAt(this.lookAt);\r\n        this.camera.updateViewMatrix();\r\n\r\n        this._dPhi = 0.0;\r\n        this._dTheta = 0.0;\r\n        this._dPan.set(0, 0, 0);\r\n\r\n        this.raiseEvent('updated');\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Moves the camera around the sphere by spherical coordinates.\r\n     * \r\n     * @param {Number} phi The phi component of the spherical coordinates.\r\n     * @param {Number} theta The theta component of the spherical coordinates.\r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setView(phi, theta) {\r\n        let offset = this.camera.position.clone().subtract(this.lookAt);\r\n\r\n        this.spherical.setFromVector(offset);\r\n        this.spherical.components[1] = phi;\r\n        this.spherical.components[2] = theta;\r\n        this.spherical.secure();\r\n\r\n        offset.setFromSphericalCoords(this.spherical);\r\n\r\n        this.camera.position.copyFrom(this.lookAt).add(offset);\r\n        this.camera.setLookAt(this.lookAt);\r\n        this.camera.updateViewMatrix();\r\n        this.raiseEvent('updated');\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Zoom in on the lookat vector.\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    zoomIn() {\r\n        this.camera.zoom = Math.max(0, this.camera.zoom / this.scale);\r\n        this.camera.updateProjectionMatrix();\r\n        this.raiseEvent('zoomchanged', this.camera.zoom);\r\n        this.raiseEvent('updated');\r\n        \r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Zoom out from the lookat vector.\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    zoomOut() {\r\n        this.camera.zoom = Math.max(0, this.camera.zoom * this.scale);\r\n        this.camera.updateProjectionMatrix();\r\n        this.raiseEvent('zoomchanged', this.camera.zoom);\r\n        this.raiseEvent('updated');\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the zoom to a given value.\r\n     * \r\n     * @param {Number} zoom The zoom value.\r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setZoom(zoom) {\r\n        this.camera.zoom = zoom;\r\n        this.camera.updateProjectionMatrix();\r\n        this.raiseEvent('zoomchanged', this.camera.zoom);\r\n        this.raiseEvent('updated');\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to the top view (locks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setTopView() {\r\n        this.setView(0.0, 2.0 * Math.PI);\r\n        this.rotationLocked = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to the bottom view (locks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setBottomView() {\r\n        this.setView(0.0, 0.0);\r\n        this.rotationLocked = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to the right view (locks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setRightView() {\r\n        this.setView(0.5 * Math.PI, 0.5 * Math.PI);\r\n        this.rotationLocked = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to the left view (locks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setLeftView() {\r\n        this.setView(0.5 * Math.PI, -0.5 * Math.PI);\r\n        this.rotationLocked = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to the front view (locks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setFrontView() {\r\n        this.setView(0.5 * Math.PI, 2.0 * Math.PI);\r\n        this.rotationLocked = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to the back view (locks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setBackView() {\r\n        this.setView(0.5 * Math.PI, Math.PI);\r\n        this.rotationLocked = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the camera to free view (unlocks rotation).\r\n     * \r\n     * @returns {OrbitalControls} Returns itself.\r\n     */\r\n    setFreeView() {\r\n        this.setView(0.25 * Math.PI, 0.25 * Math.PI);\r\n        this.rotationLocked = false\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = OrbitalControls;","const ControlsBase = require('./ControlsBase');\r\nconst FirstPersonControls = require('./FirstPersonControls');\r\nconst OrbitalControls = require('./OrbitalControls');\r\n\r\nmodule.exports = {\r\n  ControlsBase,\r\n  FirstPersonControls,\r\n  OrbitalControls\r\n}","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/** \r\n * A class representing an attribute. \r\n * \r\n * @property {String} type The type name of this object (Lore.Attribute).\r\n * @property {*} data The data represented by the attribute in a 1D array. Usually a Float32Array.\r\n * @property {Number} [attributeLength=3] The length of the attribute. '3' for Vector3f.\r\n * @property {String} name The name of this attribut. Must be the name used by the shader.\r\n * @property {Number} size The length of the attribute values (defined as data.length / attributeLength).\r\n * @property {WebGLBuffer} buffer The bound WebGLBuffer.\r\n * @property {GLint} attributeLocation The attribute location for this attribute.\r\n * @property {GLenum} bufferType The buffer target. As of WebGL 1: gl.ARRAY_BUFFER or gl.ELEMENT_ARRAY_BUFFER.\r\n * @property {GLenum} drawMode The draw mode. As of WebGL 1: gl.STATIC_DRAW, gl.DYNAMIC_DRAW or gl.STREAM_DRAW.\r\n * @property {Boolean} stale A boolean indicating whether or not this attribute has changed and needs to be updated.\r\n */\r\nclass Attribute {\r\n    /**\r\n     * Creates an instance of Attribute.\r\n     * @param {*} data The data represented by the attribute in a 1D array. Usually a Float32Array.\r\n     * @param {Number} attributeLength The length of the attribute (3 for RGB, XYZ, ...).\r\n     * @param {String} name The name of the attribute.\r\n     */\r\n    constructor(data, attributeLength, name) {\r\n        this.type = 'Lore.Attribute';\r\n        this.data = data;\r\n        this.attributeLength = attributeLength || 3;\r\n        this.name = name;\r\n        this.size = this.data.length / this.attributeLength;\r\n        this.buffer = null;\r\n        this.attributeLocation;\r\n        this.bufferType = null;\r\n        this.drawMode = null;\r\n        this.stale = false;\r\n    }\r\n\r\n    /**\r\n     * Set the attribute value from a vector at a given index. The vector should have the same number of components as is the length of this attribute.\r\n     * \r\n     * @param {Number} index The index at which to replace / set the value (is calculated as index * attributeLength).\r\n     * @param {Vector3f} v A vector.\r\n     */\r\n    setFromVector(index, v) {\r\n        this.data.set(v.components, index * this.attributeLength, v.components.length);\r\n    }\r\n\r\n    /**\r\n     * Set the attribute values from vectors in an array.\r\n     * \r\n     * @param {Vector3f[]} arr An array containing vectors. The number of components of the vectors must have the same length as the attribute length specified.\r\n     */\r\n    setFromVectorArray(arr) {\r\n        if (this.attributeLength !== arr[0].components.length)\r\n            throw 'The attribute has a length of ' + this.attributeLength + '. But the vectors have ' + arr[0].components.length + ' components.';\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            this.data.set(arr[i].components, i * this.attributeLength, arr[i].components.length);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the x value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The x value at a given index.\r\n     */\r\n    getX(index) {\r\n        return this.data[index * this.attributeLength];\r\n    }\r\n\r\n    /**\r\n     * Set the x value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setX(index, value) {\r\n        this.data[index * this.attributeLength];\r\n    }\r\n\r\n    /**\r\n     * Gets the y value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The y value at a given index.\r\n     */\r\n    getY(index) {\r\n        return this.data[index * this.attributeLength + 1];\r\n    }\r\n\r\n    /**\r\n     * Set the y value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setY(index, value) {\r\n        this.data[index * this.attributeLength + 1];\r\n    }\r\n\r\n    /**\r\n     * Gets the z value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The z value at a given index.\r\n     */\r\n    getZ(index) {\r\n        return this.data[index * this.attributeLength + 2];\r\n    }\r\n\r\n    /**\r\n     * Set the z value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setZ(index, value) {\r\n        this.data[index * this.attributeLength + 2];\r\n    }\r\n\r\n    /**\r\n     * Gets the w value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @returns {Number} The w value at a given index.\r\n     */\r\n    getW(index) {\r\n        return this.data[index * this.attributeLength + 3];\r\n    }\r\n\r\n    /**\r\n     * Set the w value at a given index.\r\n     * \r\n     * @param {Number} index The index.\r\n     * @param {Number} value A number.\r\n     */\r\n    setW(index, value) {\r\n        this.data[index * this.attributeLength + 3];\r\n    }\r\n\r\n    /**\r\n     * Returns the gl type. Currently only float is supported.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     * @returns {Number} The type.\r\n     */\r\n    getGlType(gl) {\r\n        // Just floats for now\r\n        // TODO: Add additional types.\r\n        return gl.FLOAT;\r\n    }\r\n\r\n    /**\r\n     * Update the attribute in order for changes to take effect.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     */\r\n    update(gl) {\r\n        gl.bindBuffer(this.bufferType, this.buffer);\r\n        gl.bufferData(this.bufferType, this.data, this.drawMode);\r\n\r\n        this.stale = false;\r\n    }\r\n\r\n    /**\r\n     * Create a new WebGL buffer.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     * @param {WebGLProgram} program A WebGL program.\r\n     * @param {GLenum} bufferType The buffer type.\r\n     * @param {GLenum} drawMode The draw mode.\r\n     */\r\n    createBuffer(gl, program, bufferType, drawMode) {\r\n        this.buffer = gl.createBuffer();\r\n        this.bufferType = bufferType || gl.ARRAY_BUFFER;\r\n        this.drawMode = drawMode || gl.STATIC_DRAW;\r\n\r\n        gl.bindBuffer(this.bufferType, this.buffer);\r\n        gl.bufferData(this.bufferType, this.data, this.drawMode);\r\n\r\n        this.buffer.itemSize = this.attributeLength;\r\n        this.buffer.numItems = this.size;\r\n\r\n        this.attributeLocation = gl.getAttribLocation(program, this.name);\r\n        gl.bindBuffer(this.bufferType, null);\r\n    }\r\n\r\n    /**\r\n     * Bind the buffer of this attribute. The attribute must exist in the current shader.\r\n     * \r\n     * @param {WebGLRenderingContext} gl The WebGL rendering context.\r\n     */\r\n    bind(gl) {\r\n        gl.bindBuffer(this.bufferType, this.buffer);\r\n\r\n        // Only enable attribute if it actually exists in the Shader\r\n        if (this.attributeLocation >= 0) {\r\n            gl.vertexAttribPointer(this.attributeLocation, this.attributeLength, this.getGlType(gl), gl.FALSE, 0, 0);\r\n            gl.enableVertexAttribArray(this.attributeLocation);\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Attribute;","//@ts-check\r\n\r\n/** \r\n * A class representing a Color. \r\n * \r\n * @property {Float32Array} components A typed array storing the components of this color (rgba).\r\n */\r\nclass Color {\r\n    /**\r\n     * Creates an instance of Color.\r\n     * @param {Number} r The red component (0.0 - 1.0).\r\n     * @param {Number} g The green component (0.0 - 1.0).\r\n     * @param {Number} b The blue component (0.0 - 1.0).\r\n     * @param {Number} [a=1.0] The alpha component (0.0 - 1.0).\r\n     */\r\n    constructor(r, g, b, a = 1.0) {\r\n        if (arguments.length === 1) {\r\n            this.components = new Float32Array(r);\r\n        } else {\r\n            this.components = new Float32Array(4);\r\n            this.components[0] = r || 0.0;\r\n            this.components[1] = g || 0.0;\r\n            this.components[2] = b || 0.0;\r\n            this.components[3] = a || 1.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the red, green, blue and alpha components of the color.\r\n     * \r\n     * @param {Number} r The red component (0.0 - 1.0).\r\n     * @param {Number} g The green component (0.0 - 1.0).\r\n     * @param {Number} b The blue component (0.0 - 1.0).\r\n     * @param {Number} a The alpha component (0.0 - 1.0).\r\n     * @returns {Color} Returns itself.\r\n     */\r\n    set(r, g, b, a) {\r\n        this.components[0] = r;\r\n        this.components[1] = g;\r\n        this.components[2] = b;\r\n\r\n        if (arguments.length == 4) {\r\n            this.components[3] = a;\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the r,g,b,a components from a hex string.\r\n     * \r\n     * @static\r\n     * @param {String} hex A hex string in the form of #ABCDEF or #ABC.\r\n     * @returns {Color} A color representing the hex string.\r\n     */\r\n    static fromHex(hex) {\r\n        // Thanks to Tim Down\r\n        // http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\r\n\r\n        let shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        \r\n        hex = hex.replace(shorthandRegex, function (m, r, g, b) {\r\n            return r + r + g + g + b + b;\r\n        });\r\n\r\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        let r = parseInt(result[1], 16);\r\n        let g = parseInt(result[2], 16);\r\n        let b = parseInt(result[3], 16);\r\n\r\n        return result ? new Color(r / 255.0, g / 255.0, b / 255.0, 1.0) : null;\r\n    }\r\n\r\n    \r\n\r\n    /**\r\n     * Get the r, g or b value from a hue component.\r\n     * \r\n     * @static\r\n     * @param {Number} p \r\n     * @param {Number} q \r\n     * @param {Number} t \r\n     * @returns {Number} The r, g or b component value.\r\n     */\r\n    static hueToRgb(p, q, t) {\r\n        if (t < 0) {\r\n            t += 1;\r\n        } else if (t > 1) {\r\n            t -= 1;\r\n        } else if (t < 0.1667) {\r\n            return p + (q - p) * 6 * t;\r\n        } else if (t < 0.5) {\r\n            return q;\r\n        } else if (t < 0.6667) {\r\n            return p + (q - p) * (0.6667 - t) * 6;\r\n        }\r\n\r\n        return p;\r\n    }\r\n\r\n    /**\r\n     * Converts HSL to RGB.\r\n     * \r\n     * @static\r\n     * @param {Number} h The hue component.\r\n     * @param {Number} s The saturation component.\r\n     * @param {Number} l The lightness component.\r\n     * @returns {Number[]} An array containing the r, g and b values ([r, g, b]).\r\n     */\r\n    static hslToRgb(h, s, l) {\r\n        let r, g, b;\r\n\r\n        if (s == 0) {\r\n            r = g = b = l;\r\n        } else {\r\n            let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            let p = 2 * l - q;\r\n            \r\n            r = Color.hueToRgb(p, q, h + 0.3333);\r\n            g = Color.hueToRgb(p, q, h);\r\n            b = Color.hueToRgb(p, q, h - 0.3333);\r\n        }\r\n\r\n        return [r, g, b];\r\n    }\r\n\r\n    /**\r\n     * Converts HSL to RGB.\r\n     * \r\n     * @static\r\n     * @param {Number} h The hue component.\r\n     * @param {Number} s The saturation component.\r\n     * @param {Number} l The lightness component.\r\n     * @returns {String} A hex string representing the color (#RRGGBB).\r\n     */\r\n    static hslToHex(h, s, l) {\r\n      let [r, g, b] = Color.hslToRgb(h, s, l);\r\n      return '#' + [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)].map(e => {\r\n        const hex = e.toString(16);\r\n        return hex.length === 1 ? '0' + hex : hex\r\n      }).join('')\r\n    }\r\n\r\n    /**\r\n     * Converts RGB to HSL.\r\n     * \r\n     * @static\r\n     * @param {Number} r The red component.\r\n     * @param {Number} g The green component.\r\n     * @param {Number} b The blue component.\r\n     * @returns {Number[]} An array containing the h, s and l values ([h, s, l]).\r\n     */\r\n    static rgbToHsl(r, g, b) {\r\n        r /= 255, g /= 255, b /= 255;\r\n        let max = Math.max(r, g, b),\r\n            min = Math.min(r, g, b);\r\n        let h, s, l = (max + min) / 2;\r\n\r\n        if (max == min) {\r\n            h = s = 0; // achromatic\r\n        } else {\r\n            let d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch (max) {\r\n            case r:\r\n                h = (g - b) / d + (g < b ? 6 : 0);\r\n                break;\r\n            case g:\r\n                h = (b - r) / d + 2;\r\n                break;\r\n            case b:\r\n                h = (r - g) / d + 4;\r\n                break;\r\n            }\r\n            h /= 6;\r\n        }\r\n\r\n        return [h, s, l];\r\n    }\r\n\r\n    /**\r\n     * Encode rgba colour values as a 32-bit float.\r\n     * \r\n     * @static\r\n     * @param {Number} r \r\n     * @param {Number} g \r\n     * @param {Number} b\r\n     * @param {Number} a\r\n     * @returns {number} A 32-bit colour encoded as a float.\r\n     */\r\n    static rgbaToFloat(r, g, b, a) {\r\n        return r + g * 256.0 + b * 65536.0 + a * 16777216.0;\r\n    }\r\n\r\n    /**\r\n     * Shifts the hue so that 0.0 represents blue and 1.0 represents magenta.\r\n     * \r\n     * @static\r\n     * @param {Number} hue A hue component.\r\n     * @returns {Number} The hue component shifted so that 0.0 is blue and 1.0 is magenta.\r\n     */\r\n    static gdbHueShift(hue) {\r\n        hue = 0.85 * hue + 0.66;\r\n        \r\n        if (hue > 1.0) {\r\n            hue = hue - 1.0;\r\n        }\r\n\r\n        hue = (1 - hue) + 0.33\r\n        \r\n        if (hue > 1.0) {\r\n            hue = hue - 1.0\r\n        }\r\n\r\n        return hue;\r\n    }\r\n}\r\n\r\nmodule.exports = Color","//@ts-check\r\n\r\n/** A map mapping draw modes as strings to their GLInt representations. */\r\nlet DrawModes = {\r\n    points: 0,\r\n    lines: 1,\r\n    lineStrip: 2,\r\n    lineLoop: 3,\r\n    triangles: 4,\r\n    traingleStrip: 5,\r\n    triangleFan: 6\r\n}\r\n\r\nmodule.exports = DrawModes\r\n","//@ts-check\r\n\r\nconst Shaders = require('../Shaders');\r\n\r\nclass Effect {\r\n    constructor(renderer, shaderName) {\r\n        this.renderer = renderer;\r\n        this.gl = this.renderer.gl;\r\n\r\n        this.framebuffer = this.initFramebuffer();\r\n        this.texture = this.initTexture();\r\n        this.renderbuffer = this.initRenderbuffer();\r\n        this.shader = Shaders[shaderName].clone();\r\n        this.shader.init(this.renderer.gl);\r\n\r\n        this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);\r\n    }\r\n\r\n    initBuffer() {\r\n      let g = this.gl;\r\n      let texCoordLocation = g.getAttribLocation(this.shader.program, 'v_coord');\r\n\r\n      // provide texture coordinates for the rectangle.\r\n      let texCoordBuffer = g.createBuffer();\r\n      g.bindBuffer(g.ARRAY_BUFFER, texCoordBuffer);\r\n      g.bufferData(g.ARRAY_BUFFER, new Float32Array([\r\n           1.0,  1.0,\r\n          -1.0,  1.0,\r\n          -1.0, -1.0,\r\n          -1.0, -1.0,\r\n           1.0, -1.0,\r\n           1.0,  1.0]), g.STATIC_DRAW);\r\n\r\n      g.enableVertexAttribArray(texCoordLocation);\r\n      g.vertexAttribPointer(texCoordLocation, 2, g.FLOAT, false, 0, 0);\r\n\r\n      return texCoordBuffer;\r\n    }\r\n\r\n    initTexture() {\r\n        let g = this.gl;\r\n\r\n        let texture = g.createTexture();\r\n        g.bindTexture(g.TEXTURE_2D, texture);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_WRAP_S, g.CLAMP_TO_EDGE);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_WRAP_T, g.CLAMP_TO_EDGE);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_MIN_FILTER, g.LINEAR);\r\n        g.texParameteri(g.TEXTURE_2D, g.TEXTURE_MAG_FILTER, g.LINEAR);\r\n\r\n        g.bindTexture(g.TEXTURE_2D, texture);\r\n        g.texImage2D(g.TEXTURE_2D, 0, g.RGBA, this.renderer.getWidth(), this.renderer.getHeight(), 0, g.RGBA, g.UNSIGNED_BYTE, null);\r\n\r\n        g.framebufferTexture2D(g.FRAMEBUFFER, g.COLOR_ATTACHMENT0, g.TEXTURE_2D, texture, 0);\r\n\r\n        return texture;\r\n    }\r\n\r\n    initFramebuffer() {\r\n        let g = this.gl;\r\n\r\n        let framebuffer = g.createFramebuffer();\r\n        g.bindFramebuffer(g.FRAMEBUFFER, framebuffer);\r\n        return framebuffer;\r\n    }\r\n\r\n    initRenderbuffer() {\r\n      let g = this.gl;\r\n\r\n      let renderbuffer = g.createRenderbuffer();\r\n      g.bindRenderbuffer(g.RENDERBUFFER, renderbuffer);\r\n\r\n      g.renderbufferStorage(g.RENDERBUFFER, g.DEPTH_COMPONENT16, this.renderer.getWidth(), this.renderer.getHeight());\r\n      g.framebufferRenderbuffer(g.FRAMEBUFFER, g.DEPTH_ATTACHMENT, g.RENDERBUFFER, renderbuffer);\r\n\r\n      // g.renderbufferStorage(g.RENDERBUFFER, g.DEPTH_STENCIL, this.renderer.getWidth(), this.renderer.getHeight());\r\n      // g.framebufferRenderbuffer(g.FRAMEBUFFER, g.DEPTH_STENCIL_ATTACHMENT, g.RENDERBUFFER, renderbuffer);\r\n\r\n      return renderbuffer;\r\n    }\r\n\r\n    bind() {\r\n        let g = this.gl;\r\n        g.bindFramebuffer(g.FRAMEBUFFER, this.framebuffer);\r\n        g.clear(g.COLOR_BUFFER_BIT | g.DEPTH_BUFFER_BIT);\r\n    }\r\n\r\n    unbind() {\r\n        let g = this.gl;\r\n        g.bindRenderbuffer(g.RENDERBUFFER, null);\r\n        g.bindFramebuffer(g.FRAMEBUFFER, null);\r\n\r\n        this.initBuffer();\r\n        this.shader.use();\r\n        g.drawArrays(g.TRIANGLES, 0, 6);\r\n    }\r\n}\r\n\r\nmodule.exports = Effect","//@ts-check\r\n\r\nconst DrawModes = require('./DrawModes');\r\nconst Attribute = require('./Attribute');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\nconst Node = require('./Node');\r\n\r\n/** \r\n * A class representing a geometry.\r\n * \r\n * @property {String} type The type name of this object (Lore.Geometry).\r\n * @property {String} name The name of this geometry.\r\n * @property {WebGLRenderingContext} gl A WebGL rendering context.\r\n * @property {Shader} shader An initialized shader.\r\n * @property {Object} attributes A map mapping attribute names to Lore.Attrubute objects.\r\n * @property {DrawMode} [drawMode=gl.POINTS] The current draw mode of this geometry.\r\n * @property {Boolean} isVisisble A boolean indicating whether or not this geometry is currently visible.\r\n */\r\nclass Geometry extends Node {\r\n  constructor(name, gl, shader) {\r\n      super();\r\n\r\n      this.type = 'Lore.Geometry';\r\n      this.name = name;\r\n      this.gl = gl;\r\n      this.shader = shader;\r\n      this.attributes = {};\r\n      this.drawMode = this.gl.POINTS;\r\n      this.isVisible = true;\r\n  }\r\n\r\n  addAttribute(name, data, length) {\r\n      this.attributes[name] = new Attribute(data, length, name);\r\n      this.attributes[name].createBuffer(this.gl, this.shader.program);\r\n\r\n      return this;\r\n  }\r\n\r\n  updateAttribute(name, data) {\r\n      if (data) {\r\n          this.attributes[name].data = data;\r\n      }\r\n\r\n      this.attributes[name].update(this.gl);\r\n\r\n      return this;\r\n  }\r\n\r\n  getAttribute(name) {\r\n      return this.attributes[name];\r\n  }\r\n\r\n  removeAttribute(name) {\r\n      delete this.attributes[name];\r\n\r\n      return this;\r\n  }\r\n\r\n  setMode(drawMode) {\r\n      switch (drawMode) {\r\n      case DrawModes.points:\r\n          this.drawMode = this.gl.POINTS;\r\n          break;\r\n      case DrawModes.lines:\r\n          this.drawMode = this.gl.LINES;\r\n          break;\r\n      case DrawModes.lineStrip:\r\n          this.drawMode = this.gl.LINE_STRIP;\r\n          break;\r\n      case DrawModes.lineLoop:\r\n          this.drawMode = this.gl.LINE_LOOP;\r\n          break;\r\n      case DrawModes.triangles:\r\n          this.drawMode = this.gl.TRIANGLES;\r\n          break;\r\n      case DrawModes.triangleStrip:\r\n          this.drawMode = this.gl.TRIANGLE_STRIP;\r\n          break;\r\n      case DrawModes.triangleFan:\r\n          this.drawMode = this.gl.TRIANGLE_FAN;\r\n          break;\r\n      }\r\n\r\n      return this;\r\n  }\r\n\r\n  size() {\r\n      // Is this ok? All attributes should have the same length ...\r\n      if (Object.keys(this.attributes).length > 0) {\r\n          return this.attributes[Object.keys(this.attributes)[0]].size;\r\n      }\r\n\r\n      return 0;\r\n  }\r\n\r\n  draw(renderer) {\r\n      if (!this.isVisible) return;\r\n\r\n      for (let prop in this.attributes)\r\n          if (this.attributes[prop].stale) this.attributes[prop].update(this.gl);\r\n\r\n      this.shader.use();\r\n\r\n      // Update the modelView and projection matrices\r\n      if (renderer.camera.isProjectionMatrixStale) {\r\n          this.shader.uniforms.projectionMatrix.setValue(renderer.camera.getProjectionMatrix());\r\n      }\r\n\r\n      if (renderer.camera.isViewMatrixStale) {\r\n          let modelViewMatrix = Matrix4f.multiply(renderer.camera.viewMatrix, this.modelMatrix);\r\n          this.shader.uniforms.modelViewMatrix.setValue(modelViewMatrix.entries);\r\n      }\r\n\r\n      this.shader.updateUniforms();\r\n\r\n      // How exactly does the binding work??\r\n      // What will happen if I want to draw a second geometry?\r\n      for (let prop in this.attributes) {\r\n          this.attributes[prop].bind(this.gl);\r\n      }\r\n\r\n      this.gl.drawArrays(this.drawMode, 0, this.size());\r\n  }\r\n}\r\n\r\nmodule.exports = Geometry","//@ts-check\r\n\r\n\r\n/** \r\n * A class representing the molecular graph. \r\n * \r\n * @property {Array[]} distanceMatrix The distance matrix of this graph.\r\n */\r\nclass Graph {\r\n  /**\r\n   * The constructor of the class Graph.\r\n   * \r\n   * @param {Array[]} adjacencyMatrix The weighted adjacency matrix of a graph.\r\n   */\r\n  constructor(adjacencyMatrix) {\r\n    this.adjacencyMatrix = adjacencyMatrix;\r\n\r\n    // Replace zeros with infinity\r\n    for (var i = 0; i < this.adjacencyMatrix.length; i++) {\r\n      for (var j = 0; j < this.adjacencyMatrix.length; j++) {\r\n        if (this.adjacencyMatrix[i][j] === 0) {\r\n          this.adjacencyMatrix[i][j] = Infinity;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.distanceMatrix = this.getDistanceMatrix();\r\n    this.diameter = this.getDiameter();\r\n  }\r\n\r\n  /**\r\n   * Returns the unweighted adjacency matrix of this graph.\r\n   * \r\n   * @returns {Array} The unweighted adjacency matrix of this graph.\r\n   */\r\n  getUnweightedAdjacencyMatrix() {\r\n    let length = this.adjacencyMatrix.length;\r\n    let unweightedAdjacencyMatrix = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      unweightedAdjacencyMatrix[i] = new Uint8Array(length);\r\n\r\n      for (var j = 0; j < length; j++) {\r\n        unweightedAdjacencyMatrix[i][j] = this.adjacencyMatrix[i][j] > 0 ? 1 : 0;\r\n      }\r\n    }\r\n\r\n    return unweightedAdjacencyMatrix;\r\n  }\r\n\r\n  /**\r\n   * Returns an edge list of this graph.\r\n   * \r\n   * @returns {Array} An array of edges in the form of [vertexId, vertexId, edgeWeight].\r\n   */\r\n  getEdgeList() {\r\n    let length = this.adjacencyMatrix.length;\r\n    let edgeList = Array();\r\n\r\n    for (var i = 0; i < length - 1; i++) {\r\n      for (var j = i; j < length; j++) {\r\n        if (this.adjacencyMatrix[i][j] !== Infinity) {\r\n          edgeList.push([i, j, this.adjacencyMatrix[i][j]]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return edgeList;\r\n  }\r\n\r\n  /**\r\n   * \r\n   */\r\n  forceLayout(radius = 1000, iterations = 1000, q = 1.5, k = 0.01, ke = 1000.0, zoom = 1.0) {\r\n    let matDist = this.distanceMatrix.slice();\r\n    let length = matDist.length;\r\n    let nNeighbours = new Int16Array(length);\r\n\r\n    // Get the number of neighbours\r\n    for (var i = 0; i < length; i++) {\r\n      nNeighbours[i] = this.adjacencyMatrix[i].reduce((acc, val) => (val !== Infinity) ? ++acc : acc, 0);\r\n    }\r\n\r\n    // Square distances\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        matDist[i][j] = Math.pow(matDist[i][j], q);\r\n      }\r\n    }\r\n\r\n    // Normalize distance matrix\r\n    let max = 0.0;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        if (matDist[i][j] > max) {\r\n          max = matDist[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        // Added math pow to decrease influence of long distances\r\n        matDist[i][j] = matDist[i][j] / max;\r\n      }\r\n    }\r\n\r\n    // Forces\r\n    let fx = new Float32Array(length);\r\n    let fy = new Float32Array(length);\r\n\r\n    // Positions\r\n    let px = new Float32Array(length);\r\n    let py = new Float32Array(length);\r\n\r\n    // Initialize positions to random values\r\n    for (var i = 0; i < length; i++) {\r\n      px[i] = Math.random() * radius;\r\n      py[i] = Math.random() * radius;\r\n    }\r\n\r\n    for (var n = 0; n < iterations; n++) {\r\n      // Spring forces\r\n      for (var i = 0; i < length - 1; i++) {\r\n        for (var j = i + 1; j < length; j++) {\r\n          if (matDist[i][j] === Infinity) {\r\n            continue;\r\n          }\r\n\r\n          let dx = px[i] - px[j];\r\n          let dy = py[i] - py[j];\r\n\r\n          let d = Math.sqrt(Math.pow(dx, 2.0) + Math.pow(dy, 2.0));\r\n\r\n          if (d === 0) {\r\n            d = 0.01;\r\n          }\r\n\r\n          // Normalize dx and dy to d\r\n          dx /= d;\r\n          dy /= d;\r\n\r\n          // Hooke's law, F=kX, is the force between x and y\r\n          let f = k * (matDist[i][j] * radius - d);\r\n\r\n          if (this.adjacencyMatrix[i][j] !== Infinity) {\r\n             f *= length;\r\n          }\r\n\r\n          fx[i] += f * dx;\r\n          fy[i] += f * dy;\r\n\r\n          fx[j] += -f * dx;\r\n          fy[j] += -f * dy;\r\n        }\r\n      }\r\n\r\n      // Repulsive forces between vertices\r\n      for (var i = 0; i < length - 1; i++) {\r\n        for (var j = i; j < length; j++) {\r\n          for (var j = i; j < length; j++) {\r\n            if (this.adjacencyMatrix[i][j] !== Infinity) {\r\n              continue;\r\n            }\r\n            \r\n            let dx = px[i] - px[j];\r\n            let dy = py[i] - py[j];\r\n\r\n            let dSquared = Math.pow(dx, 2.0) + Math.pow(dy, 2.0);\r\n            let d = Math.sqrt(dSquared);\r\n\r\n            if (d === 0) {\r\n              d = 0.01;\r\n            }\r\n\r\n            if (dSquared === 0) {\r\n              dSquared = 0.05;\r\n            }\r\n\r\n            // Normalize dx and dy to d\r\n            dx /= d;\r\n            dy /= d;\r\n\r\n            // Coulomb's law, F = k_e * q1 * q2 / r^2, is the force between x and y\r\n            let f = ke / dSquared;\r\n\r\n            fx[i] += f * dx;\r\n            fy[i] += f * dy;\r\n\r\n            fx[j] += -f * dx;\r\n            fy[j] += -f * dy;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Move the vertices\r\n      for (var i = 0; i < length; i++) {\r\n        \r\n\r\n        // fx[i] = Math.min(Math.max(-1, fx[i]), 1);\r\n        // fy[i] = Math.min(Math.max(-1, fy[i]), 1);\r\n\r\n        fx[i] = Math.sign(fx[i]) * Math.sqrt(Math.abs(fx[i]));\r\n        fy[i] = Math.sign(fy[i]) * Math.sqrt(Math.abs(fy[i]));\r\n\r\n        px[i] += fx[i];\r\n        py[i] += fy[i];\r\n      }\r\n\r\n      // Reset force and position deltas\r\n      for (var i = 0; i < length; i++) {\r\n        fx[i] = 0.0;\r\n        fy[i] = 0.0;\r\n      }\r\n    }\r\n\r\n    // Move the graph to the center\r\n    let avgX = 0.0;\r\n    let avgY = 0.0;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      // Zoom\r\n      px[i] *= zoom;\r\n      py[i] *= zoom;\r\n\r\n      avgX += px[i];\r\n      avgY += py[i];  \r\n    }\r\n\r\n    avgX /= length;\r\n    avgY /= length;\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      px[i] = px[i] - (avgX - radius / 2.0);\r\n      py[i] = py[i] - (avgY - radius / 2.0);\r\n    }\r\n\r\n    let positions = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      positions[i] = [px[i], py[i]];\r\n    }\r\n\r\n    return [positions, this.getEdgeList()];\r\n  }\r\n\r\n  /**\r\n   * Positiones the (sub)graph using Kamada and Kawais algorithm for drawing general undirected graphs. https://pdfs.semanticscholar.org/b8d3/bca50ccc573c5cb99f7d201e8acce6618f04.pdf\r\n   * \r\n   * @param {Number} radius The radius within which to initialize the vertices.\r\n   * @param {Boolean} logWeights Apply log() to the weights before layouting.\r\n   * @param {Boolean} squareWeights Apply pow(x,2) to the weights before layouting.\r\n   * @param {Boolean} normalizeWeights Normalize the edge weights before layouting and after log() or exp().\r\n   * @return {Array} An array of vertex positions of the form [ x, y ].\r\n   */\r\n  kkLayout(radius = 500, logWeights = false, squareWeights = false, normalizeWeights = false) {\r\n    let edgeStrength = 50.0;\r\n\r\n    let matDist = this.distanceMatrix;\r\n    let length = this.distanceMatrix.length;\r\n\r\n    // Transform data\r\n    if (logWeights) {\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] !== Infinity) {\r\n            matDist[i][j] = Math.log(matDist[i][j]);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (normalizeWeights) {\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] !== Infinity && matDist[i][j] !== 0) {\r\n            matDist[i][j] = Math.pow(matDist[i][j], 2.0);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Normalize the edge weights\r\n    if (normalizeWeights) {\r\n      let maxWeight = 0;\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] > maxWeight && matDist[i][j] !== Infinity) {\r\n            maxWeight = matDist[i][j];\r\n          }\r\n        }\r\n      }\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (matDist[i][j] !== Infinity) {\r\n            matDist[i][j] = matDist[i][j] / maxWeight;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Initialize the positions. Place all vertices on a ring around the center\r\n    let halfR\r\n    let angle = 2 * Math.PI / length;\r\n    let a = 0.0;\r\n    let arrPositionX = new Float32Array(length);\r\n    let arrPositionY = new Float32Array(length);\r\n    let arrPositioned = Array(length);\r\n    let l = radius / (2 * this.diameter);\r\n    console.log('l: ' + l);\r\n    console.log('diameter: ' + this.diameter);\r\n\r\n    radius /= 2.0;\r\n\r\n    var i = length;\r\n    while (i--) {\r\n      arrPositionX[i] = radius + Math.cos(a) * radius;\r\n      arrPositionY[i] = radius + Math.sin(a) * radius;\r\n\r\n      arrPositioned[i] = false;\r\n      a += angle;\r\n    }\r\n\r\n    // Create the matrix containing the lengths\r\n    let matLength = Array(length);\r\n    i = length;\r\n    while (i--) {\r\n      matLength[i] = new Array(length);\r\n      var j = length;\r\n      while (j--) {\r\n        matLength[i][j] = l * matDist[i][j];\r\n      }\r\n    }\r\n\r\n    // Create the matrix containing the spring strenghts\r\n    let matStrength = Array(length);\r\n    i = length;\r\n    while (i--) {\r\n      matStrength[i] = Array(length);\r\n      var j = length;\r\n      while (j--) {\r\n        matStrength[i][j] = edgeStrength * Math.pow(matDist[i][j], -2.0);\r\n      }\r\n    }\r\n\r\n    // Create the matrix containing the energies\r\n    let matEnergy = Array(length);\r\n    let arrEnergySumX = new Float32Array(length);\r\n    let arrEnergySumY = new Float32Array(length);\r\n    i = length;\r\n    while (i--) {\r\n      matEnergy[i] = Array(length);\r\n    }\r\n\r\n    i = length;\r\n    let ux, uy, dEx, dEy, vx, vy, denom;\r\n\r\n    while (i--) {\r\n      ux = arrPositionX[i];\r\n      uy = arrPositionY[i];\r\n      dEx = 0.0;\r\n      dEy = 0.0;\r\n      let j = length;\r\n      while (j--) {\r\n        if (i === j) {\r\n          continue;\r\n        }\r\n        vx = arrPositionX[j];\r\n        vy = arrPositionY[j];\r\n        denom = 1.0 / Math.sqrt((ux - vx) * (ux - vx) + (uy - vy) * (uy - vy));\r\n        matEnergy[i][j] = [\r\n          matStrength[i][j] * ((ux - vx) - matLength[i][j] * (ux - vx) * denom) || 0.0,\r\n          matStrength[i][j] * ((uy - vy) - matLength[i][j] * (uy - vy) * denom) || 0.0\r\n        ]\r\n        matEnergy[j][i] = matEnergy[i][j];\r\n        dEx += matEnergy[i][j][0];\r\n        dEy += matEnergy[i][j][1];\r\n      }\r\n      arrEnergySumX[i] = dEx;\r\n      arrEnergySumY[i] = dEy;\r\n    }\r\n\r\n    // Utility functions, maybe inline them later\r\n    let energy = function (index) {\r\n      return [arrEnergySumX[index] * arrEnergySumX[index] + arrEnergySumY[index] * arrEnergySumY[index], arrEnergySumX[index], arrEnergySumY[index]];\r\n    }\r\n\r\n    let highestEnergy = function () {\r\n      let maxEnergy = 0.0;\r\n      let maxEnergyId = 0;\r\n      let maxDEX = 0.0;\r\n      let maxDEY = 0.0\r\n\r\n      i = length;\r\n      while (i--) {\r\n        let [delta, dEX, dEY] = energy(i);\r\n\r\n        if (delta > maxEnergy) {\r\n          maxEnergy = delta;\r\n          maxEnergyId = i;\r\n          maxDEX = dEX;\r\n          maxDEY = dEY;\r\n        }\r\n      }\r\n\r\n      return [maxEnergyId, maxEnergy, maxDEX, maxDEY];\r\n    }\r\n\r\n    let update = function (index, dEX, dEY) {\r\n      let dxx = 0.0;\r\n      let dyy = 0.0;\r\n      let dxy = 0.0;\r\n      let ux = arrPositionX[index];\r\n      let uy = arrPositionY[index];\r\n      let arrL = matLength[index];\r\n      let arrK = matStrength[index];\r\n\r\n      i = length;\r\n      while (i--) {\r\n        if (i === index) {\r\n          continue;\r\n        }\r\n\r\n        let vx = arrPositionX[i];\r\n        let vy = arrPositionY[i];\r\n        let l = arrL[i];\r\n        let k = arrK[i];\r\n        let m = (ux - vx) * (ux - vx);\r\n        let denom = 1.0 / Math.pow(m + (uy - vy) * (uy - vy), 1.5);\r\n\r\n        dxx += k * (1 - l * (uy - vy) * (uy - vy) * denom) || 0.0;\r\n        dyy += k * (1 - l * m * denom) || 0.0;\r\n        dxy += k * (l * (ux - vx) * (uy - vy) * denom) || 0.0;\r\n      }\r\n\r\n      // Prevent division by zero\r\n      if (dxx === 0) {\r\n        dxx = 0.1;\r\n      }\r\n\r\n      if (dyy === 0) {\r\n        dyy = 0.1;\r\n      }\r\n\r\n      if (dxy === 0) {\r\n        dxy = 0.1;\r\n      }\r\n\r\n      let dy = (dEX / dxx + dEY / dxy);\r\n      dy /= (dxy / dxx - dyy / dxy); // had to split this onto two lines because the syntax highlighter went crazy.\r\n      let dx = -(dxy * dy + dEX) / dxx;\r\n\r\n      arrPositionX[index] += dx;\r\n      arrPositionY[index] += dy;\r\n\r\n      // Update the energies\r\n      let arrE = matEnergy[index];\r\n      dEX = 0.0;\r\n      dEY = 0.0;\r\n\r\n      ux = arrPositionX[index];\r\n      uy = arrPositionY[index];\r\n\r\n      let vx, vy, prevEx, prevEy, denom;\r\n\r\n      i = length;\r\n      while (i--) {\r\n        if (index === i) {\r\n          continue;\r\n        }\r\n        vx = arrPositionX[i];\r\n        vy = arrPositionY[i];\r\n        // Store old energies\r\n        prevEx = arrE[i][0];\r\n        prevEy = arrE[i][1];\r\n        denom = 1.0 / Math.sqrt((ux - vx) * (ux - vx) + (uy - vy) * (uy - vy));\r\n        dx = arrK[i] * ((ux - vx) - arrL[i] * (ux - vx) * denom) || 0.0;\r\n        dy = arrK[i] * ((uy - vy) - arrL[i] * (uy - vy) * denom) || 0.0;\r\n\r\n        arrE[i] = [dx, dy];\r\n        dEX += dx;\r\n        dEY += dy;\r\n        arrEnergySumX[i] += dx - prevEx;\r\n        arrEnergySumY[i] += dy - prevEy;\r\n      }\r\n      arrEnergySumX[index] = dEX;\r\n      arrEnergySumY[index] = dEY;\r\n    }\r\n\r\n    // Setting parameters\r\n    let threshold = 0.1;\r\n    let innerThreshold = 0.1;\r\n    let maxIteration = 6000;\r\n    let maxInnerIteration = 10;\r\n    let maxEnergy = 1e9;\r\n\r\n    // Setting up variables for the while loops\r\n    let maxEnergyId = 0;\r\n    let dEX = 0.0;\r\n    let dEY = 0.0;\r\n    let delta = 0.0;\r\n    let iteration = 0;\r\n    let innerIteration = 0;\r\n\r\n    while (maxEnergy > threshold && maxIteration > iteration) {\r\n      iteration++;\r\n      [maxEnergyId, maxEnergy, dEX, dEY] = highestEnergy();\r\n\r\n      delta = maxEnergy;\r\n      innerIteration = 0;\r\n      while (delta > innerThreshold && maxInnerIteration > innerIteration) {\r\n        innerIteration++;\r\n        update(maxEnergyId, dEX, dEY);\r\n        [delta, dEX, dEY] = energy(maxEnergyId);\r\n      }\r\n    }\r\n\r\n    let positions = Array(length);\r\n\r\n    i = length;\r\n    while (i--) {\r\n      positions[i] = [arrPositionX[i], arrPositionY[i]];\r\n    }\r\n\r\n    return [positions, this.getEdgeList()];\r\n  }\r\n\r\n  getDiameter() {\r\n    let diameter = 0;\r\n\r\n    for (var i = 0; i < this.distanceMatrix.length - 1; i++) {\r\n      for (var j = i; j < this.distanceMatrix.length; j++) {\r\n        if (this.distanceMatrix[i][j] > diameter && this.distanceMatrix[i][j] < Infinity) {\r\n          diameter = this.distanceMatrix[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    return diameter;\r\n  }\r\n\r\n  /**\r\n   * Get the distance matrix of the graph.\r\n   * \r\n   * @returns {Array[]} The distance matrix of the graph.\r\n   */\r\n  getDistanceMatrix() {\r\n    let length = this.adjacencyMatrix.length;\r\n    let dist = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      dist[i] = new Float32Array(length);\r\n      dist[i].fill(Infinity);\r\n    }\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      for (var j = 0; j < length; j++) {\r\n        if (this.adjacencyMatrix[i][j] < Infinity) {\r\n          dist[i][j] = this.adjacencyMatrix[i][j];\r\n        }\r\n      }\r\n    }\r\n\r\n    for (var k = 0; k < length; k++) {\r\n      for (var i = 0; i < length; i++) {\r\n        for (var j = 0; j < length; j++) {\r\n          if (dist[i][j] > dist[i][k] + dist[k][j]) {\r\n            dist[i][j] = dist[i][k] + dist[k][j]\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return dist;\r\n  }\r\n\r\n  /**\r\n   * Returns a new graph object. Vertex ids have to be 0 to n.\r\n   * \r\n   * @param {Array[]} edgeList An edge list in the form [ [ vertexId, vertexId, weight ], ... ].\r\n   * @param {Boolean} invertWeights Whether or not to invert the weights.\r\n   * @returns {Graph} A graph object.\r\n   */\r\n  static fromEdgeList(edgeList, invertWeights = false) {\r\n    // Get the max vertex id.\r\n    let max = 0;\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      if (edgeList[i][0] > max) {\r\n        max = edgeList[i][0];\r\n      }\r\n\r\n      if (edgeList[i][1] > max) {\r\n        max = edgeList[i][1];\r\n      }\r\n    }\r\n\r\n    max++;\r\n\r\n    if (invertWeights) {\r\n      let maxWeight = 0;\r\n\r\n      for (var i = 0; i < edgeList.length; i++) {\r\n        if (edgeList[i][2] > maxWeight) {\r\n          maxWeight = edgeList[i][2];\r\n        }\r\n      }\r\n\r\n      maxWeight++;\r\n\r\n      for (var i = 0; i < edgeList.length; i++) {\r\n        edgeList[i][2] = maxWeight - edgeList[i][2];\r\n      }\r\n    }\r\n\r\n    let adjacencyMatrix = Array(max);\r\n\r\n    for (var i = 0; i < max; i++) {\r\n      adjacencyMatrix[i] = new Float32Array(max);\r\n      adjacencyMatrix[i].fill(0);\r\n    }\r\n\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      let edge = edgeList[i];\r\n      adjacencyMatrix[edge[0]][edge[1]] = edge[2];\r\n      adjacencyMatrix[edge[1]][edge[0]] = edge[2];\r\n    }\r\n\r\n    return new Graph(adjacencyMatrix);\r\n  }\r\n}\r\n\r\nmodule.exports = Graph","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Quaternion = require('../Math/Quaternion');\r\nconst Matrix3f = require('../Math/Matrix3f');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\n\r\n/**\r\n * A class representing a node. A node is the base-class for all 3D objects.\r\n * \r\n * @property {String} type The type name of this object (Node).\r\n * @property {String} id A GUID uniquely identifying the node.\r\n * @property {Boolean} isVisible A boolean indicating whether or not the node is visible (rendered).\r\n * @property {Vector3f} position The position of this node.\r\n * @property {Quaternion} rotation The rotation of this node.\r\n * @property {Vector3f} scale The scale of this node.\r\n * @property {Vector3f} up The up vector associated with this node.\r\n * @property {Matrix3f} normalMatrix The normal matrix of this node.\r\n * @property {Matrix4f} modelMatrix The model matrix associated with this node.\r\n * @property {Boolean} isStale A boolean indicating whether or not the modelMatrix of this node is stale.\r\n * @property {Node[]} children An array containing child-nodes.\r\n * @property {Node} parent The parent node.\r\n */\r\nclass Node {\r\n    /**\r\n     * Creates an instance of Node.\r\n     */\r\n    constructor() {\r\n        this.type = 'Node';\r\n        this.id = Node.createGUID();\r\n        this.isVisible = true;\r\n        this.position = new Vector3f(0.0, 0.0, 0.0);\r\n        this.rotation = new Quaternion(0.0, 0.0, 0.0, 0.0);\r\n        this.scale = new Vector3f(1.0, 1.0, 1.0);\r\n        this.up = new Vector3f(0.0, 1.0, 0.0);\r\n        this.normalMatrix = new Matrix3f();\r\n        this.modelMatrix = new Matrix4f();\r\n        this.isStale = false;\r\n\r\n        this.children = new Array();\r\n        this.parent = null;\r\n    }\r\n\r\n    /**\r\n     * Apply a matrix to the model matrix of this node.\r\n     * \r\n     * @param {Matrix4f} matrix A matrix.\r\n     * @returns {Node} Itself.\r\n     */\r\n    applyMatrix(matrix) {\r\n        this.modelMatrix.multiplyB(matrix);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the up vector for this node.\r\n     * \r\n     * @returns {Vector3f} The up vector for this node.\r\n     */\r\n    getUpVector() {\r\n        let v = new Vector3f(0, 1, 0);\r\n\r\n        return v.applyQuaternion(this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Returns the forward vector for this node.\r\n     * \r\n     * @returns {Vector3f} The forward vector for this node.\r\n     */\r\n    getForwardVector() {\r\n        let v = new Vector3f(0, 0, 1);\r\n\r\n        return v.applyQuaternion(this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Returns the right vector for this node.\r\n     * \r\n     * @returns {Vector3f} The right vector for this node.\r\n     */\r\n    getRightVector() {\r\n        let v = new Vector3f(1, 0, 0);\r\n\r\n        return v.applyQuaternion(this.rotation);\r\n    }\r\n\r\n    /**\r\n     * Translates this node on an axis.\r\n     * \r\n     * @param {Vector3f} axis A vector representing an axis.\r\n     * @param {Number} distance The distance for which to move the node along the axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateOnAxis(axis, distance) {\r\n        // Axis should be normalized, following THREE.js\r\n        let v = new Vector3f(axis.components[0], axis.components[1],\r\n            axis.components[2]);\r\n        v.applyQuaternion(this.rotation);\r\n        v.multiplyScalar(distance);\r\n        this.position.add(v);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the node along the x-axis.\r\n     * \r\n     * @param {Number} distance The distance for which to move the node along the x-axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateX(distance) {\r\n        this.position.components[0] = this.position.components[0] + distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the node along the y-axis.\r\n     * \r\n     * @param {Number} distance The distance for which to move the node along the y-axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateY(distance) {\r\n        this.position.components[1] = this.position.components[1] + distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Translates the node along the z-axis.\r\n     * \r\n     * @param {Number} distance The distance for which to move the node along the z-axis.\r\n     * @returns {Node} Itself.\r\n     */\r\n    translateZ(distance) {\r\n        this.position.components[2] = this.position.components[2] + distance;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the translation (position) of this node.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Node} Itself.\r\n     */\r\n    setTranslation(v) {\r\n        this.position = v;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the rotation from an axis and an angle.\r\n     * \r\n     * @param {Vector3f} axis A vector representing an angle\r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    setRotation(axis, angle) {\r\n        this.rotation.setFromAxisAngle(axis, angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate this node by an angle on an axis.\r\n     * \r\n     * @param {Vector3f} axis A vector representing an angle\r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotate(axis, angle) {\r\n        let q = new Quaternion(axis, angle);\r\n\r\n        this.rotation.multiplyA(q);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate around the x-axis.\r\n     * \r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotateX(angle) {\r\n        this.rotation.rotateX(angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate around the y-axis.\r\n     * \r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotateY(angle) {\r\n        this.rotation.rotateY(angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotate around the z-axis.\r\n     * \r\n     * @param {Number} angle An angle.\r\n     * @returns {Node} Itself.\r\n     */\r\n    rotateZ(angle) {\r\n        this.rotation.rotateZ(angle);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Get the rotation matrix for this node.\r\n     * \r\n     * @returns {Matrix4f} This nodes rotation matrix.\r\n     */\r\n    getRotationMatrix() {\r\n        return this.rotation.toRotationMatrix();\r\n    }\r\n\r\n    /**\r\n     * Update the model matrix of this node. Has to be called in order to apply scaling, rotations or translations.\r\n     * \r\n     * @returns {Node} Itself.\r\n     */\r\n    update() {\r\n        this.modelMatrix.compose(this.position, this.rotation, this.scale);\r\n        // if parent... this.modelMatrix = Matrix4f.multiply(this.parent.modelMatrix, this.modelMatrix);\r\n        this.isStale = true;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Returns the model matrix as an array. \r\n     * \r\n     * @returns {Float32Array} The model matrix.\r\n     */\r\n    getModelMatrix() {\r\n        return this.modelMatrix.entries;\r\n    }\r\n\r\n    /**\r\n     * Creates a GUID.\r\n     * \r\n     * @returns {String} A GUID.\r\n     */\r\n    static createGUID() {\r\n        // See:\r\n        // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\r\n\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            let r = Math.random() * 16 | 0,\r\n                v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n                \r\n            return v.toString(16);\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = Node;","//@ts-check\r\n// const Lore = require('../Lore');\r\nconst Shaders = require('../Shaders')\r\nconst Effect = require('./Effect')\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Color = require('./Color');\r\nconst Utils = require('../Utils/Utils');\r\nconst Geometry = require('./Geometry');\r\nconst ControlsBase = require('../Controls/ControlsBase');\r\nconst OrbitalControls = require('../Controls/OrbitalControls');\r\nconst CameraBase = require('../Cameras/CameraBase');\r\nconst OrthographicCamera = require('../Cameras/OrthographicCamera');\r\n\r\n/** \r\n * A class representing the WebGL renderer. \r\n * \r\n * @property {Object} opts An object containing options.\r\n * @property {Any} camera The camera associated with this renderer.\r\n * @property {ControlsBase} controls The controls associated with this renderer.\r\n */\r\nclass Renderer {\r\n  \r\n    /**\r\n     * Creates an instance of Renderer.\r\n     * @param {String} targetId The id of a canvas element.\r\n     * @param {any} options The options.\r\n     */\r\n    constructor(targetId, options) {\r\n        this.defaults = {\r\n            antialiasing: true,\r\n            verbose: false,\r\n            fpsElement: document.getElementById('fps'),\r\n            clearColor: Color.fromHex('#000000'),\r\n            clearDepth: 1.0,\r\n            radius: 500,\r\n            center: new Vector3f(0.0, 0.0, 0.0),\r\n            enableDepthTest: true,\r\n            enableTransparency: false\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n        \r\n        this.canvas = document.getElementById(targetId);\r\n        this.webgl2 = true;\r\n        this.parent = this.canvas.parentElement;\r\n        this.fps = 0;\r\n        this.fpsCount = 0;\r\n        this.maxFps = 1000 / 30;\r\n        this.devicePixelRatio = this.getDevicePixelRatio();\r\n        this.camera = new OrthographicCamera(this.getWidth() / -2, this.getWidth() / 2, this.getHeight() / 2, this.getHeight() / -2);\r\n        // this.camera = new PerspectiveCamera(25.0, this.getWidth() / this.getHeight());\r\n\r\n        this.geometries = {};\r\n        this.ready = false;\r\n        this.gl = null;\r\n        this.render = function (camera, geometries) {};\r\n        this.effect = null;\r\n        this.lastTiming = performance.now();\r\n\r\n        this.disableContextMenu();\r\n\r\n        let that = this;\r\n        that.init();\r\n\r\n        // Attach the controls last\r\n        let center = options.center ? options.center : new Vector3f(0.0, 0.0, 0.0);\r\n\r\n        this.controls = new OrbitalControls(that, this.opts.radius || 500, center);\r\n    }\r\n\r\n    /**\r\n     * Initialize and start the renderer.\r\n     */\r\n    init() {\r\n        let _this = this;\r\n\r\n        let settings = {\r\n            antialias: this.opts.antialiasing\r\n        };\r\n\r\n        this.gl = this.canvas.getContext('webgl2', settings) || this.canvas.getContext('experimental-webgl2');\r\n\r\n        if (!this.gl) {\r\n          this.webgl2 = false;\r\n          this.gl = this.canvas.getContext('webgl', settings) ||\r\n              this.canvas.getContext('experimental-webgl', settings);\r\n        }\r\n\r\n        if (!this.gl) {\r\n            console.error('Could not initialize the WebGL context.');\r\n            return;\r\n        }\r\n\r\n        let g = this.gl;\r\n\r\n        if (this.opts.verbose) {\r\n            let hasAA = g.getContextAttributes().antialias;\r\n            let size = g.getParameter(g.SAMPLES);\r\n            console.info('Antialiasing: ' + hasAA + ' (' + size + 'x)');\r\n\r\n            let highp = g.getShaderPrecisionFormat(g.FRAGMENT_SHADER, g.HIGH_FLOAT);\r\n            let hasHighp = highp.precision != 0;\r\n            console.info('High precision support: ' + hasHighp);\r\n\r\n            console.info('WebGL2 supported: ' + this.webgl2);\r\n        }\r\n\r\n        // Extensions\r\n        let oes = 'OES_standard_derivatives';\r\n        let extOes = g.getExtension(oes);\r\n        \r\n        if (extOes === null) {\r\n            console.warn('Could not load extension: ' + oes + '.');\r\n        }\r\n\r\n        let wdb = 'WEBGL_draw_buffers';\r\n        let extWdb = g.getExtension(wdb);\r\n        \r\n        if (extWdb === null) {\r\n            console.warn('Could not load extension: ' + wdb + '.');\r\n        }\r\n\r\n        let wdt = 'WEBGL_depth_texture';\r\n        let extWdt = g.getExtension(wdt);\r\n        \r\n        if (extWdt === null) {\r\n            console.warn('Could not load extension: ' + wdt + '.');\r\n        }\r\n\r\n        let fgd = 'EXT_frag_depth';\r\n        let extFgd = g.getExtension(fgd);\r\n        \r\n        if (extFgd === null) {\r\n            console.warn('Could not load extension: ' + fgd + '.');\r\n        }\r\n\r\n        this.setClearColor(this.opts.clearColor);\r\n\r\n        // Blending\r\n        // if (!this.webgl2) {\r\n        if (true) {\r\n          g.clearDepth(this.opts.clearDepth);\r\n\r\n          if (this.opts.enableTransparency) {\r\n            g.blendFunc(g.SRC_ALPHA, g.ONE_MINUS_SRC_ALPHA);\r\n            g.enable(g.BLEND);\r\n            g.disable(g.DEPTH_TEST);\r\n          }\r\n          else if (this.opts.enableDepthTest) {\r\n              g.enable(g.DEPTH_TEST);\r\n              g.depthFunc(g.LEQUAL);\r\n              \r\n              if (this.opts.verbose) {\r\n                  console.log('enable depth test');\r\n              }\r\n          }\r\n        } else {\r\n            // Idea, write to fragdepth\r\n            // https://www.reddit.com/r/opengl/comments/1fthbc/is_gl_fragdepth_ignored_when_depth_writes_are_off/\r\n            g.disable(g.DEPTH_TEST);\r\n            g.enable(g.BLEND);\r\n            g.blendFuncSeparate(g.SRC_ALPHA, g.ONE_MINUS_SRC_ALPHA, g.ONE, g.ONE_MINUS_SRC_ALPHA);\r\n          }\r\n\r\n        setTimeout(function () {\r\n            _this.updateViewport(0, 0, _this.getWidth(), _this.getHeight());\r\n        }, 1000);\r\n\r\n        // Also do it immediately, in case the timeout is not needed\r\n        this.updateViewport(0, 0, _this.getWidth(), _this.getHeight());\r\n\r\n\r\n        window.addEventListener('resize', function (event) {\r\n            let width = _this.getWidth();\r\n            let height = _this.getHeight();\r\n            _this.updateViewport(0, 0, width, height);\r\n        });\r\n\r\n        // Init effect(s)\r\n        this.effect = new Effect(this, 'fxaaEffect');\r\n        this.ready = true;\r\n        this.animate();\r\n    }\r\n\r\n    /**\r\n     * Disables the context menu on the canvas element. \r\n     */\r\n    disableContextMenu() {\r\n        // Disable context menu on right click\r\n        this.canvas.addEventListener('contextmenu', function (e) {\r\n            if (e.button === 2) {\r\n                e.preventDefault();\r\n                return false;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets the clear color of this renderer.\r\n     * \r\n     * @param {Color} color The clear color.\r\n     */\r\n    setClearColor(color) {\r\n        this.opts.clearColor = color;\r\n        \r\n        let cc = this.opts.clearColor.components;\r\n        \r\n        this.gl.clearColor(cc[0], cc[1], cc[2], cc[3]);\r\n    }\r\n\r\n    /**\r\n     * Get the actual width of the canvas.\r\n     * \r\n     * @returns {Number} The width of the canvas.\r\n     */\r\n    getWidth() {\r\n        return this.canvas.offsetWidth;\r\n    }\r\n    \r\n    /**\r\n     * Get the actual height of the canvas.\r\n     * \r\n     * @returns {Number} The height of the canvas.\r\n     */\r\n    getHeight() {\r\n        return this.canvas.offsetHeight;\r\n    }\r\n\r\n    /**\r\n     * Update the viewport. Should be called when the canvas is resized.\r\n     * \r\n     * @param {Number} x The horizontal offset of the viewport.\r\n     * @param {Number} y The vertical offset of the viewport.\r\n     * @param {Number} width The width of the viewport.\r\n     * @param {Number} height The height of the viewport.\r\n     */\r\n    updateViewport(x, y, width, height) {\r\n        // width *= this.devicePixelRatio;\r\n        // height *= this.devicePixelRatio;\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.gl.viewport(x, y, width, height);\r\n\r\n        this.camera.updateViewport(width, height);\r\n        this.camera.updateProjectionMatrix();\r\n\r\n        // Also reinit the buffers and textures for the effect(s)\r\n        this.effect = new Effect(this, 'fxaaEffect');\r\n        this.effect.shader.uniforms.resolution.setValue([width, height]);\r\n    }\r\n\r\n    /**\r\n     * The main rendering loop. \r\n     */\r\n    animate() {\r\n        let that = this;\r\n\r\n        setTimeout(function () {\r\n            requestAnimationFrame(function () {\r\n                that.animate();\r\n            });\r\n        }, this.maxFps);\r\n\r\n        if (this.opts.fpsElement) {\r\n            let now = performance.now();\r\n            let delta = now - this.lastTiming;\r\n\r\n            this.lastTiming = now;\r\n            if (this.fpsCount < 10) {\r\n                this.fps += Math.round(1000.0 / delta);\r\n                this.fpsCount++;\r\n            } else {// \r\n                this.opts.fpsElement.innerHTML = Math.round(this.fps / this.fpsCount);\r\n                this.fpsCount = 0;\r\n                this.fps = 0;\r\n            }\r\n        }\r\n\r\n        // this.effect.bind();\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\r\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT);\r\n        this.render(this.camera, this.geometries);\r\n        // this.effect.unbind();\r\n\r\n        this.camera.isProjectionMatrixStale = false;\r\n        this.camera.isViewMatrixStale = false;\r\n    }\r\n\r\n    /**\r\n     * Creates and adds a geometry to the scene graph.\r\n     * \r\n     * @param {String} name The name of the geometry.\r\n     * @param {String} shaderName The name of the shader used to render the geometry.\r\n     * @returns {Geometry} The created geometry.\r\n     */\r\n    createGeometry(name, shaderName) {\r\n        let shader = Shaders[shaderName].clone();\r\n        shader.init(this.gl, this.webgl2);\r\n        let geometry = new Geometry(name, this.gl, shader);\r\n\r\n        this.geometries[name] = geometry;\r\n\r\n        return geometry;\r\n    }\r\n\r\n    /**\r\n     * Set the maximum frames per second of this renderer.\r\n     * \r\n     * @param {Number} fps Maximum frames per second.\r\n     */\r\n    setMaxFps(fps) {\r\n        this.maxFps = 1000 / fps;\r\n    }\r\n\r\n    /**\r\n     * Get the device pixel ratio.\r\n     * \r\n     * @returns {Number} The device pixel ratio.\r\n     */\r\n    getDevicePixelRatio() {\r\n        return window.devicePixelRatio || 1;\r\n    }\r\n}\r\n\r\nmodule.exports = Renderer","//@ts-check\r\n\r\nconst Uniform = require('./Uniform');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\n\r\n/**\r\n * A class representing a shader.\r\n * \r\n * @property {String} name The name of the shader.\r\n * @property {Object} uniforms A map mapping uniform names to Lore Uniform instances.\r\n * \r\n */\r\nclass Shader {\r\n    constructor(name, glVersion, uniforms, vertexShader, fragmentShader) {\r\n        this.name = name;\r\n        this.uniforms = uniforms || {};\r\n        this.vertexShader = vertexShader || [];\r\n        this.fragmentShader = fragmentShader || [];\r\n        this.glVersion = glVersion;\r\n        this.gl = null;\r\n        this.program = null;\r\n        this.initialized = false;\r\n        this.lastTime = new Date().getTime();\r\n        \r\n        // Add the two default shaders (the same shaders as in getVertexShader)\r\n        this.uniforms['modelViewMatrix'] = new Uniform('modelViewMatrix',\r\n            (new Matrix4f()).entries, 'float_mat4');\r\n\r\n        this.uniforms['projectionMatrix'] = new Uniform('projectionMatrix',\r\n            (new Matrix4f()).entries, 'float_mat4');\r\n    }\r\n    \r\n    clone() {\r\n        return new Shader(this.name, this.glVersion, this.uniforms, this.vertexShader, this.fragmentShader);\r\n    }\r\n\r\n    getVertexShaderCode() {\r\n        return this.vertexShader.join('\\n');\r\n    }\r\n\r\n    getFragmentShaderCode() {\r\n        return this.fragmentShader.join('\\n');\r\n    }\r\n\r\n    getVertexShader(gl, isWebGL2 = false) {\r\n        let shader = gl.createShader(gl.VERTEX_SHADER);\r\n        let vertexShaderCode = '';\r\n\r\n        if (!isWebGL2 && this.glVersion === 2) {\r\n          throw('The shader expects WebGL 2.0');\r\n        } else if (this.glVersion === 2) {\r\n          vertexShaderCode += '#version 300 es\\n';\r\n        }\r\n\r\n        vertexShaderCode += 'uniform mat4 modelViewMatrix;\\n' +\r\n            'uniform mat4 projectionMatrix;\\n\\n' +\r\n            this.getVertexShaderCode();\r\n            \r\n        gl.shaderSource(shader, vertexShaderCode);\r\n        gl.compileShader(shader);\r\n\r\n        Shader.showCompilationInfo(gl, shader, this.name, 'Vertex Shader');\r\n        return shader;\r\n    }\r\n\r\n    getFragmentShader(gl, isWebGL2 = false) {\r\n        let shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n\r\n        let fragmentShaderCode = '';\r\n\r\n        if (!isWebGL2 && this.glVersion === 2) {\r\n          throw('The shader expects WebGL 2.0');\r\n        } else if (this.glVersion === 2) {\r\n          fragmentShaderCode += '#version 300 es\\n';\r\n        }\r\n\r\n        // Adding precision, see:\r\n        // http://stackoverflow.com/questions/27058064/why-do-i-need-to-define-a-precision-value-in-webgl-shaders\r\n        // and:\r\n        // http://stackoverflow.com/questions/13780609/what-does-precision-mediump-float-mean\r\n        fragmentShaderCode += '#ifdef GL_OES_standard_derivatives\\n#extension GL_OES_standard_derivatives : enable\\n#endif\\n\\n' +\r\n            '#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\n' +\r\n            this.getFragmentShaderCode();\r\n\r\n        gl.shaderSource(shader, fragmentShaderCode);\r\n        gl.compileShader(shader);\r\n\r\n        Shader.showCompilationInfo(gl, shader, this.name, 'Fragment Shader');\r\n        return shader;\r\n    }\r\n\r\n    init(gl, isWebGL2 = false) {\r\n        this.gl = gl;\r\n        this.program = this.gl.createProgram();\r\n        let vertexShader = this.getVertexShader(this.gl, isWebGL2);\r\n        let fragmentShader = this.getFragmentShader(this.gl, isWebGL2);\r\n\r\n        if (!vertexShader || !fragmentShader) {\r\n            console.error('Failed to create the fragment or the vertex shader.');\r\n            return null;\r\n        }\r\n\r\n        this.gl.attachShader(this.program, vertexShader);\r\n        this.gl.attachShader(this.program, fragmentShader);\r\n\r\n        this.gl.linkProgram(this.program);\r\n\r\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\r\n            console.error('Could not link program.\\n' +\r\n                'VALIDATE_STATUS: ' + this.gl.getProgramParameter(this.program, this.gl.VALIDATE_STATUS) + '\\n' +\r\n                'ERROR: ' + this.gl.getError());\r\n            return null;\r\n        }\r\n\r\n        this.initialized = true;\r\n    }\r\n\r\n    updateUniforms(renderer) {\r\n        // Always update time uniform if it exists\r\n        if (this.uniforms['time']) {\r\n            let unif = this.uniforms['time'];\r\n            \r\n            let currentTime = new Date().getTime();\r\n            unif.value += currentTime - this.lastTime;\r\n            this.lastTime = currentTime;\r\n\r\n            Uniform.Set(this.gl, this.program, unif);\r\n            \r\n            unif.stale = false;\r\n        }\r\n        for (let uniform in this.uniforms) {\r\n            let unif = this.uniforms[uniform];\r\n            if (unif.stale) {\r\n                Uniform.Set(this.gl, this.program, unif);\r\n            }\r\n        }\r\n    }\r\n\r\n    use() {\r\n      this.gl.useProgram(this.program);\r\n      this.updateUniforms();\r\n    }\r\n\r\n    static showCompilationInfo(gl, shader, name, prefix) {\r\n        prefix = prefix || 'Shader';\r\n        // This was stolen from THREE.js\r\n        // https://github.com/mrdoob/three.js/blob/master/src/renderers/webgl/WebGLShader.js\r\n        if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n            console.error(prefix + ' ' + name + ' did not compile.');\r\n        }\r\n\r\n        if (gl.getShaderInfoLog(shader) !== '') {\r\n            console.warn(prefix + ' ' + name + ' info log: ' + gl.getShaderInfoLog(shader));\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Shader","//@ts-check\r\n\r\n/** \r\n * A class representing a tree. \r\n * \r\n * @property {Array} tree An array of arrays where the index is the node id and the inner arrays contain the neighbours.\r\n */\r\nclass Tree {\r\n  /**\r\n   * The constructor of the class Tree.\r\n   * \r\n   * @param {Array[]} tree An array of arrays where the index is the node id and the inner arrays contain the neighbours.\r\n   * @param {Array[]} weights An array of arrays where the index is the node id and the inner arrays contain the weights in the same order as tree contains neighbours.\r\n   */\r\n  constructor(tree, weights) {\r\n    this.tree = tree;\r\n    this.weights = weights;\r\n  }\r\n\r\n  /**\r\n   * Layout the tree\r\n   */\r\n  layout() {\r\n    let root = 0;\r\n    let visited = new Uint8Array(this.tree.length);\r\n    let pX = new Float32Array(this.tree.length);\r\n    let pY = new Float32Array(this.tree.length);\r\n    let queue = [root];\r\n    visited[root] = 1;\r\n    let current = null;\r\n    \r\n    // Position initial node\r\n    pX[root] = 20.0;\r\n    pY[root] = 10.0;\r\n\r\n    while (queue.length > 0) {\r\n      current = queue.shift();\r\n\r\n      let offset = 0;\r\n      for (var i = 0; i < this.tree[current].length; i++) {\r\n        let child = this.tree[current][i];\r\n\r\n        if (visited[child] === 0) {\r\n          // Do some positioning\r\n\r\n          pX[child] = pX[current] + this.weights[current][i] * 5.0;\r\n          pY[child] = pY[current] + offset++ * 10.0 * this.weights[current][i];\r\n\r\n          let fX = 0.0;\r\n          let fY = 0.0;\r\n\r\n          for (var j = 0; j < length; j++) {\r\n            if (visited[j] === 0) {\r\n              continue;\r\n            }\r\n\r\n            let distSquared = Math.pow(pX[j] - pX[child], 2.0) + Math.pow(pY[j] - pY[child], 2.0);\r\n            let dist = Math.sqrt(distSquared);\r\n            \r\n            let fAttractive = 1000 / distSquared;\r\n          }\r\n\r\n          // Done with positioning\r\n\r\n          visited[child] = 1;\r\n          queue.push(child);\r\n        }\r\n      }\r\n    }\r\n\r\n    let positions = Array(this.tree.length);\r\n\r\n    for (var i = 0; i < this.tree.length; i++) {\r\n      positions[i] = [ pX[i], pY[i] ];\r\n    }\r\n\r\n    return positions;\r\n  }\r\n\r\n  /**\r\n   * Create a tree from an edge list. \r\n   */\r\n  static fromEdgeList(edgeList) {\r\n    let length = 0;\r\n\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      if (edgeList[i][0] > length) {\r\n        length = edgeList[i][0];\r\n      }\r\n\r\n      if (edgeList[i][1] > length) {\r\n        length = edgeList[i][1];\r\n      }\r\n    }\r\n\r\n    length++;\r\n\r\n    let neighbours = Array(length);\r\n    let weights = Array(length);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      neighbours[i] = Array();\r\n      weights[i] = Array();\r\n    }\r\n\r\n    for (var i = 0; i < edgeList.length; i++) {\r\n      neighbours[edgeList[i][0]].push(edgeList[i][1]);\r\n      neighbours[edgeList[i][1]].push(edgeList[i][0]);\r\n\r\n      weights[edgeList[i][0]].push(edgeList[i][2]);\r\n      weights[edgeList[i][1]].push(edgeList[i][2]);\r\n    }\r\n\r\n    return new Tree(neighbours, weights);\r\n  }\r\n}\r\n\r\nmodule.exports = Tree","//@ts-check\r\n\r\n/**\r\n * A class representing a uniform.\r\n * \r\n * @property {String} name The name of this uniform. Also the variable name in the shader.\r\n * @property {Number|number[]|Float32Array} value The value of this uniform.\r\n * @property {String} type The type of this uniform. Available types: int, int_vec2, int_vec3, int_vec4, int_array, float, float_vec2, float_vec3, float_vec4, float_array, float_mat2, float_mat3, float_mat4.\r\n * @property {Boolean} stale A boolean indicating whether or not this uniform is stale and needs to be updated.\r\n */\r\nclass Uniform {\r\n    /**\r\n     * Creates an instance of Uniform.\r\n     * @param {String} name The name of this uniform. Also the variable name in the shader.\r\n     * @param {Number|number[]|Float32Array} value The value of this uniform.\r\n     * @param {String} type The type of this uniform. Available types: int, int_vec2, int_vec3, int_vec4, int_array, float, float_vec2, float_vec3, float_vec4, float_array, float_mat2, float_mat3, float_mat4.\r\n     */\r\n    constructor(name, value, type) {\r\n        this.name = name;\r\n        this.value = value;\r\n        this.type = type;\r\n        this.stale = true;\r\n    }\r\n\r\n    /**\r\n     * Set the value of this uniform.\r\n     * \r\n     * @param {Number} value A number which is valid for the specified type.\r\n     */\r\n    setValue(value) {\r\n        this.value = value;\r\n        this.stale = true;\r\n    }\r\n\r\n    /**\r\n     * Pushes the uniform to the GPU.\r\n     * \r\n     * @param {WebGLRenderingContext} gl A WebGL rendering context.\r\n     * @param {WebGLUniformLocation} program \r\n     * @param {Uniform} uniform \r\n     */\r\n    static Set(gl, program, uniform) {\r\n        let location = gl.getUniformLocation(program, uniform.name);\r\n\r\n        if (uniform.type === 'int') {\r\n            gl.uniform1i(location, uniform.value);\r\n        } else if (uniform.type === 'int_vec2') {\r\n            gl.uniform2iv(location, uniform.value);\r\n        } else if (uniform.type === 'int_vec3') {\r\n            gl.uniform3iv(location, uniform.value);\r\n        } else if (uniform.type === 'int_vec4') {\r\n            gl.uniform4iv(location, uniform.value);\r\n        } else if (uniform.type === 'int_array') {\r\n            gl.uniform1iv(location, uniform.value);\r\n        } else if (uniform.type === 'float') {\r\n            gl.uniform1f(location, uniform.value);\r\n        } else if (uniform.type === 'float_vec2') {\r\n            gl.uniform2fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_vec3') {\r\n            gl.uniform3fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_vec4') {\r\n            gl.uniform4fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_array') {\r\n            gl.uniform1fv(location, uniform.value);\r\n        } else if (uniform.type === 'float_mat2') {\r\n            // false, see https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix\r\n            gl.uniformMatrix2fv(location, false, uniform.value);\r\n        } else if (uniform.type === 'float_mat3') {\r\n            gl.uniformMatrix3fv(location, false, uniform.value);\r\n        } else if (uniform.type === 'float_mat4') {\r\n            gl.uniformMatrix4fv(location, false, uniform.value);\r\n        }\r\n\r\n        // TODO: Add SAMPLER_2D and SAMPLER_CUBE\r\n\r\n        // Had to set this to true because point sizes did not update...\r\n        uniform.stale = true;\r\n    }\r\n}\r\n\r\nmodule.exports = Uniform","const Attribute = require('./Attribute');\r\nconst Color = require('./Color');\r\nconst DrawModes = require('./DrawModes');\r\nconst Effect = require('./Effect');\r\nconst Geometry = require('./Geometry');\r\nconst Graph = require('./Graph');\r\nconst Node = require('./Node');\r\nconst Renderer = require('./Renderer');\r\nconst Shader = require('./Shader');\r\nconst Tree = require('./Tree');\r\nconst Uniform = require('./Uniform');\r\n\r\nmodule.exports = {\r\n  Attribute,\r\n  Color,\r\n  DrawModes,\r\n  Effect,\r\n  Geometry,\r\n  Graph,\r\n  Node,\r\n  Renderer,\r\n  Shader,\r\n  Tree,\r\n  Uniform\r\n}","//@ts-check\r\n\r\nconst Geometry = require('../Core/Geometry');\r\n\r\n/** \r\n * An abstract class representing the base for filter implementations. \r\n * \r\n * @property {string} type The type name of this object (Lore.FilterBase).\r\n * @property {Geometry} geometry The Geometry associated with this filter.\r\n * @property {string} attribute The name of the attribute to filter on.\r\n * @property {number} attributeIndex The attribute-index to filter on.\r\n * @property {boolean} active Whether or not the filter is active.\r\n */\r\nclass FilterBase {\r\n\r\n    /**\r\n     * Creates an instance of FilterBase.\r\n     * @param {string} attribute The name of the attribute to filter on.\r\n     * @param {number} attributeIndex The attribute-index to filter on.\r\n     */\r\n    constructor(attribute, attributeIndex) {\r\n        this.type = 'Lore.FilterBase';\r\n        this.geometry = null;\r\n        this.attribute = attribute;\r\n        this.attributeIndex = attributeIndex;\r\n        this.active = false;\r\n    }\r\n\r\n    /**\r\n     * Returns the geometry associated with this filter.\r\n     * \r\n     * @returns {Geometry} The geometry associated with this filter.\r\n     */\r\n    getGeometry() {\r\n        return this.geometry;\r\n    }\r\n\r\n    /**\r\n     * Sets the geometry associated with this filter.\r\n     * \r\n     * @param {Geometry} value The geometry to be associated with this filter.\r\n     */\r\n    setGeometry(value) {\r\n        this.geometry = value;\r\n    }\r\n\r\n    /**\r\n     * Abstract method. \r\n     */\r\n    filter() {\r\n\r\n    }\r\n\r\n    /**\r\n     * Abstract method. \r\n     */\r\n    reset() {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Check whether or not a vertex with a given index is visible. A vertex is visible when its color attribute is > 0.0 at attribute-index 2 (the size in HSS).\r\n     *\r\n     * @param {Geometry} geometry A Lore.Geometry with a color attribute.\r\n     * @param {number} index A vertex index.\r\n     * @returns {boolean} A boolean indicating whether or not the vertex specified by index is visible (HSS size > 0.0).\r\n     */\r\n    static isVisible(geometry, index) {\r\n        return geometry.attributes['color'].data[index * 3 + 2] > 0.0;\r\n    }\r\n}\r\n\r\nmodule.exports = FilterBase","//@ts-check\r\n\r\nconst FilterBase = require('./FilterBase');\r\n\r\n/** \r\n * A class representing an In-Range-Filter. It is used to filter a geometry based on a min and max value. \r\n * @property {number} min The minimum value.\r\n * @property {number} max The maximum value.\r\n * */\r\nclass InRangeFilter extends FilterBase {\r\n    /**\r\n     * Creates an instance of InRangeFilter.\r\n     * @param {string} attribute The name of the attribute to filter on.\r\n     * @param {number} attributeIndex The attribute-index to filter on.\r\n     * @param {number} min The minum value.\r\n     * @param {number} max The maximum value.\r\n     */\r\n    constructor(attribute, attributeIndex, min, max) {\r\n        super(attribute, attributeIndex);\r\n\r\n        this.min = min;\r\n        this.max = max;\r\n    }\r\n\r\n    /**\r\n     * Get the minimum.\r\n     * \r\n     * @returns {number} The minimum.\r\n     */\r\n    getMin() {\r\n        return this.min;\r\n    }\r\n\r\n    /**\r\n     * Set the minimum.\r\n     * \r\n     * @param {number} value The minimum.\r\n     */\r\n    setMin(value) {\r\n        this.min = value;\r\n    }\r\n\r\n    /**\r\n     * Get the maximum.\r\n     * \r\n     * @returns {number} The maximum.\r\n     */\r\n    getMax() {\r\n        return this.max;\r\n    }\r\n\r\n    /**\r\n     * Set the maximum.\r\n     * \r\n     * @param {number} value The maximum.\r\n     */\r\n    setMax(value) {\r\n        this.max = value;\r\n    }\r\n\r\n    /**\r\n     * Execute the filter operation on the specified attribute and attribute-index. In order to filter, the HSS size value (attribute-index 2 of the color attribute) is set to its negative (1.0 -> -1.0, 2.5 -> -2.5).\r\n     */\r\n    filter() {\r\n        let attribute = this.geometry.attributes[this.attribute];\r\n\r\n        for (let i = 0; i < attribute.data.length; i += attribute.attributeLength) {\r\n            let value = attribute.data[i + this.attributeIndex];\r\n            let size = this.geometry.attributes['color'].data[i + 2];\r\n            if(value > this.max || value < this.min) {\r\n                this.geometry.attributes['color'].data[i + 2] = -Math.abs(size);\r\n            } else {\r\n                this.geometry.attributes['color'].data[i + 2] = Math.abs(size);\r\n            }\r\n        }\r\n\r\n        this.geometry.updateAttribute('color');\r\n    }\r\n\r\n    /**\r\n     * Resets the filter (\"removes\" it). The HSS size value is set back to its original value (-1.0 -> 1.0, -2.5 -> 2.5). \r\n     */\r\n    reset() {\r\n        let attribute = this.geometry.attributes[this.attribute];\r\n\r\n        for (let i = 0; i < attribute.data.length; i += attribute.attributeLength) {\r\n            let size = this.geometry.attributes['color'].data[i + 2];\r\n            this.geometry.attributes['color'].data[i + 2] = Math.abs(size);\r\n        }\r\n\r\n        this.geometry.updateAttribute('color');\r\n    } \r\n}\r\n\r\nmodule.exports = InRangeFilter","const FilterBase = require('./FilterBase');\r\nconst InRangeFilter = require('./InRangeFilter');\r\n\r\nmodule.exports = {\r\n  FilterBase,\r\n  InRangeFilter\r\n}","//@ts-check\r\n\r\nconst DrawModes = require('../Core/DrawModes');\r\nconst HelperBase = require('./HelperBase');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A helper class for drawing axis aligned bounding boxes. */\r\nclass AABBHelper extends HelperBase {\r\n    /**\r\n     * Creates an instance of AABBHelper.\r\n     * \r\n     * @param {Renderer} renderer A Lore.Renderer object.\r\n     * @param {array} aabbs An array containing axis-aligned bounding boxes.\r\n     * @param {string} geometryName The name of the geometry used to render the axis-aligned bounding boxes.\r\n     * @param {string} shaderName The name of the shader used to render the axis-aligned bounding boxes.\r\n     * @param {object} options Options for drawing the axis-aligned bounding boxes.\r\n     */\r\n    constructor(renderer, aabbs, geometryName, shaderName, options) {\r\n        // TODO: Fix error\r\n        super(renderer, geometryName, shaderName);\r\n\r\n        // Create lines\r\n        // Replaced with indexed?\r\n\r\n        let p = new Float32Array(aabbs.length * 24 * 3);\r\n        let c = new Float32Array(aabbs.length * 24 * 3);\r\n\r\n        let index = 0;\r\n\r\n        for (let i = 0; i < aabbs.length; i++) {\r\n            let aabb = aabbs[0];\r\n            let cx = aabb.center.components[0];\r\n            let cy = aabb.center.components[1];\r\n            let cz = aabb.center.components[2];\r\n            let r = aabb.radius;\r\n\r\n            let p0 = [ cx - r, cy - r, cz - r ];\r\n            let p1 = [ cx - r, cy - r, cz + r ];\r\n            let p2 = [ cx - r, cy + r, cz - r ];\r\n            let p3 = [ cx - r, cy + r, cz + r ];\r\n            let p4 = [ cx + r, cy - r, cz - r ];\r\n            let p5 = [ cx + r, cy - r, cz + r ];\r\n            let p6 = [ cx + r, cy + r, cz - r ];\r\n            let p7 = [ cx + r, cy + r, cz + r ];\r\n\r\n            p[index++] = p0[0]; p[index++] = p0[1]; p[index++] = p0[2];\r\n            p[index++] = p1[0]; p[index++] = p1[1]; p[index++] = p1[2];\r\n            p[index++] = p0[0]; p[index++] = p0[1]; p[index++] = p0[2];\r\n            p[index++] = p2[0]; p[index++] = p2[1]; p[index++] = p2[2];\r\n            p[index++] = p0[0]; p[index++] = p0[1]; p[index++] = p0[2];\r\n            p[index++] = p4[0]; p[index++] = p4[1]; p[index++] = p4[2];\r\n\r\n            p[index++] = p1[0]; p[index++] = p1[1]; p[index++] = p1[2];\r\n            p[index++] = p3[0]; p[index++] = p3[1]; p[index++] = p3[2];\r\n            p[index++] = p1[0]; p[index++] = p1[1]; p[index++] = p1[2];\r\n            p[index++] = p5[0]; p[index++] = p5[1]; p[index++] = p5[2];\r\n\r\n            p[index++] = p2[0]; p[index++] = p2[1]; p[index++] = p2[2];\r\n            p[index++] = p3[0]; p[index++] = p3[1]; p[index++] = p3[2];\r\n            p[index++] = p2[0]; p[index++] = p2[1]; p[index++] = p2[2];\r\n            p[index++] = p6[0]; p[index++] = p6[1]; p[index++] = p6[2];\r\n\r\n            p[index++] = p3[0]; p[index++] = p3[1]; p[index++] = p3[2];\r\n            p[index++] = p7[0]; p[index++] = p7[1]; p[index++] = p7[2];\r\n\r\n            p[index++] = p4[0]; p[index++] = p4[1]; p[index++] = p4[2];\r\n            p[index++] = p5[0]; p[index++] = p5[1]; p[index++] = p5[2];\r\n            p[index++] = p4[0]; p[index++] = p4[1]; p[index++] = p4[2];\r\n            p[index++] = p6[0]; p[index++] = p6[1]; p[index++] = p6[2];\r\n\r\n            p[index++] = p5[0]; p[index++] = p5[1]; p[index++] = p5[2];\r\n            p[index++] = p7[0]; p[index++] = p7[1]; p[index++] = p7[2];\r\n\r\n            p[index++] = p6[0]; p[index++] = p6[1]; p[index++] = p6[2];\r\n            p[index++] = p7[0]; p[index++] = p7[1]; p[index++] = p7[2];\r\n        }\r\n\r\n\r\n        \r\n        this.opts = Utils.extend(true, AABBHelper.defaults, options);\r\n        this.geometry.setMode(DrawModes.lines);\r\n\r\n        this.setAttribute('position', p);\r\n        this.setAttribute('color', c);\r\n    }\r\n}\r\n\r\nmodule.exports = AABBHelper","//@ts-check\r\n\r\nconst Color = require('../Core/Color');\r\nconst HelperBase = require('./HelperBase');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Utils = require('../Utils/Utils');\r\nconst DrawModes = require('../Core/DrawModes');\r\n\r\n/** A helper class for drawing coordinate system indicators. For example, a grid cube. */\r\nclass CoordinatesHelper extends HelperBase {\r\n\r\n    /**\r\n     * Creates an instance of CoordinatesHelper.\r\n     * \r\n     * @param {Renderer} renderer A Lore.Renderer object.\r\n     * @param {string} geometryName The name of this geometry.\r\n     * @param {string} shaderName The name of the shader used to render the coordinates.\r\n     * @param {object} options Options for drawing the coordinates. See documentation for details.\r\n     */\r\n    constructor(renderer, geometryName, shaderName, options) {\r\n        super(renderer, geometryName, shaderName);\r\n\r\n        \r\n        this.defaults = {\r\n            position: new Vector3f(0.0, 0.0, 0.0),\r\n            axis: {\r\n                x: {\r\n                    length: 50.0,\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                y: {\r\n                    length: 50.0,\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                z: {\r\n                    length: 50.0,\r\n                    color: Color.fromHex('#222222')\r\n                }\r\n            },\r\n            ticks: {\r\n                enabled: true,\r\n                x: {\r\n                    count: 10,\r\n                    length: 5.0,\r\n                    offset: new Vector3f(0.0, 0.0, 0.0),\r\n                    color: Color.fromHex('#1f1f1f')\r\n                },\r\n                y: {\r\n                    count: 10,\r\n                    length: 5.0,\r\n                    offset: new Vector3f(0.0, 0.0, 0.0),\r\n                    color: Color.fromHex('#1f1f1f')\r\n                },\r\n                z: {\r\n                    count: 10,\r\n                    length: 5.0,\r\n                    offset: new Vector3f(0.0, 0.0, 0.0),\r\n                    color: Color.fromHex('#1f1f1f')\r\n                }\r\n            },\r\n            box: {\r\n                enabled: true,\r\n                x: {\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                y: {\r\n                    color: Color.fromHex('#222222')\r\n                },\r\n                z: {\r\n                    color: Color.fromHex('#222222')\r\n                }\r\n            },\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n\r\n        this.geometry.setMode(DrawModes.lines);\r\n        this.init();\r\n    }\r\n\r\n    /**\r\n     * Initializes the coordinates system.\r\n     */\r\n    init() {\r\n        let p = this.opts.position.components;\r\n        let ao = this.opts.axis;\r\n\r\n        // Setting the origin position of the axes\r\n        let positions = [\r\n            p[0], p[1], p[2], p[0] + ao.x.length, p[1], p[2],\r\n            p[0], p[1], p[2], p[0], p[1] + ao.y.length, p[2],\r\n            p[0], p[1], p[2], p[0], p[1], p[2] + ao.z.length\r\n        ];\r\n\r\n        // Setting the colors of the axes\r\n        let cx = ao.x.color.components;\r\n        let cy = ao.y.color.components;\r\n        let cz = ao.z.color.components;\r\n\r\n        let colors = [\r\n            cx[0], cx[1], cx[2], cx[0], cx[1], cx[2],\r\n            cy[0], cy[1], cy[2], cy[0], cy[1], cy[2],\r\n            cz[0], cz[1], cz[2], cz[0], cz[1], cz[2]\r\n        ];\r\n\r\n        // Adding the box\r\n        if (this.opts.box.enabled) {\r\n            let bx = this.opts.box.x.color.components;\r\n            let by = this.opts.box.y.color.components;\r\n            let bz = this.opts.box.z.color.components;\r\n\r\n            positions.push(\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2] + ao.z.length, p[0], p[1] + ao.y.length, p[2] + ao.z.length,\r\n                p[0] + ao.x.length, p[1], p[2] + ao.z.length, p[0], p[1], p[2] + ao.z.length,\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2], p[0], p[1] + ao.y.length, p[2],\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2] + ao.z.length, p[0] + ao.x.length, p[1], p[2] + ao.z.length,\r\n                p[0], p[1] + ao.y.length, p[2] + ao.z.length, p[0], p[1], p[2] + ao.z.length,\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2], p[0] + ao.x.length, p[1], p[2],\r\n                p[0] + ao.x.length, p[1] + ao.y.length, p[2] + ao.z.length, p[0] + ao.x.length, p[1] + ao.y.length, p[2],\r\n                p[0], p[1] + ao.y.length, p[2] + ao.z.length, p[0], p[1] + ao.y.length, p[2],\r\n                p[0] + ao.x.length, p[1], p[2] + ao.z.length, p[0] + ao.x.length, p[1], p[2]\r\n            );\r\n\r\n            colors.push(\r\n                bx[0], bx[1], bx[2], bx[0], bx[1], bx[2],\r\n                bx[0], bx[1], bx[2], bx[0], bx[1], bx[2],\r\n                bx[0], bx[1], bx[2], bx[0], bx[1], bx[2],\r\n                by[0], by[1], by[2], by[0], by[1], by[2],\r\n                by[0], by[1], by[2], by[0], by[1], by[2],\r\n                by[0], by[1], by[2], by[0], by[1], by[2],\r\n                bz[0], bz[1], bz[2], bz[0], bz[1], bz[2],\r\n                bz[0], bz[1], bz[2], bz[0], bz[1], bz[2],\r\n                bz[0], bz[1], bz[2], bz[0], bz[1], bz[2]\r\n            );\r\n        }\r\n\r\n        // Adding the ticks\r\n        if (this.opts.ticks.enabled) {\r\n            let xTicks = this.opts.ticks.x, xTickOffset = ao.x.length / xTicks.count;\r\n            let yTicks = this.opts.ticks.y, yTickOffset = ao.y.length / yTicks.count;\r\n            let zTicks = this.opts.ticks.z, zTickOffset = ao.z.length / zTicks.count;\r\n\r\n            // X ticks\r\n            let pos = p[0];\r\n            let col = xTicks.color.components;\r\n\r\n            for (let i = 0; i < xTicks.count - 1; i++) {\r\n                pos += xTickOffset;\r\n                // From\r\n                positions.push(pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], p[2] + xTicks.offset.components[2],\r\n                            pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1] + xTicks.length, p[2] + xTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            pos = p[0];\r\n\r\n            for (let i = 0; i < xTicks.count - 1; i++) {\r\n                pos += xTickOffset;\r\n                // From\r\n                positions.push(pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], p[2] + xTicks.offset.components[2],\r\n                            pos + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], p[2] + xTicks.offset.components[2] + xTicks.length);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            // Y ticks\r\n            pos = p[1];\r\n            col = yTicks.color.components;\r\n\r\n            for (let i = 0; i < yTicks.count - 1; i++) {\r\n                pos += yTickOffset;\r\n                // From\r\n                positions.push(p[0] + xTicks.offset.components[0], pos + xTicks.offset.components[1], p[2] + xTicks.offset.components[2],\r\n                            p[0] + xTicks.offset.components[0] + xTicks.length, pos + xTicks.offset.components[1], p[2] + xTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            pos = p[1];\r\n\r\n            for (let i = 0; i < yTicks.count - 1; i++) {\r\n                pos += yTickOffset;\r\n                // From\r\n                positions.push(p[0] + xTicks.offset.components[0], pos + xTicks.offset.components[1], p[2] + xTicks.offset.components[2],\r\n                            p[0] + xTicks.offset.components[0], pos + xTicks.offset.components[1], p[2] + xTicks.offset.components[2] + xTicks.length);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            // Z ticks\r\n            pos = p[2];\r\n            col = zTicks.color.components;\r\n            \r\n            for (let i = 0; i < zTicks.count - 1; i++) {\r\n                pos += zTickOffset;\r\n                // From\r\n                positions.push(p[0] + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], pos + xTicks.offset.components[2],\r\n                            p[0] + xTicks.offset.components[0], p[1] + xTicks.offset.components[1] + xTicks.length, pos + xTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n\r\n            pos = p[2];\r\n            \r\n            for (let i = 0; i < zTicks.count - 1; i++) {\r\n                pos += zTickOffset;\r\n                // From\r\n                positions.push(p[0] + xTicks.offset.components[0], p[1] + xTicks.offset.components[1], pos + xTicks.offset.components[2],\r\n                            p[0] + xTicks.offset.components[0] + xTicks.length, p[1] + xTicks.offset.components[1], pos + xTicks.offset.components[2]);\r\n                colors.push(col[0], col[1], col[2], col[0], col[1], col[2]);\r\n            }\r\n        }\r\n\r\n        this.setAttribute('position', new Float32Array(positions));\r\n        this.setAttribute('color', new Float32Array(colors));\r\n    }\r\n}\r\n\r\nmodule.exports = CoordinatesHelper","//@ts-check\r\n\r\nconst Shader = require('../Core/Shader');\r\nconst Geometry = require('../Core/Geometry');\r\nconst Node = require('../Core/Node');\r\nconst Shaders = require('../Shaders');\r\n\r\n/** \r\n * The base class for helper classes.\r\n * \r\n * @property {Renderer} renderer An instance of Lore.Renderer.\r\n * @property {Shader} shader The shader associated with this helper.\r\n * @property {Geometry} geometry The geometry associated with this helper.\r\n */\r\nclass HelperBase extends Node {\r\n  /**\r\n   * Creates an instance of HelperBase.\r\n   * \r\n   * @param {Renderer} renderer A Lore.Renderer object.\r\n   * @param {String} geometryName The name of this geometry.\r\n   * @param {String} shaderName The name of the shader used to render the geometry.\r\n   */\r\n  constructor(renderer, geometryName, shaderName) {\r\n    super();\r\n    this.renderer = renderer;\r\n    this.shader = Shaders[shaderName].clone();\r\n    this.geometry = this.renderer.createGeometry(geometryName, shaderName);\r\n  }\r\n\r\n  /**\r\n   * Set the value (a typed array) of an attribute.\r\n   * \r\n   * @param {String} name The name of the attribute. \r\n   * @param {number[]|Array|Float32Array} data A typed array containing the attribute values.\r\n   */\r\n  setAttribute(name, data) {\r\n    this.geometry.addAttribute(name, data);\r\n  }\r\n\r\n  /**\r\n   * Get the value of an attribute (usually a typed array).\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @returns {number[]|Array|Float32Array} Usually, a typed array containing the attribute values.\r\n   */\r\n  getAttribute(name) {\r\n    return this.geometry.attributes[name].data;\r\n  }\r\n\r\n  /**\r\n   * Update a the value of an attribute at a specific index and marks the attribute as stale.\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @param {Number} index The index of the value to be updated.\r\n   * @param {number[]|Array|Float32Array} value Usually, a typed array or array with the length of the attribute values (3 for x, y, z coordinates) containing the new values.\r\n   */\r\n  updateAttribute(name, index, value) {\r\n    let attr = this.geometry.attributes[name];\r\n\r\n    let j = index * attr.attributeLength;\r\n\r\n    for (let i = 0; i < attr.attributeLength; i++) {\r\n      attr.data[j + i] = value[i] || attr.data[j + i];\r\n    }\r\n\r\n    attr.stale = true;\r\n  }\r\n\r\n  /**\r\n   * Updates all the values in the attribute and marks the attribute as stale.\r\n   * \r\n   * @param {String} name The name of the attribute.\r\n   * @param {number[]|Array|Float32Array} values A typed array containing the new attribute values.\r\n   */\r\n  updateAttributeAll(name, values) {\r\n    let attr = this.geometry.attributes[name];\r\n\r\n    for (let i = 0; i < attr.data.length; i++) {\r\n      attr.data[i] = values[i];\r\n    }\r\n\r\n    attr.stale = true;\r\n  }\r\n\r\n  /**\r\n   * Calls the draw method of the underlying geometry.\r\n   */\r\n  draw() {\r\n    this.geometry.draw(this.renderer);\r\n  }\r\n\r\n  /**\r\n   * Destructor for the helper (mainly used for OctreeHelpers to clean up events).\r\n   */\r\n  destruct() {\r\n\r\n  }\r\n}\r\n\r\nmodule.exports = HelperBase","//@ts-check\r\n\r\nconst HelperBase = require('./HelperBase');\r\nconst PointHelper = require('./PointHelper');\r\nconst Octree = require('../Spice/Octree');\r\nconst Raycaster = require('../Spice/Raycaster');\r\nconst DrawModes = require('../Core/DrawModes');\r\nconst Utils = require('../Utils/Utils');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst AABB = require('../Spice/AABB');\r\nconst Matrix4f = require('../Math/Matrix4f');\r\nconst FilterBase = require('../Filters/FilterBase');\r\nconst Ray = require('../Math/Ray')\r\n\r\n/** \r\n * A helper class to create an octree associated with vertex data. \r\n * \r\n * @property {*} opts An object containing options.\r\n * @property {PointHelper} target The Lore.PointHelper object from which this octree is constructed.\r\n * @property {Renderer} renderer An instance of Lore.Renderer.\r\n * @property {Octree} octree The octree associated with the target.\r\n * @property {Raycaster} raycaster An instance of Lore.Raycaster.\r\n * @property {Object} hovered The currently hovered item.\r\n * @property {Object[]} selected The currently selected items.\r\n */\r\nclass OctreeHelper extends HelperBase {\r\n\r\n  /**\r\n   * Creates an instance of OctreeHelper.\r\n   * \r\n   * @param {Renderer} renderer A Lore.Renderer object.\r\n   * @param {String} geometryName The name of this geometry.\r\n   * @param {String} shaderName The name of the shader used to render this octree.\r\n   * @param {PointHelper} target The Lore.PointHelper object from which this octree is constructed.\r\n   * @param {Object} options The options used to draw this octree.\r\n   */\r\n  constructor(renderer, geometryName, shaderName, target, options) {\r\n    super(renderer, geometryName, shaderName);\r\n\r\n    this.defaults = {\r\n      visualize: false,\r\n      multiSelect: true\r\n    }\r\n\r\n    this.opts = Utils.extend(true, this.defaults, options);\r\n    this._eventListeners = {};\r\n    this.target = target;\r\n    this.renderer = renderer;\r\n    this.octree = this.target.octree;\r\n    this.raycaster = new Raycaster();\r\n    this.hovered = null;\r\n    this.selected = [];\r\n\r\n    let that = this;\r\n\r\n    this._dblclickHandler = function (e) {\r\n      if (e.e.mouse.state.middle || e.e.mouse.state.right) {\r\n        return;\r\n      }\r\n\r\n      let mouse = e.e.mouse.normalizedPosition;\r\n      let result = that.getIntersections(mouse);\r\n\r\n      if (result.length > 0) {\r\n        if (that.selectedContains(result[0].index)) {\r\n          return;\r\n        }\r\n\r\n        that.addSelected(result[0]);\r\n      }\r\n    };\r\n\r\n    renderer.controls.addEventListener('dblclick', this._dblclickHandler);\r\n\r\n    this._mousemoveHandler = function (e) {\r\n      if (e.e.mouse.state.left || e.e.mouse.state.middle || e.e.mouse.state.right) {\r\n        return;\r\n      }\r\n\r\n      let mouse = e.e.mouse.normalizedPosition;\r\n      let result = that.getIntersections(mouse);\r\n\r\n      if (result.length > 0) {\r\n        if (that.hovered && that.hovered.index === result[0].index) {\r\n          return;\r\n        }\r\n\r\n        that.hovered = result[0];\r\n        that.hovered.screenPosition = that.renderer.camera.sceneToScreen(result[0].position, renderer);\r\n\r\n        that.raiseEvent('hoveredchanged', {\r\n          e: that.hovered\r\n        });\r\n      } else {\r\n        that.hovered = null;\r\n        that.raiseEvent('hoveredchanged', {\r\n          e: null\r\n        });\r\n      }\r\n    };\r\n\r\n    renderer.controls.addEventListener('mousemove', this._mousemoveHandler);\r\n\r\n    this._zoomchangedHandler = function (zoom) {\r\n      that.setPointSizeFromZoom(zoom);\r\n    };\r\n\r\n    renderer.controls.addEventListener('zoomchanged', this._zoomchangedHandler);\r\n\r\n    this._updatedHandler = function () {\r\n      for (let i = 0; i < that.selected.length; i++) {\r\n        that.selected[i].screenPosition = that.renderer.camera.sceneToScreen(that.selected[i].position, renderer);\r\n      }\r\n\r\n      if (that.hovered) {\r\n        that.hovered.screenPosition = that.renderer.camera.sceneToScreen(that.hovered.position, renderer);\r\n      }\r\n\r\n      that.raiseEvent('updated');\r\n    };\r\n\r\n    renderer.controls.addEventListener('updated', this._updatedHandler);\r\n\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize this octree.\r\n   */\r\n  init() {\r\n    if (this.opts.visualize === 'centers') {\r\n      this.drawCenters();\r\n    } else if (this.opts.visualize === 'cubes') {\r\n      this.drawBoxes();\r\n    } else {\r\n      this.geometry.isVisible = false;\r\n    }\r\n\r\n    this.setPointSizeFromZoom(1.0);\r\n  }\r\n\r\n  /**\r\n   * Sets the point size of the associated Lore.PointHelper object as well as the threshold for the associated raycaster used for vertex picking.\r\n   * \r\n   * @param {Number} zoom The current zoom value of the orthographic view.\r\n   */\r\n  setPointSizeFromZoom(zoom) {\r\n    let threshold = this.target.setPointSize(zoom + 0.1);\r\n\r\n    this.setThreshold(threshold);\r\n  }\r\n\r\n  /**\r\n   * Get the screen position of a vertex by its index.\r\n   * \r\n   * @param {Number} index The index of a vertex.\r\n   * @returns {Number[]} An array containing the screen position. E.g. [122, 290].\r\n   */\r\n  getScreenPosition(index) {\r\n    let positions = this.target.geometry.attributes['position'].data;\r\n    let k = index * 3;\r\n    let p = new Vector3f(positions[k], positions[k + 1], positions[k + 2]);\r\n\r\n    return this.renderer.camera.sceneToScreen(p, this.renderer);\r\n  }\r\n\r\n  /**\r\n   * Adds an object to the selected collection of this Lore.OctreeHelper object.\r\n   * \r\n   * @param {Object|Number} item Either an item (used internally) or the index of a vertex from the associated Lore.PointHelper object.\r\n   */\r\n  addSelected(item) {\r\n    // If item is only the index, create a dummy item\r\n    if (!isNaN(parseFloat(item))) {\r\n      let positions = this.target.geometry.attributes['position'].data;\r\n      let colors = this.target.geometry.attributes['color'].data;\r\n      let k = item * 3;\r\n\r\n      item = {\r\n        distance: -1,\r\n        index: item,\r\n        locCode: -1,\r\n        position: new Vector3f(positions[k], positions[k + 1], positions[k + 2]),\r\n        color: colors ? [colors[k], colors[k + 1], colors[k + 2]] : null\r\n      };\r\n    }\r\n\r\n    let index = this.selected.length;\r\n\r\n    if (this.opts.multiSelect) {\r\n      this.selected.push(item);\r\n    } else {\r\n      this.selected[0] = item;\r\n      index = 0;\r\n    }\r\n\r\n    this.selected[index].screenPosition = this.renderer.camera.sceneToScreen(item.position, this.renderer);\r\n    this.raiseEvent('selectedchanged', {\r\n      e: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Remove an item from the selected collection of this Lore.OctreeHelper object.\r\n   * \r\n   * @param {Number} index The index of the item in the selected collection.\r\n   */\r\n  removeSelected(index) {\r\n    this.selected.splice(index, 1);\r\n\r\n    this.raiseEvent('selectedchanged', {\r\n      e: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the selected collection of this Lore.OctreeHelper object.\r\n   */\r\n  clearSelected() {\r\n    this.selected = [];\r\n\r\n    this.raiseEvent('selectedchanged', {\r\n      e: this.selected\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check whether or not the selected collection of this Lore.OctreeHelper object contains a vertex with a given index.\r\n   * \r\n   * @param {Number} index The index of a vertex in the associated Lore.PointHelper object.\r\n   * @returns {Boolean} A boolean indicating whether or not the selected collection of this Lore.OctreeHelper contains a vertex with a given index.\r\n   */\r\n  selectedContains(index) {\r\n    for (let i = 0; i < this.selected.length; i++) {\r\n      if (this.selected[i].index === index) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Adds a vertex with a given index to the currently hovered vertex of this Lore.OctreeHelper object.\r\n   * \r\n   * @param {Number} index The index of a vertex in the associated Lore.PointHelper object.\r\n   */\r\n  setHovered(index) {\r\n    if (this.hovered && this.hovered.index === index) {\r\n      return;\r\n    }\r\n\r\n    let k = index * 3;\r\n    let positions = this.target.geometry.attributes['position'].data;\r\n    let colors = null;\r\n\r\n    if ('color' in this.target.geometry.attributes) {\r\n      colors = this.target.geometry.attributes['color'].data;\r\n    }\r\n\r\n    this.hovered = {\r\n      index: index,\r\n      position: new Vector3f(positions[k], positions[k + 1], positions[k + 2]),\r\n      color: colors ? [colors[k], colors[k + 1], colors[k + 2]] : null\r\n    };\r\n\r\n    this.hovered.screenPosition = this.renderer.camera.sceneToScreen(this.hovered.position, this.renderer);\r\n    this.raiseEvent('hoveredchanged', {\r\n      e: this.hovered\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the currently hovered vertex to the collection of selected vertices. \r\n   */\r\n  selectHovered() {\r\n    if (!this.hovered || this.selectedContains(this.hovered.index)) {\r\n      return;\r\n    }\r\n\r\n    this.addSelected({\r\n      distance: this.hovered.distance,\r\n      index: this.hovered.index,\r\n      locCode: this.hovered.locCode,\r\n      position: this.hovered.position,\r\n      color: this.hovered.color\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Show the centers of the axis-aligned bounding boxes of this octree. \r\n   */\r\n  showCenters() {\r\n    this.opts.visualize = 'centers';\r\n    this.drawCenters();\r\n    this.geometry.isVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Show the axis-aligned boudning boxes of this octree as cubes. \r\n   */\r\n  showCubes() {\r\n    this.opts.visualize = 'cubes';\r\n    this.drawBoxes();\r\n    this.geometry.isVisible = true;\r\n  }\r\n\r\n  /**\r\n   * Hide the centers or cubes of the axis-aligned bounding boxes associated with this octree.\r\n   */\r\n  hide() {\r\n    this.opts.visualize = false;\r\n    this.geometry.isVisible = false;\r\n\r\n    this.setAttribute('position', new Float32Array([]));\r\n    this.setAttribute('color', new Float32Array([]));\r\n  }\r\n\r\n  /**\r\n   * Get the indices and distances of the vertices currently intersected by the ray sent from the mouse position.\r\n   * \r\n   * @param {Object} mouse A mouse object containing x and y properties.\r\n   * @returns {Object[]} A distance-sorted (ASC) array containing the interesected vertices.\r\n   */\r\n  getIntersections(mouse) {\r\n    this.raycaster.set(this.renderer.camera, mouse.x, mouse.y);\r\n\r\n    let tmp = this.octree.raySearch(this.raycaster);\r\n    let result = this.rayIntersections(tmp);\r\n\r\n    result.sort(function (a, b) {\r\n      return a.distance - b.distance\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Add an event listener to this Lore.OctreeHelper object.\r\n   * \r\n   * @param {String} eventName The name of the event to listen for.\r\n   * @param {Function} callback A callback function called when an event is fired.\r\n   */\r\n  addEventListener(eventName, callback) {\r\n    if (!this._eventListeners[eventName]) {\r\n      this._eventListeners[eventName] = [];\r\n    }\r\n\r\n    this._eventListeners[eventName].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Raise an event with a given name and send the data to the functions listening for this event.\r\n   * \r\n   * @param {String} eventName The name of the event to be rised.\r\n   * @param {*} [data={}] Data to be sent to the listening functions.\r\n   */\r\n  raiseEvent(eventName, data = {}) {\r\n    if (!this._eventListeners[eventName]) {\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n      this._eventListeners[eventName][i](data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Draw the centers of the axis-aligned bounding boxes of this octree.\r\n   */\r\n  drawCenters() {\r\n    this.geometry.setMode(DrawModes.points);\r\n\r\n    let aabbs = this.octree.aabbs;\r\n    let length = Object.keys(aabbs).length;\r\n    let colors = new Float32Array(length * 3);\r\n    let positions = new Float32Array(length * 3);\r\n\r\n    let i = 0;\r\n\r\n    for (var key in aabbs) {\r\n      let c = aabbs[key].center.components;\r\n      let k = i * 3;\r\n\r\n      colors[k] = 1;\r\n      colors[k + 1] = 1;\r\n      colors[k + 2] = 1;\r\n\r\n      positions[k] = c[0];\r\n      positions[k + 1] = c[1];\r\n      positions[k + 2] = c[2];\r\n\r\n      i++;\r\n    }\r\n\r\n    this.setAttribute('position', new Float32Array(positions));\r\n    this.setAttribute('color', new Float32Array(colors));\r\n  }\r\n\r\n  /**\r\n   * Draw the axis-aligned bounding boxes of this octree.\r\n   */\r\n  drawBoxes() {\r\n    this.geometry.setMode(DrawModes.lines);\r\n\r\n    let aabbs = this.octree.aabbs;\r\n    let length = Object.keys(aabbs).length;\r\n    let c = new Float32Array(length * 24 * 3);\r\n    let p = new Float32Array(length * 24 * 3);\r\n\r\n    for (let i = 0; i < c.length; i++) {\r\n      c[i] = 1;\r\n    }\r\n\r\n    let index = 0;\r\n\r\n    for (var key in aabbs) {\r\n      let corners = AABB.getCorners(aabbs[key]);\r\n\r\n      p[index++] = corners[0][0];\r\n      p[index++] = corners[0][1];\r\n      p[index++] = corners[0][2];\r\n      p[index++] = corners[1][0];\r\n      p[index++] = corners[1][1];\r\n      p[index++] = corners[1][2];\r\n      p[index++] = corners[0][0];\r\n      p[index++] = corners[0][1];\r\n      p[index++] = corners[0][2];\r\n      p[index++] = corners[2][0];\r\n      p[index++] = corners[2][1];\r\n      p[index++] = corners[2][2];\r\n      p[index++] = corners[0][0];\r\n      p[index++] = corners[0][1];\r\n      p[index++] = corners[0][2];\r\n      p[index++] = corners[4][0];\r\n      p[index++] = corners[4][1];\r\n      p[index++] = corners[4][2];\r\n\r\n      p[index++] = corners[1][0];\r\n      p[index++] = corners[1][1];\r\n      p[index++] = corners[1][2];\r\n      p[index++] = corners[3][0];\r\n      p[index++] = corners[3][1];\r\n      p[index++] = corners[3][2];\r\n      p[index++] = corners[1][0];\r\n      p[index++] = corners[1][1];\r\n      p[index++] = corners[1][2];\r\n      p[index++] = corners[5][0];\r\n      p[index++] = corners[5][1];\r\n      p[index++] = corners[5][2];\r\n\r\n      p[index++] = corners[2][0];\r\n      p[index++] = corners[2][1];\r\n      p[index++] = corners[2][2];\r\n      p[index++] = corners[3][0];\r\n      p[index++] = corners[3][1];\r\n      p[index++] = corners[3][2];\r\n      p[index++] = corners[2][0];\r\n      p[index++] = corners[2][1];\r\n      p[index++] = corners[2][2];\r\n      p[index++] = corners[6][0];\r\n      p[index++] = corners[6][1];\r\n      p[index++] = corners[6][2];\r\n\r\n      p[index++] = corners[3][0];\r\n      p[index++] = corners[3][1];\r\n      p[index++] = corners[3][2];\r\n      p[index++] = corners[7][0];\r\n      p[index++] = corners[7][1];\r\n      p[index++] = corners[7][2];\r\n\r\n      p[index++] = corners[4][0];\r\n      p[index++] = corners[4][1];\r\n      p[index++] = corners[4][2];\r\n      p[index++] = corners[5][0];\r\n      p[index++] = corners[5][1];\r\n      p[index++] = corners[5][2];\r\n      p[index++] = corners[4][0];\r\n      p[index++] = corners[4][1];\r\n      p[index++] = corners[4][2];\r\n      p[index++] = corners[6][0];\r\n      p[index++] = corners[6][1];\r\n      p[index++] = corners[6][2];\r\n\r\n      p[index++] = corners[5][0];\r\n      p[index++] = corners[5][1];\r\n      p[index++] = corners[5][2];\r\n      p[index++] = corners[7][0];\r\n      p[index++] = corners[7][1];\r\n      p[index++] = corners[7][2];\r\n\r\n      p[index++] = corners[6][0];\r\n      p[index++] = corners[6][1];\r\n      p[index++] = corners[6][2];\r\n      p[index++] = corners[7][0];\r\n      p[index++] = corners[7][1];\r\n      p[index++] = corners[7][2];\r\n    }\r\n\r\n    this.setAttribute('position', p);\r\n    this.setAttribute('color', c);\r\n  }\r\n\r\n  /**\r\n   * Set the threshold of the raycaster associated with this Lore.OctreeHelper object.\r\n   * \r\n   * @param {Number} threshold The threshold (maximum distance to the ray) of the raycaster.\r\n   */\r\n  setThreshold(threshold) {\r\n    this.raycaster.threshold = threshold;\r\n  }\r\n\r\n  /**\r\n   * Execute a ray intersection search within this octree.\r\n   * \r\n   * @param {Number[]} indices The indices of the octree nodes that are intersected by the ray.\r\n   * @returns {*} An array containing the vertices intersected by the ray.\r\n   */\r\n  rayIntersections(indices) {\r\n    let result = [];\r\n    let inverseMatrix = Matrix4f.invert(this.target.modelMatrix); // this could be optimized, since the model matrix does not change\r\n    let ray = new Ray();\r\n    let threshold = this.raycaster.threshold * this.target.getPointScale();\r\n    let positions = this.target.geometry.attributes['position'].data;\r\n    let colors = null;\r\n\r\n    if ('color' in this.target.geometry.attributes) {\r\n      colors = this.target.geometry.attributes['color'].data;\r\n    }\r\n\r\n    // Only get points further away than the cutoff set in the point HelperBase\r\n    let cutoff = this.target.getCutoff();\r\n\r\n    ray.copyFrom(this.raycaster.ray).applyProjection(inverseMatrix);\r\n\r\n    let localThreshold = threshold; // / ((pointCloud.scale.x + pointCloud.scale.y + pointCloud.scale.z) / 3);\r\n    let localThresholdSq = localThreshold * localThreshold;\r\n\r\n    for (let i = 0; i < indices.length; i++) {\r\n      let index = indices[i].index;\r\n      let locCode = indices[i].locCode;\r\n      let k = index * 3;\r\n      let v = new Vector3f(positions[k], positions[k + 1], positions[k + 2]);\r\n\r\n      let rayPointDistanceSq = ray.distanceSqToPoint(v);\r\n      if (rayPointDistanceSq < localThresholdSq) {\r\n        let intersectedPoint = ray.closestPointToPoint(v);\r\n        intersectedPoint.applyProjection(this.target.modelMatrix);\r\n        let dist = this.raycaster.ray.source.distanceTo(intersectedPoint);\r\n        let isVisible = FilterBase.isVisible(this.target.geometry, index);\r\n        if (dist < this.raycaster.near || dist > this.raycaster.far || dist < cutoff || !isVisible) continue;\r\n\r\n        result.push({\r\n          distance: dist,\r\n          index: index,\r\n          locCode: locCode,\r\n          position: v,\r\n          color: colors ? [colors[k], colors[k + 1], colors[k + 2]] : null\r\n        });\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Remove eventhandlers from associated controls.\r\n   */\r\n  destruct() {\r\n    this.renderer.controls.removeEventListener('dblclick', this._dblclickHandler);\r\n    this.renderer.controls.removeEventListener('mousemove', this._mousemoveHandler);\r\n    this.renderer.controls.removeEventListener('zoomchanged', this._zoomchangedHandler);\r\n    this.renderer.controls.removeEventListener('updated', this._updatedHandler);\r\n  }\r\n}\r\n\r\nmodule.exports = OctreeHelper","//@ts-check\r\n\r\nconst HelperBase = require('./HelperBase');\r\nconst DrawModes = require('../Core/DrawModes')\r\nconst Color = require('../Core/Color');\r\nconst Utils = require('../Utils/Utils');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst AABB = require('../Spice/AABB');\r\nconst Octree = require('../Spice/Octree');\r\nconst FilterBase = require('../Filters/FilterBase');\r\n\r\n/** \r\n * A helper class wrapping a point cloud.\r\n * \r\n * @property {Object} opts An object containing options.\r\n * @property {Number[]} indices Indices associated with the data.\r\n * @property {Octree} octree The octree associated with the point cloud.\r\n * @property {Object} filters A map mapping filter names to Lore.Filter instances associated with this helper class.\r\n * @property {Number} pointSize The scaled and constrained point size of this data.\r\n * @property {Number} pointScale The scale of the point size.\r\n * @property {Number} rawPointSize The point size before scaling and constraints.\r\n * @property {Object} dimensions An object with the properties min and max, each a 3D vector containing the extremes.\r\n */\r\nclass PointHelper extends HelperBase {\r\n  /**\r\n   * Creates an instance of PointHelper.\r\n   * @param {Renderer} renderer An instance of Lore.Renderer.\r\n   * @param {String} geometryName The name of this geometry.\r\n   * @param {String} shaderName The name of the shader used to render the geometry.\r\n   * @param {Object} options An object containing options.\r\n   */\r\n  constructor(renderer, geometryName, shaderName, options) {\r\n    super(renderer, geometryName, shaderName);\r\n\r\n    let defaults = {\r\n      octree: true,\r\n      octreeThreshold: 500.0,\r\n      octreeMaxDepth: 8,\r\n      pointScale: 1.0,\r\n      maxPointSize: 100.0\r\n    };\r\n\r\n    this.opts = Utils.extend(true, defaults, options);\r\n    this.indices = null;\r\n    this.octree = null;\r\n    this.geometry.setMode(DrawModes.points);\r\n    this.initPointSize();\r\n    this.filters = {};\r\n    this.pointScale = this.opts.pointScale;\r\n    this.rawPointSize = 1.0;\r\n    this.pointSize = this.rawPointSize * this.pointScale;\r\n\r\n    this.dimensions = {\r\n      min: new Vector3f(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY),\r\n      max: new Vector3f(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the max length of the length of three arrays.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x \r\n   * @param {Number[]|Array|Float32Array} y \r\n   * @param {Number[]|Array|Float32Array} z \r\n   * @returns {Number} The length of the largest array.\r\n   */\r\n  getMaxLength(x, y, z) {\r\n    return Math.max(x.length, Math.max(y.length, z.length));\r\n  }\r\n\r\n  /**\r\n   * Returns an object containing the dimensions of this point cloud.\r\n   * \r\n   * @returns {Object} An object with the properties min and max, each a 3D vector containing the extremes.\r\n   */\r\n  getDimensions() {\r\n    return this.dimensions;\r\n  }\r\n\r\n  /**\r\n   * Get the center (average) of the point cloud.\r\n   * \r\n   * @returns {Vector3f} The center (average) of the point cloud.\r\n   */\r\n  getCenter() {\r\n    return new Vector3f((this.dimensions.max.getX() + this.dimensions.min.getX()) / 2.0,\r\n      (this.dimensions.max.getY() + this.dimensions.min.getY()) / 2.0,\r\n      (this.dimensions.max.getZ() + this.dimensions.min.getZ()) / 2.0);\r\n  }\r\n\r\n  /**\r\n   * Gets the distance between the center and the point furthest from the center.\r\n   * \r\n   * @return {Number} The maximal radius.\r\n   */\r\n  getMaxRadius() {\r\n    let center = this.getCenter();\r\n    return center.subtract(this.dimensions.max).length();\r\n  }\r\n\r\n  /**\r\n   * Set the positions of points in this point cloud.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} positions The positions (linear array).\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPositions(positions) {\r\n    // Min, max will NOT be calculated as of now!\r\n    // TODO?\r\n\r\n    this.setAttribute('position', positions);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions of points in this point clouds.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number} length The length of the arrays.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPositionsXYZ(x, y, z, length) {\r\n    let positions = new Float32Array(length * 3);\r\n\r\n    for (var i = 0; i < length; i++) {\r\n      let j = 3 * i;\r\n\r\n      positions[j] = x[i] || 0;\r\n      positions[j + 1] = y[i] || 0;\r\n      positions[j + 2] = z[i] || 0;\r\n\r\n      if (x[i] > this.dimensions.max.getX()) {\r\n        this.dimensions.max.setX(x[i]);\r\n      }\r\n\r\n      if (x[i] < this.dimensions.min.getX()) {\r\n        this.dimensions.min.setX(x[i]);\r\n      }\r\n\r\n      if (y[i] > this.dimensions.max.getY()) {\r\n        this.dimensions.max.setY(y[i]);\r\n      }\r\n\r\n      if (y[i] < this.dimensions.min.getY()) {\r\n        this.dimensions.min.setY(y[i]);\r\n      }\r\n\r\n      if (z[i] > this.dimensions.max.getZ()) {\r\n        this.dimensions.max.setZ(z[i]);\r\n      }\r\n\r\n      if (z[i] < this.dimensions.min.getZ()) {\r\n        this.dimensions.min.setZ(z[i]);\r\n      }\r\n    }\r\n\r\n    if (this.opts.octree) {\r\n      let initialBounds = AABB.fromPoints(positions);\r\n      let indices = new Uint32Array(length);\r\n\r\n      for (var i = 0; i < length; i++) {\r\n        indices[i] = i;\r\n      }\r\n\r\n      this.octree = new Octree(this.opts.octreeThreshold, this.opts.octreeMaxDepth);\r\n      this.octree.build(indices, positions, initialBounds);\r\n    }\r\n\r\n    this.setAttribute('position', positions);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the positions and the HSS (Hue, Saturation, Size) values of the points in the point cloud.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} x An array containing the x components.\r\n   * @param {Number[]|Array|Float32Array} y An array containing the y components.\r\n   * @param {Number[]|Array|Float32Array} z An array containing the z components.\r\n   * @param {Number[]|Array|Float32Array} hue An array containing the hues of the data points.\r\n   * @param {Number[]|Array|Float32Array} saturation An array containing the saturations of the data points.\r\n   * @param {Number[]|Array|Float32Array} size An array containing the sizes of the data points.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPositionsXYZHSS(x, y, z, hue, saturation, size) {\r\n    let length = this.getMaxLength(x, y, z);\r\n\r\n    this.setPositionsXYZ(x, y, z, length);\r\n\r\n    if (typeof hue === 'number' && typeof saturation === 'number' && typeof size === 'number') {\r\n      this.setHSS(hue, saturation, size, length);\r\n    } else if (typeof hue !== 'number' && typeof saturation !== 'number' && typeof size !== 'number') {\r\n      this.setHSSFromArrays(hue, saturation, size, length);\r\n    } else {\r\n      if (typeof hue === 'number') {\r\n        let hueTmp = new Float32Array(length);\r\n        hueTmp.fill(hue);\r\n        hue = hueTmp;\r\n      }\r\n\r\n      if (typeof saturation === 'number') {\r\n        let saturationTmp = new Float32Array(length);\r\n        saturationTmp.fill(saturation);\r\n        saturation = saturationTmp;\r\n      }\r\n\r\n      if (typeof size === 'number') {\r\n        let sizeTmp = new Float32Array(length);\r\n        sizeTmp.fill(size);\r\n        size = sizeTmp;\r\n      }\r\n\r\n      this.setHSSFromArrays(hue, saturation, size, length);\r\n    }\r\n\r\n    // TODO: Check why the projection matrix update is needed\r\n    this.renderer.camera.updateProjectionMatrix();\r\n    this.renderer.camera.updateViewMatrix();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the hue from an rgb values.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} r An array containing the red components of the colors.\r\n   * @param {Number[]|Array|Float32Array} g An array containing the green components of the colors.\r\n   * @param {Number[]|Array|Float32Array} b An array containing the blue components of the colors.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setRGB(r, g, b) {\r\n    let c = new Float32Array(r.length * 3);\r\n    let colors = this.getAttribute('color');\r\n\r\n    for (let i = 0; i < r.length; i++) {\r\n      let j = 3 * i;\r\n\r\n      c[j] = r[i];\r\n      c[j + 1] = g[i];\r\n      c[j + 2] = b[i];\r\n    }\r\n\r\n    // Convert to HOS (Hue, Saturation, Size)\r\n    for (let i = 0; i < c.length; i += 3) {\r\n      let r = c[i];\r\n      let g = c[i + 1];\r\n      let b = c[i + 2];\r\n\r\n      c[i] = Color.rgbToHsl(r, g, b)[0];\r\n      c[i + 1] = colors[i + 1];\r\n      c[i + 2] = colors[i + 2];\r\n    }\r\n\r\n    this.updateColors(c);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the colors (HSS) for the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} colors An array containing the HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setColors(colors) {\r\n    this.setAttribute('color', colors);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the colors (HSS) for the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} colors An array containing the HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  updateColors(colors) {\r\n    this.updateAttributeAll('color', colors);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Update the color (HSS) at a specific index.\r\n   * \r\n   * @param {Number} index The index of the data point.\r\n   * @param {Color} color An instance of Lore.Color containing HSS values.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  updateColor(index, color) {\r\n    this.updateAttribute('color', index, color.components);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the global point size.\r\n   * \r\n   * @param {Number} size The global point size.\r\n   * @returns {Number} The threshold for the raycaster.\r\n   */\r\n  setPointSize(size) {\r\n    this.rawPointSize = size;\r\n\r\n    this.updatePointSize();\r\n\r\n    let pointSize = this.rawPointSize * this.opts.pointScale;\r\n\r\n    if (pointSize > this.opts.maxPointSize) {\r\n      return 0.5 * (this.opts.maxPointSize / pointSize);\r\n    } else {\r\n      return 0.5;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Updates the displayed point size.\r\n   */\r\n  updatePointSize() {\r\n    let pointSize = this.rawPointSize * this.opts.pointScale;\r\n\r\n    if (pointSize > this.opts.maxPointSize) {\r\n      this.pointSize = this.opts.maxPointSize;\r\n    } else {\r\n      this.pointSize = pointSize;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.size.value = this.pointSize;\r\n  }\r\n\r\n  /**\r\n   * Get the global point size.\r\n   * \r\n   * @returns {Number} The global point size.\r\n   */\r\n  getPointSize() {\r\n    return this.geometry.shader.uniforms.size.value;\r\n  }\r\n\r\n  /**\r\n   * Get the global point scale.\r\n   * \r\n   * @returns {Number} The global point size.\r\n   */\r\n  getPointScale() {\r\n    return this.opts.pointScale;\r\n  }\r\n\r\n  /**\r\n   * Sets the global point scale.\r\n   * \r\n   * @param {Number} pointScale The global point size.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setPointScale(pointScale) {\r\n    this.opts.pointScale = pointScale;\r\n    this.updatePointSize();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the fog colour and it's density, as seen from the camera.\r\n   * \r\n   * @param {Array} color An array defining the rgba values of the fog colour.\r\n   * @param {Number} fogDensity The density of the fog.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setFog(color, fogDensity = 6.0) {\r\n    if (!this.geometry.shader.uniforms.clearColor || !this.geometry.shader.uniforms.fogDensity) {\r\n      console.warn('Shader \"' + this.geometry.shader.name + '\" does not support fog.');\r\n      return this;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.clearColor.value = color;\r\n    this.geometry.shader.uniforms.fogDensity.value = fogDensity;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Initialize the point size based on the current zoom.\r\n   * \r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  initPointSize() {\r\n    this.setPointSize(this.renderer.camera.zoom + 0.1);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the current cutoff value.\r\n   * \r\n   * @returns {Number} The current cutoff value.\r\n   */\r\n  getCutoff() {\r\n    return this.geometry.shader.uniforms.cutoff.value;\r\n  }\r\n\r\n  /**\r\n   * Set the cutoff value.\r\n   * \r\n   * @param {Number} cutoff A cutoff value.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  setCutoff(cutoff) {\r\n    this.geometry.shader.uniforms.cutoff.value = cutoff;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the hue for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number} The hue of the specified index.\r\n   */\r\n  getHue(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3];\r\n  }\r\n\r\n  /**\r\n   * Get the saturation for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number} The saturation of the specified index.\r\n   */\r\n  getSaturation(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3 + 1];\r\n  }\r\n\r\n  /**\r\n   * Get the size for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Number} The size of the specified index.\r\n   */\r\n  getSize(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3 + 2];\r\n  }\r\n\r\n  /**\r\n   * Get the position for a given index.\r\n   * \r\n   * @param {Number} index An index.\r\n   * @returns {Vector3f} The position of the specified index.\r\n   */\r\n  getPosition(index) {\r\n    let positions = this.getAttribute('position');\r\n\r\n    return new Vector3f(positions[index * 3], positions[index * 3 + 1],\r\n      positions[index * 3 + 2]);\r\n  }\r\n\r\n  /**\r\n   * Set the hue. If a number is supplied, all the hues are set to the supplied number.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} hue The hue to be set. If a number is supplied, all hues are set to its value.\r\n   */\r\n  setHue(hue) {\r\n    let colors = this.getAttribute('color');\r\n    let c = null;\r\n    let index = 0;\r\n\r\n    if (typeof hue === 'number') {\r\n      let length = colors.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = hue;\r\n        c[i + 1] = colors[i + 1];\r\n        c[i + 2] = colors[i + 2];\r\n      }\r\n    } else {\r\n      let length = hue.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = hue[index++];\r\n        c[i + 1] = colors[i + 1];\r\n        c[i + 2] = colors[i + 2];\r\n      }\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Update the hue of the points.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} hue The hue to be set. If a number is supplied, all hues are set to its value.\r\n   * @param {Number|Array|Number[]} index The index or the indices of vertices to be set to a hue.\r\n   */\r\n  updateHue(hue, index) {\r\n    let colors = this.getAttribute('color');\r\n    let c = null;\r\n\r\n    if (index > colors.length - 1) {\r\n      console.warn('The color index is out of range.');\r\n      return;\r\n    }\r\n    \r\n    if (typeof index === 'number') {\r\n      if (typeof hue !== 'number') {\r\n        console.warn('The hue value cannot be an array if index is a number.')\r\n      } else {\r\n        this.updateColor(index, new Color(hue, colors[index + 1], colors[index + 2]));\r\n      }\r\n    } else if (Array.isArray(index)) {\r\n      if (Array.isArray(hue)) {\r\n        if (hue.length !== index.length) {\r\n          console.warn('Hue and index arrays have to be of the same length.');\r\n        } else {\r\n          for (var i = 0; i < index.length; i++) {\r\n            this.updateColor(index[i], new Color(hue[i], colors[index[i] + 1], colors[index[i] + 2]));\r\n          }\r\n        }\r\n      } else if (typeof hue === 'number') {\r\n        for (var i = 0; i < index.length; i++) {\r\n          this.updateColor(index[i], new Color(hue, colors[index[i] + 1], colors[index[i] + 2]));\r\n        }\r\n      }\r\n    } else {\r\n      console.warn('The type of index is not supported: ' + (typeof index));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the saturation. If a number is supplied, all the saturations are set to the supplied number.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} saturation The saturation to be set. If a number is supplied, all saturations are set to its value.\r\n   */\r\n  setSaturation(saturation) {\r\n    let colors = this.getAttribute('color');\r\n    let c = null;\r\n    let index = 0;\r\n\r\n    if (typeof saturation === 'number') {\r\n      let length = colors.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = saturation;\r\n        c[i + 2] = colors[i + 2];\r\n      }\r\n    } else {\r\n      let length = saturation.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = saturation[index++];\r\n        c[i + 2] = colors[i + 2];\r\n      }\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the size. If a number is supplied, all the sizes are set to the supplied number.\r\n   * \r\n   * @param {Number[]|Array|Float32Array|Number} size The size to be set. If a number is supplied, all sizes are set to its value.\r\n   */\r\n  setSize(size) {\r\n    let colors = this.getAttribute('color');\r\n    let c = null;\r\n    let index = 0;\r\n\r\n    if (typeof size === 'number') {\r\n      let length = colors.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = colors[i + 1];\r\n        c[i + 2] = size;\r\n      }\r\n    } else {\r\n      let length = size.length;\r\n\r\n      c = new Float32Array(length * 3);\r\n\r\n      for (let i = 0; i < length * 3; i += 3) {\r\n        c[i] = colors[i];\r\n        c[i + 1] = colors[i + 1];\r\n        c[i + 2] = size[index++];\r\n      }\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the HSS values. Sets all indices to the same values.\r\n   * \r\n   * @param {Number} hue A hue value.\r\n   * @param {Number} saturation A saturation value.\r\n   * @param {Number} size A size value.\r\n   * @param {Number} length The length of the arrays.\r\n   */\r\n  setHSS(hue, saturation, size, length) {\r\n    let c = new Float32Array(length * 3);\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue;\r\n      c[i + 1] = saturation;\r\n      c[i + 2] = size;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Set the HSS values.\r\n   * \r\n   * @param {Number[]|Array|Float32Array} hue An array of hue values.\r\n   * @param {Number[]|Array|Float32Array} saturation An array of saturation values.\r\n   * @param {Number[]|Array|Float32Array} size An array of size values.\r\n   * @param {Number} length The length of the arrays.\r\n   */\r\n  setHSSFromArrays(hue, saturation, size, length) {\r\n    let c = new Float32Array(length * 3);\r\n    let index = 0;\r\n\r\n    if (hue.length !== length && saturation.length !== length && size.length !== length) {\r\n      throw 'Hue, saturation and size have to be arrays of length \"length\" (' + length + ').';\r\n    }\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue[index];\r\n      c[i + 1] = saturation[index];\r\n      c[i + 2] = size[index];\r\n\r\n      index++;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Add a filter to this point helper.\r\n   * \r\n   * @param {String} name The name of the filter.\r\n   * @param {FilterBase} filter A filter instance.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  addFilter(name, filter) {\r\n    filter.setGeometry(this.geometry);\r\n    this.filters[name] = filter;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Remove a filter by name.\r\n   * \r\n   * @param {String} name The name of the filter to be removed.\r\n   * @returns {PointHelper} Itself.\r\n   */\r\n  removeFilter(name) {\r\n    delete this.filters[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get a filter by name.\r\n   * \r\n   * @param {String} name The name of a filter.\r\n   * @returns {FilterBase} A filter instance.\r\n   */\r\n  getFilter(name) {\r\n    return this.filters[name];\r\n  }\r\n}\r\n\r\nmodule.exports = PointHelper","//@ts-check\r\n\r\nconst HelperBase = require('./HelperBase');\r\nconst DrawModes = require('../Core/DrawModes')\r\nconst Utils = require('../Utils/Utils');\r\n\r\nclass TreeHelper extends HelperBase {\r\n\r\n  constructor(renderer, geometryName, shaderName, options) {\r\n    super(renderer, geometryName, shaderName);\r\n\r\n    this.defaults = {\r\n      pointScale: 1.0,\r\n      maxPointSize: 100.0\r\n    }\r\n\r\n    this.opts = Utils.extend(true, this.defaults, options);\r\n    this.indices = null;\r\n    this.geometry.setMode(DrawModes.lines);\r\n    this.initPointSize();\r\n    this.filters = {};\r\n  }\r\n\r\n  getMaxLength(x, y, z) {\r\n    return Math.max(x.length, Math.max(y.length, z.length));\r\n  }\r\n\r\n  setPositions(positions) {\r\n    this.setAttribute('position', positions);\r\n  }\r\n\r\n  setPositionsXYZ(x, y, z, length) {\r\n    let positions = new Float32Array(length * 3);\r\n\r\n    for (let i = 0; i < length; i++) {\r\n      let j = 3 * i;\r\n\r\n      positions[j] = x[i] || 0;\r\n      positions[j + 1] = y[i] || 0;\r\n      positions[j + 2] = z[i] || 0;\r\n    }\r\n\r\n    this.setAttribute('position', positions);\r\n  }\r\n\r\n  setPositionsXYZHSS(x, y, z, hue, saturation, size) {\r\n    let length = this.getMaxLength(x, y, z);\r\n\r\n    this.setPositionsXYZ(x, y, z, length);\r\n    this.setHSS(hue, saturation, size, length);\r\n  }\r\n\r\n  setColors(colors) {\r\n    this.setAttribute('color', colors);\r\n  }\r\n\r\n  updateColors(colors) {\r\n    this.updateAttributeAll('color', colors);\r\n  }\r\n\r\n  updateColor(index, color) {\r\n    this.updateAttribute('color', index, color.components);\r\n  }\r\n\r\n  setPointSize(size) {\r\n    if (size * this.opts.pointScale > this.opts.maxPointSize) {\r\n      return;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.size.value = size * this.opts.pointScale;\r\n  }\r\n\r\n  getPointSize() {\r\n    return this.geometry.shader.uniforms.size.value;\r\n  }\r\n\r\n  setFogDistance(fogStart, fogEnd) {\r\n    console.warn('This function is deprecated.');\r\n    // this.geometry.shader.uniforms.fogStart.value = fogStart;\r\n    // this.geometry.shader.uniforms.fogEnd.value = fogEnd;\r\n  }\r\n\r\n  initPointSize() {\r\n    this.geometry.shader.uniforms.size.value = this.renderer.camera.zoom * this.opts.pointScale;\r\n  }\r\n\r\n  getCutoff() {\r\n    return this.geometry.shader.uniforms.cutoff.value;\r\n  }\r\n\r\n  setCutoff(cutoff) {\r\n    this.geometry.shader.uniforms.cutoff.value = cutoff;\r\n  }\r\n\r\n  getHue(index) {\r\n    let colors = this.getAttribute('color');\r\n\r\n    return colors[index * 3];\r\n  }\r\n\r\n  setHSS(hue, saturation, size, length) {\r\n    let c = new Float32Array(length * 3);\r\n\r\n    for (let i = 0; i < length * 3; i += 3) {\r\n      c[i] = hue;\r\n      c[i + 1] = saturation;\r\n      c[i + 2] = size;\r\n    }\r\n\r\n    this.setColors(c);\r\n  }\r\n\r\n  /**\r\n   * Sets the fog colour and it's density, as seen from the camera.\r\n   * \r\n   * @param {Array} color An array defining the rgba values of the fog colour.\r\n   * @param {Number} fogDensity The density of the fog.\r\n   * @returns {TreeHelper} Itself.\r\n   */\r\n  setFog(color, fogDensity = 6.0) {\r\n    if (!this.geometry.shader.uniforms.clearColor || !this.geometry.shader.uniforms.fogDensity) {\r\n      console.warn('Shader \"' + this.geometry.shader.name + '\" does not support fog.');\r\n      return this;\r\n    }\r\n\r\n    this.geometry.shader.uniforms.clearColor.value = color;\r\n    this.geometry.shader.uniforms.fogDensity.value = fogDensity;\r\n\r\n    return this;\r\n  }\r\n\r\n\r\n  addFilter(name, filter) {\r\n    filter.setGeometry(this.geometry);\r\n    this.filters[name] = filter;\r\n  }\r\n\r\n  removeFilter(name) {\r\n    delete this.filters[name];\r\n  }\r\n\r\n  getFilter(name) {\r\n    return this.filters[name];\r\n  }\r\n}\r\n\r\nmodule.exports = TreeHelper","const AABBHelper = require('./AABBHelper');\r\nconst CoordinatesHelper = require('./CoordinatesHelper');\r\nconst HelperBase = require('./HelperBase');\r\nconst OctreeHelper = require('./OctreeHelper');\r\nconst PointHelper = require('./PointHelper');\r\nconst TreeHelper = require('./TreeHelper');\r\n\r\nmodule.exports = {\r\n  AABBHelper,\r\n  CoordinatesHelper,\r\n  HelperBase,\r\n  OctreeHelper,\r\n  PointHelper,\r\n  TreeHelper\r\n}","//@ts-check\r\n\r\nconst FileReaderBase = require('./FileReaderBase');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A class representing a CSV file reader. */\r\nclass CsvFileReader extends FileReaderBase {\r\n    /**\r\n     * Creates an instance of CsvFileReader.\r\n     * @param {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n     * @param {any} options Options. See documentation for details.\r\n     * @param {boolean} [local=true] A boolean indicating whether or not the source is local (a file input) or remote (a url).\r\n     */\r\n    constructor(source, options, local = true) {\r\n        super(source, local);\r\n\r\n        this.defaults = {\r\n            separator: ',',\r\n            cols: [],\r\n            types: [],\r\n            header: true\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n        this.columns = {};\r\n        this.headers = [];\r\n        this.types = this.opts.types;\r\n        this.cols = this.opts.cols;\r\n    }\r\n\r\n    /**\r\n     * Called when the data is loaded, will raise the \"loaded\" event.\r\n     * \r\n     * @param {any} data The data loaded from the file or url.\r\n     * @returns {CsvFileReader} Itself.\r\n     */\r\n    loaded(data) {\r\n        data = data.replace('\\n\\n', '\\n');\r\n        data = data.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        let lines = data.split('\\n');\r\n        let length = lines.length;\r\n        let init = true;\r\n        let h = this.opts.header ? 1 : 0;\r\n\r\n        if (this.cols.length !== 0) {\r\n            if (this.types.length !== this.cols.length) {\r\n                throw 'Types and cols must have the same number of elements.'\r\n            }\r\n        } else {\r\n            if (this.types.length !== this.cols.length || this.types.length + this.cols.length === 0) {\r\n                let values = lines[h].split(this.opts.separator);\r\n                \r\n                this.types = [];\r\n                for (let i = 0; i < values.length; i++) {\r\n                    if(Utils.isFloat(parseFloat(values[i], 10))) {\r\n                        this.types.push('Float32Array');\r\n                    } else if (Utils.isInt(parseFloat(values[i], 10))) {\r\n                        this.types.push('Int32Array');\r\n                    } else {\r\n                        this.types.push('StringArray');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.cols.length === 0) {\r\n            let values = lines[0].split(this.opts.separator);\r\n            \r\n            for (let i = 0; i < values.length; i++) {\r\n                this.cols.push(i);\r\n            }\r\n        }\r\n\r\n        if (h) {\r\n            let headerNames = lines[0].split(this.opts.separator);\r\n\r\n            for (let i = 0; i < this.cols.length; i++) {\r\n                this.headers[i] = headerNames[this.cols[i]].trim();\r\n            }\r\n        } else {\r\n            for (let i = 0; i < this.cols.length; i++) {\r\n                this.headers[i] = i;\r\n            }\r\n        }\r\n        \r\n        for (let i = h; i < length; i++) {\r\n            let values = lines[i].split(this.opts.separator);\r\n\r\n            if (this.cols.length == 0)\r\n                for (let j = 0; j < values.length; j++) {\r\n                    this.cols.push[j];\r\n                }\r\n\r\n            if (init) {\r\n                for (let j = 0; j < this.cols.length; j++) {\r\n                    this._createArray(this.headers[j], this.types[j], length - h);\r\n                }\r\n\r\n                init = false;\r\n            }\r\n\r\n            for (let j = 0; j < this.cols.length; j++) {\r\n                this.columns[this.headers[j]][i - h] = values[this.cols[j]];\r\n            }\r\n        }\r\n\r\n        this.raiseEvent('loaded', this.columns);\r\n        \r\n        return this;\r\n    }\r\n\r\n    _createArray(index, type, length) {\r\n        if (type == 'Int8Array') {\r\n            this.columns[index] = new Int8Array(length);\r\n        } else if (type == 'Uint8Array') {\r\n            this.columns[index] = new Uint8Array(length);\r\n        } else if (type == 'Uint8ClampedArray') {\r\n            this.columns[index] = new Uint8ClampedArray(length);\r\n        } else if (type == 'Int16Array') {\r\n            this.columns[index] = new Int16Array(length);\r\n        } else if (type == 'Uint16Array') {\r\n            this.columns[index] = new Uint16Array(length);\r\n        } else if (type == 'Int32Array') {\r\n            this.columns[index] = new Int32Array(length);\r\n        } else if (type == 'Uint32Array') {\r\n            this.columns[index] = new Uint32Array(length);\r\n        } else if (type == 'Float32Array') {\r\n            this.columns[index] = new Float32Array(length);\r\n        } else if (type == 'Float64Array') {\r\n            this.columns[index] = new Float64Array(length);\r\n        } else {\r\n            this.columns[index] = new Array(length);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = CsvFileReader","//@ts-check\r\n\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** \r\n * An abstract class representing the base for file reader implementations. \r\n * \r\n * @property {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n * */\r\nclass FileReaderBase {\r\n    /**\r\n     * Creates an instance of FileReaderBase.\r\n     * \r\n     * @param {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n     * @param {Boolean} [local=true] A boolean indicating whether or not the source is local (a file input) or remote (a url).\r\n     */\r\n    constructor(source, local = true) {\r\n        this.source = source;\r\n        this._eventListeners = {};\r\n        \r\n        let that = this;\r\n\r\n        if (local) {\r\n            this.element = document.getElementById(this.source);\r\n\r\n            this.element.addEventListener('click', function() {\r\n                this.value = null;\r\n            });\r\n\r\n            this.element.addEventListener('change', function() {\r\n                let fileReader = new FileReader();\r\n\r\n                fileReader.onload = function() {\r\n                    that.loaded(fileReader.result);\r\n                }\r\n\r\n                fileReader.readAsBinaryString(this.files[0]);\r\n            });\r\n        } else {\r\n            Utils.jsonp(source, function(response) {\r\n                that.loaded(response);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an event listener.\r\n     * \r\n     * @param {String} eventName The name of the event.\r\n     * @param {Function} callback A callback function associated with the event name.\r\n     */\r\n    addEventListener(eventName, callback) {\r\n        if(!this._eventListeners[eventName]) {\r\n            this._eventListeners[eventName] = [];\r\n        }\r\n\r\n        this._eventListeners[eventName].push(callback);\r\n    }\r\n\r\n    /**\r\n     * Raise an event. To be called by inheriting classes.\r\n     * \r\n     * @param {String} eventName The name of the event.\r\n     * @param {any} data Data to be passed to the handler.\r\n     */\r\n    raiseEvent(eventName, data) {\r\n        if(!this._eventListeners[eventName]) {\r\n            return;\r\n        }\r\n\r\n        for(let i = 0; i < this._eventListeners[eventName].length; i++) {\r\n            this._eventListeners[eventName][i](data);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To be overwritten by inheriting classes.\r\n     * \r\n     * @param {any} data \r\n     */\r\n    loaded(data) {\r\n\r\n    }\r\n}\r\n\r\nmodule.exports = FileReaderBase","//@ts-check\r\n\r\nconst FileReaderBase = require('./FileReaderBase');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A class representing a matrix file reader. */\r\nclass MatrixFileReader extends FileReaderBase {\r\n    /**\r\n     * Creates an instance of MatrixFileReader.\r\n     * @param {String} source The source of the file. This is either a input element (type=file) or a URL. If it is a URL, set local to true.\r\n     * @param {any} options Options. See documentation for details.\r\n     * @param {boolean} [local=true] A boolean indicating whether or not the source is local (a file input) or remote (a url).\r\n     */\r\n    constructor(source, options, local = true) {\r\n        super(source, local);\r\n\r\n        this.defaults = {\r\n            elementSeperator: '\\t',\r\n            valueSeparator: ';',\r\n            replaceNaNWith: 'NaN',\r\n            skipNaN: true,\r\n            types: []\r\n        }\r\n\r\n        this.opts = Utils.extend(true, this.defaults, options);\r\n        this.types = this.opts.types;\r\n        this.columns = {};\r\n\r\n        if (this.types.length === 0) {\r\n            throw('When reading data from a file, the types have to be specified.');\r\n        }\r\n\r\n        // Add the types for the indices\r\n        this.opts.types.unshift('Int32Array');\r\n        this.opts.types.unshift('Int32Array');\r\n        this.opts.types.unshift('Int32Array');\r\n    }\r\n\r\n    /**\r\n     * Called when the data is loaded, will raise the \"loaded\" event.\r\n     * \r\n     * @param {any} data The data loaded from the file or url.\r\n     * @returns {MatrixFileReader} Itself.\r\n     */\r\n    loaded(data) {\r\n        data = data.replace('\\n\\n', '\\n');\r\n        data = data.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        if (this.opts.replaceNaNWith !== 'NaN') {\r\n            data = data.replace('NaN', this.opts.replaceNaNWith);\r\n        }\r\n\r\n        let lines = data.split('\\n');\r\n        let nRows = lines.length;\r\n        let nColumns = lines[0].split(this.opts.elementSeperator).length;\r\n        // Including the indices (x, y, z), therefore + 3\r\n        let nValues = lines[0].split(this.opts.elementSeperator)[0].split(this.opts.valueSeparator).length + 3;\r\n        \r\n        if (this.types.length !== nValues || this.types.length + nValues === 0) {\r\n            let values = lines[0].split(this.opts.valueSeparator);\r\n            \r\n            this.types = [];\r\n            for (let i = 0; i < values.length; i++) {\r\n                if(Utils.isFloat(parseFloat(values[i], 10))) {\r\n                    this.types.push('Float32Array');\r\n                } else if (Utils.isInt(parseFloat(values[i], 10))) {\r\n                    this.types.push('Int32Array');\r\n                } else {\r\n                    this.types.push('StringArray');\r\n                }\r\n            }\r\n        }\r\n        \r\n        for (var i = 0; i < nValues; i++) {\r\n            this._createArray(i, this.types[i], nRows * nColumns);\r\n        }\r\n\r\n        let actualLength = 0;\r\n\r\n        for (var i = 0; i < nRows; i++) {\r\n            let row = lines[i].split(this.opts.elementSeperator);\r\n\r\n            if (row.length === 0) {\r\n                continue;\r\n            }\r\n\r\n            for (var j = 0; j < nColumns; j++) {\r\n                if(!row[j]) {\r\n                    continue;\r\n                }\r\n                \r\n                let values = row[j].split(this.opts.valueSeparator);\r\n\r\n                if (this.opts.skipNaN) {\r\n                    let skip = false;\r\n\r\n                    for (var k = 0; k < values.length; k++) {\r\n                        if (isNaN(values[k])) {\r\n                            skip = true;\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    if (skip) {\r\n                        continue;\r\n                    }\r\n                }\r\n\r\n                this.columns[0][actualLength] = i;\r\n                this.columns[1][actualLength] = j;\r\n                // Set zero for 2D matrix\r\n                this.columns[2][actualLength] = 0;\r\n\r\n                for (var k = 0; k < values.length; k++) {\r\n                    this.columns[k + 3][actualLength] = values[k];\r\n                }\r\n\r\n                actualLength++;\r\n            }\r\n        }\r\n\r\n        this._resizeArrays(actualLength);\r\n\r\n        this.raiseEvent('loaded', this.columns);\r\n        \r\n        return this;\r\n    }\r\n\r\n    _resizeArrays(length) {\r\n        // Might need polyfill\r\n        for (var i = 0; i < this.columns.length; i++) {\r\n            this.columns[i] = this.columns[i].slice(0, length);\r\n        }\r\n    }\r\n\r\n    _createArray(index, type, length) {\r\n        if (type == 'Int8Array') {\r\n            this.columns[index] = new Int8Array(length);\r\n        } else if (type == 'Uint8Array') {\r\n            this.columns[index] = new Uint8Array(length);\r\n        } else if (type == 'Uint8ClampedArray') {\r\n            this.columns[index] = new Uint8ClampedArray(length);\r\n        } else if (type == 'Int16Array') {\r\n            this.columns[index] = new Int16Array(length);\r\n        } else if (type == 'Uint16Array') {\r\n            this.columns[index] = new Uint16Array(length);\r\n        } else if (type == 'Int32Array') {\r\n            this.columns[index] = new Int32Array(length);\r\n        } else if (type == 'Uint32Array') {\r\n            this.columns[index] = new Uint32Array(length);\r\n        } else if (type == 'Float32Array') {\r\n            this.columns[index] = new Float32Array(length);\r\n        } else if (type == 'Float64Array') {\r\n            this.columns[index] = new Float64Array(length);\r\n        } else {\r\n            this.columns[index] = new Array(length);\r\n        }\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = MatrixFileReader","const CsvFileReader = require('./CsvFileReader');\r\nconst FileReaderBase = require('./FileReaderBase');\r\nconst MatrixFileReader = require('./MatrixFileReader');\r\n\r\nmodule.exports = {\r\n  CsvFileReader,\r\n  FileReaderBase,\r\n  MatrixFileReader\r\n}","const Core = require('./Core');\r\nconst Controls = require('./Controls');\r\nconst Cameras = require('./Cameras');\r\nconst Filters = require('./Filters');\r\nconst Helpers = require('./Helpers');\r\nconst IO = require('./IO');\r\nconst Math = require('./Math');\r\nconst Shaders = require('./Shaders');\r\nconst Spice = require('./Spice');\r\nconst Utils = require('./Utils').Utils\r\n\r\nmodule.exports = {\r\n  Cameras,\r\n  Controls,\r\n  Core,\r\n  Filters,\r\n  Helpers,\r\n  IO,\r\n  Math,\r\n  Shaders,\r\n  Spice,\r\n  Utils\r\n}","//@ts-check\r\n\r\n\r\n\r\n/** A class representing a 3x3 float matrix */\r\nclass Matrix3f {\r\n    /**\r\n     * The constructor for the class Matrix3f.\r\n     *\r\n     * @param {Float32Array} [entries=new Float32Array()] The Float32Array to which the entries will be set. If no value is provided, the matrix will be initialized to the identity matrix.\r\n     */\r\n    constructor(entries = new Float32Array([1, 0, 0, 0, 1, 0, 0, 0, 1])) {\r\n        this.entries = entries;\r\n    }\r\n\r\n    /**\r\n     * Clones the matrix and returns the clone as a new Matrix3f object.\r\n     *\r\n     * @returns {Matrix3f} The clone.\r\n     */\r\n    clone() {\r\n        return new Matrix3f(new Float32Array(this.entries));\r\n    }\r\n\r\n    /**\r\n     * Compares this matrix to another matrix.\r\n     *\r\n     * @param {Matrix3f} mat A matrix to be compared to this matrix.\r\n     * @returns {boolean} A boolean indicating whether or not the two matrices are identical.\r\n     */\r\n    equals(mat) {\r\n        for (let i = 0; i < this.entries.length; i++) {\r\n            if (this.entries[i] !== mat.entries[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\nmodule.exports = Matrix3f","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f');\r\n\r\n/** A class representing a 4x4 float matrix */\r\nclass Matrix4f {\r\n  // Do NOT go double precision on GPUs!!!\r\n  // See:\r\n  // http://stackoverflow.com/questions/2079906/float-vs-double-on-graphics-hardware\r\n\r\n  /**\r\n   * Creates an instance of Matrix4f.\r\n   * @param {Float32Array} [entries=new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])] \r\n   */\r\n  constructor(entries = new Float32Array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])) {\r\n    this.entries = entries;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * \r\n   * @param {Number} m00 A matrix entry.\r\n   * @param {Number} m10 A matrix entry.\r\n   * @param {Number} m20 A matrix entry.\r\n   * @param {Number} m30 A matrix entry.\r\n   * @param {Number} m01 A matrix entry.\r\n   * @param {Number} m11 A matrix entry.\r\n   * @param {Number} m21 A matrix entry.\r\n   * @param {Number} m31 A matrix entry.\r\n   * @param {Number} m02 A matrix entry.\r\n   * @param {Number} m12 A matrix entry.\r\n   * @param {Number} m22 A matrix entry.\r\n   * @param {Number} m32 A matrix entry.\r\n   * @param {Number} m03 A matrix entry.\r\n   * @param {Number} m13 A matrix entry.\r\n   * @param {Number} m23 A matrix entry.\r\n   * @param {Number} m33 A matrix entry.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  set(m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33) {\r\n    this.entries.set([m00, m10, m20, m30,\r\n      m01, m11, m21, m31,\r\n      m02, m12, m22, m32,\r\n      m03, m13, m23, m33\r\n    ]);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets all entries in the matrix to zero.\r\n   * \r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  setZero() {\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies this matrix with another matrix (a * b).\r\n   * \r\n   * @param {any} b Another matrix.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  multiplyA(b) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n\r\n    let a00 = this.entries[0],\r\n      a01 = this.entries[4],\r\n      a02 = this.entries[8],\r\n      a03 = this.entries[12];\r\n    let a10 = this.entries[1],\r\n      a11 = this.entries[5],\r\n      a12 = this.entries[9],\r\n      a13 = this.entries[13];\r\n    let a20 = this.entries[2],\r\n      a21 = this.entries[6],\r\n      a22 = this.entries[10],\r\n      a23 = this.entries[14];\r\n    let a30 = this.entries[3],\r\n      a31 = this.entries[7],\r\n      a32 = this.entries[11],\r\n      a33 = this.entries[15];\r\n\r\n    let b00 = b.entries[0],\r\n      b01 = b.entries[4],\r\n      b02 = b.entries[8],\r\n      b03 = b.entries[12];\r\n    let b10 = b.entries[1],\r\n      b11 = b.entries[5],\r\n      b12 = b.entries[9],\r\n      b13 = b.entries[13];\r\n    let b20 = b.entries[2],\r\n      b21 = b.entries[6],\r\n      b22 = b.entries[10],\r\n      b23 = b.entries[14];\r\n    let b30 = b.entries[3],\r\n      b31 = b.entries[7],\r\n      b32 = b.entries[11],\r\n      b33 = b.entries[15];\r\n\r\n    this.entries[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n    this.entries[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\r\n    this.entries[2] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\r\n    this.entries[3] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n    this.entries[4] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\r\n    this.entries[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\r\n    this.entries[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\r\n    this.entries[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\r\n    this.entries[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n    this.entries[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\r\n    this.entries[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\r\n    this.entries[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\r\n    this.entries[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n    this.entries[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\r\n    this.entries[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\r\n    this.entries[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiplies another matrix with this matrix (a * b).\r\n   * \r\n   * @param {any} a Another matrix.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  multiplyB(a) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n\r\n    let a00 = a.entries[0],\r\n      a01 = a.entries[4],\r\n      a02 = a.entries[8],\r\n      a03 = a.entries[12];\r\n    let a10 = a.entries[1],\r\n      a11 = a.entries[5],\r\n      a12 = a.entries[9],\r\n      a13 = a.entries[13];\r\n    let a20 = a.entries[2],\r\n      a21 = a.entries[6],\r\n      a22 = a.entries[10],\r\n      a23 = a.entries[14];\r\n    let a30 = a.entries[3],\r\n      a31 = a.entries[7],\r\n      a32 = a.entries[11],\r\n      a33 = a.entries[15];\r\n\r\n    let b00 = this.entries[0],\r\n      b01 = this.entries[4],\r\n      b02 = this.entries[8],\r\n      b03 = this.entries[12];\r\n    let b10 = this.entries[1],\r\n      b11 = this.entries[5],\r\n      b12 = this.entries[9],\r\n      b13 = this.entries[13];\r\n    let b20 = this.entries[2],\r\n      b21 = this.entries[6],\r\n      b22 = this.entries[10],\r\n      b23 = this.entries[14];\r\n    let b30 = this.entries[3],\r\n      b31 = this.entries[7],\r\n      b32 = this.entries[11],\r\n      b33 = this.entries[15];\r\n\r\n    this.entries[0] = a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30;\r\n    this.entries[1] = a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30;\r\n    this.entries[2] = a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30;\r\n    this.entries[3] = a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31;\r\n    this.entries[4] = a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30;\r\n    this.entries[5] = a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31;\r\n    this.entries[6] = a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31;\r\n    this.entries[7] = a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31;\r\n    this.entries[8] = a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32;\r\n    this.entries[9] = a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32;\r\n    this.entries[10] = a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32;\r\n    this.entries[11] = a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32;\r\n    this.entries[12] = a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33;\r\n    this.entries[13] = a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33;\r\n    this.entries[14] = a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33;\r\n    this.entries[15] = a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the scale component of this matrix.\r\n   * \r\n   * @param {Vector3f} vec The scaling vector.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  scale(vec) {\r\n    let x = vec.components[0];\r\n    let y = vec.components[1];\r\n    let z = vec.components[2];\r\n\r\n    this.entries[0] *= x;\r\n    this.entries[1] *= x;\r\n    this.entries[2] *= x;\r\n    this.entries[3] *= x;\r\n\r\n    this.entries[4] *= y;\r\n    this.entries[5] *= y;\r\n    this.entries[6] *= y;\r\n    this.entries[7] *= y;\r\n\r\n    this.entries[8] *= z;\r\n    this.entries[9] *= z;\r\n    this.entries[10] *= z;\r\n    this.entries[11] *= z;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the position component of this matrix.\r\n   * \r\n   * @param {any} vec The position vector.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  setPosition(vec) {\r\n    this.entries[12] = vec.components[0];\r\n    this.entries[13] = vec.components[1];\r\n    this.entries[14] = vec.components[2];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the rotation component of this matrix.\r\n   * \r\n   * @param {Quaternion} q A quaternion representing the rotation.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  setRotation(q) {\r\n    let x = q.components[0];\r\n    let y = q.components[1];\r\n    let z = q.components[2];\r\n    let w = q.components[3];\r\n\r\n    let x2 = x + x,\r\n      y2 = y + y,\r\n      z2 = z + z;\r\n    let xx = x * x2,\r\n      xy = x * y2,\r\n      xz = x * z2;\r\n    let yy = y * y2,\r\n      yz = y * z2,\r\n      zz = z * z2;\r\n    let wx = w * x2,\r\n      wy = w * y2,\r\n      wz = w * z2;\r\n\r\n    this.entries[0] = 1 - (yy + zz);\r\n    this.entries[1] = xy + wz;\r\n    this.entries[2] = xz - wy;\r\n    this.entries[4] = xy - wz;\r\n    this.entries[5] = 1 - (xx + zz);\r\n    this.entries[6] = yz + wx;\r\n    this.entries[8] = xz + wy;\r\n    this.entries[9] = yz - wx;\r\n    this.entries[10] = 1 - (xx + yy);\r\n\r\n    this.entries[3] = 0.0;\r\n    this.entries[7] = 0.0;\r\n    this.entries[11] = 0.0;\r\n    this.entries[12] = 0.0;\r\n    this.entries[13] = 0.0;\r\n    this.entries[14] = 0.0;\r\n    this.entries[15] = 1.0;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the determinant of the matrix.\r\n   * \r\n   * @returns {Number} The determinant of this matrix.\r\n   */\r\n  determinant() {\r\n    let a = this.entries;\r\n    \r\n    let a00 = a.entries[0],\r\n      a01 = a.entries[4],\r\n      a02 = a.entries[8],\r\n      a03 = a.entries[12];\r\n    let a10 = a.entries[1],\r\n      a11 = a.entries[5],\r\n      a12 = a.entries[9],\r\n      a13 = a.entries[13];\r\n    let a20 = a.entries[2],\r\n      a21 = a.entries[6],\r\n      a22 = a.entries[10],\r\n      a23 = a.entries[14];\r\n    let a30 = a.entries[3],\r\n      a31 = a.entries[7],\r\n      a32 = a.entries[11],\r\n      a33 = a.entries[15];\r\n\r\n    return (\r\n      a30 * (\r\n        a03 * a12 * a21 - a02 * a13 * a21 -\r\n        a03 * a11 * a22 + a01 * a13 * a22 +\r\n        a02 * a11 * a23 - a01 * a12 * a23\r\n      ) +\r\n      a31 * (\r\n        a00 * a12 * a23 - a00 * a13 * a22 +\r\n        a03 * a10 * a22 - a02 * a10 * a23 +\r\n        a02 * a13 * a20 - a03 * a12 * a20\r\n      ) +\r\n      a32 * (\r\n        a00 * a13 * a21 - a00 * a11 * a23 -\r\n        a03 * a10 * a21 + a01 * a10 * a23 +\r\n        a03 * a11 * a20 - a01 * a13 * a20\r\n      ) +\r\n      a33 * (-a02 * a11 * a20 - a00 * a12 * a21 +\r\n        a00 * a11 * a22 + a02 * a10 * a21 -\r\n        a01 * a10 * a22 + a01 * a12 * a20\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Decomposes the matrix into its positional, rotational and scaling component.\r\n   * \r\n   * @param {Vector3f} outPosition The positional component will be written to this vector.\r\n   * @param {Quaternion} outQuaternion The rotational component will be written to this quaternion.\r\n   * @param {Vector3f} outScale The scaling component will be written to this vector.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  decompose(outPosition, outQuaternion, outScale) {\r\n    let m = new Matrix4f();\r\n\r\n    // The position is the simple one\r\n    outPosition.set(this.entries[12], this.entries[13], this.entries[14]);\r\n\r\n    // Calculate the scale\r\n    let sx = Math.sqrt(this.entries[0] * this.entries[0] +\r\n      this.entries[1] * this.entries[1] +\r\n      this.entries[2] * this.entries[2]);\r\n\r\n    let sy = Math.sqrt(this.entries[4] * this.entries[4] +\r\n      this.entries[5] * this.entries[5] +\r\n      this.entries[6] * this.entries[6]);\r\n\r\n    let sz = Math.sqrt(this.entries[8] * this.entries[8] +\r\n      this.entries[9] * this.entries[9] +\r\n      this.entries[10] * this.entries[10]);\r\n\r\n    let det = this.determinant();\r\n\r\n    if (det < 0) {\r\n      sx = -sx;\r\n    }\r\n\r\n    // Set the scale\r\n    outScale.set(sx, sy, sz);\r\n\r\n    // Get the info for the quaternion, this involves scaling the rotation\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/\r\n    let isx = 1.0 / sx;\r\n    let isy = 1.0 / sy;\r\n    let isz = 1.0 / sz;\r\n\r\n    m.entries.set(this.entries);\r\n\r\n    m.entries[0] *= isx;\r\n    m.entries[1] *= isx;\r\n    m.entries[2] *= isx;\r\n\r\n    m.entries[4] *= isy;\r\n    m.entries[5] *= isy;\r\n    m.entries[6] *= isy;\r\n\r\n    m.entries[8] *= isz;\r\n    m.entries[9] *= isz;\r\n    m.entries[10] *= isz;\r\n\r\n    outQuaternion.setFromMatrix(m);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Composes the matrix from the positional, rotational and scaling components.\r\n   * \r\n   * @param {Vector3f} position The positional component.\r\n   * @param {Quaternion} quaternion The rotational component.\r\n   * @param {Vector3f} scale The scaling component.\r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  compose(position, quaternion, scale) {\r\n    this.setRotation(quaternion);\r\n    this.scale(scale);\r\n    this.setPosition(position);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Inverts this matrix.\r\n   * \r\n   * @returns {Matrix4f} Returns itself.\r\n   */\r\n  invert() {\r\n    // Fugly implementation lifted from MESA (originally in C++)\r\n    let im = new Matrix4f();\r\n    let m = this.entries;\r\n\r\n    im.entries[0] = m[5] * m[10] * m[15] -\r\n      m[5] * m[11] * m[14] -\r\n      m[9] * m[6] * m[15] +\r\n      m[9] * m[7] * m[14] +\r\n      m[13] * m[6] * m[11] -\r\n      m[13] * m[7] * m[10];\r\n\r\n    im.entries[4] = -m[4] * m[10] * m[15] +\r\n      m[4] * m[11] * m[14] +\r\n      m[8] * m[6] * m[15] -\r\n      m[8] * m[7] * m[14] -\r\n      m[12] * m[6] * m[11] +\r\n      m[12] * m[7] * m[10];\r\n\r\n    im.entries[8] = m[4] * m[9] * m[15] -\r\n      m[4] * m[11] * m[13] -\r\n      m[8] * m[5] * m[15] +\r\n      m[8] * m[7] * m[13] +\r\n      m[12] * m[5] * m[11] -\r\n      m[12] * m[7] * m[9];\r\n\r\n    im.entries[12] = -m[4] * m[9] * m[14] +\r\n      m[4] * m[10] * m[13] +\r\n      m[8] * m[5] * m[14] -\r\n      m[8] * m[6] * m[13] -\r\n      m[12] * m[5] * m[10] +\r\n      m[12] * m[6] * m[9];\r\n\r\n    im.entries[1] = -m[1] * m[10] * m[15] +\r\n      m[1] * m[11] * m[14] +\r\n      m[9] * m[2] * m[15] -\r\n      m[9] * m[3] * m[14] -\r\n      m[13] * m[2] * m[11] +\r\n      m[13] * m[3] * m[10];\r\n\r\n    im.entries[5] = m[0] * m[10] * m[15] -\r\n      m[0] * m[11] * m[14] -\r\n      m[8] * m[2] * m[15] +\r\n      m[8] * m[3] * m[14] +\r\n      m[12] * m[2] * m[11] -\r\n      m[12] * m[3] * m[10];\r\n\r\n    im.entries[9] = -m[0] * m[9] * m[15] +\r\n      m[0] * m[11] * m[13] +\r\n      m[8] * m[1] * m[15] -\r\n      m[8] * m[3] * m[13] -\r\n      m[12] * m[1] * m[11] +\r\n      m[12] * m[3] * m[9];\r\n\r\n    im.entries[13] = m[0] * m[9] * m[14] -\r\n      m[0] * m[10] * m[13] -\r\n      m[8] * m[1] * m[14] +\r\n      m[8] * m[2] * m[13] +\r\n      m[12] * m[1] * m[10] -\r\n      m[12] * m[2] * m[9];\r\n\r\n    im.entries[2] = m[1] * m[6] * m[15] -\r\n      m[1] * m[7] * m[14] -\r\n      m[5] * m[2] * m[15] +\r\n      m[5] * m[3] * m[14] +\r\n      m[13] * m[2] * m[7] -\r\n      m[13] * m[3] * m[6];\r\n\r\n    im.entries[6] = -m[0] * m[6] * m[15] +\r\n      m[0] * m[7] * m[14] +\r\n      m[4] * m[2] * m[15] -\r\n      m[4] * m[3] * m[14] -\r\n      m[12] * m[2] * m[7] +\r\n      m[12] * m[3] * m[6];\r\n\r\n    im.entries[10] = m[0] * m[5] * m[15] -\r\n      m[0] * m[7] * m[13] -\r\n      m[4] * m[1] * m[15] +\r\n      m[4] * m[3] * m[13] +\r\n      m[12] * m[1] * m[7] -\r\n      m[12] * m[3] * m[5];\r\n\r\n    im.entries[14] = -m[0] * m[5] * m[14] +\r\n      m[0] * m[6] * m[13] +\r\n      m[4] * m[1] * m[14] -\r\n      m[4] * m[2] * m[13] -\r\n      m[12] * m[1] * m[6] +\r\n      m[12] * m[2] * m[5];\r\n\r\n    im.entries[3] = -m[1] * m[6] * m[11] +\r\n      m[1] * m[7] * m[10] +\r\n      m[5] * m[2] * m[11] -\r\n      m[5] * m[3] * m[10] -\r\n      m[9] * m[2] * m[7] +\r\n      m[9] * m[3] * m[6];\r\n\r\n    im.entries[7] = m[0] * m[6] * m[11] -\r\n      m[0] * m[7] * m[10] -\r\n      m[4] * m[2] * m[11] +\r\n      m[4] * m[3] * m[10] +\r\n      m[8] * m[2] * m[7] -\r\n      m[8] * m[3] * m[6];\r\n\r\n    im.entries[11] = -m[0] * m[5] * m[11] +\r\n      m[0] * m[7] * m[9] +\r\n      m[4] * m[1] * m[11] -\r\n      m[4] * m[3] * m[9] -\r\n      m[8] * m[1] * m[7] +\r\n      m[8] * m[3] * m[5];\r\n\r\n    im.entries[15] = m[0] * m[5] * m[10] -\r\n      m[0] * m[6] * m[9] -\r\n      m[4] * m[1] * m[10] +\r\n      m[4] * m[2] * m[9] +\r\n      m[8] * m[1] * m[6] -\r\n      m[8] * m[2] * m[5];\r\n\r\n    let det = m[0] * im.entries[0] +\r\n      m[1] * im.entries[4] +\r\n      m[2] * im.entries[8] +\r\n      m[3] * im.entries[12];\r\n\r\n    if (det == 0) {\r\n      throw 'Determinant is zero.';\r\n    }\r\n\r\n    det = 1.0 / det;\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n      this.entries[i] = im.entries[i] * det;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Projects the vector from world space into camera space.\r\n   * \r\n   * @param {Vector3f} v A vector to project.\r\n   * @param {CameraBase} camera A camera instance.\r\n   * @returns {Vector3f} The vector in camera space.\r\n   */\r\n  static projectVector(v, camera) {\r\n      return v.applyProjection(Matrix4f.multiply(camera.projectionMatrix, Matrix4f.invert(camera.modelMatrix)));\r\n  }\r\n\r\n  /**\r\n   * Projects the vector from camera space into world space.\r\n   * \r\n   * @param {Vector3f} v A vector to unproject.\r\n   * @param {CameraBase} camera A camera instance.\r\n   * @returns {Vector3f} The vector in world space.\r\n   */\r\n  static unprojectVector(v, camera) {\r\n      return v.applyProjection(Matrix4f.multiply(camera.modelMatrix, Matrix4f.invert(camera.projectionMatrix)));\r\n  }\r\n\r\n  /**\r\n   * Clones this matrix.\r\n   * \r\n   * @returns {Matrix4f} A clone of the matrix.\r\n   */\r\n  clone() {\r\n    return new Matrix4f(new Float32Array(this.entries));\r\n  }\r\n\r\n  /**\r\n   * Checks whether or not the entries of the two matrices match.\r\n   * \r\n   * @param {Matrix4f} a A matrix.\r\n   * @returns {Boolean} A boolean indicating whether or not the entries of the two matrices match.\r\n   */\r\n  equals(a) {\r\n    for (let i = 0; i < this.entries.length; i++) {\r\n      if (this.entries[i] !== a.entries[i]) return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of the matrix.\r\n   * \r\n   * @returns {String} The string representation of this matrix.\r\n   */\r\n  toString() {\r\n    let str = this.entries[0] + ', ' + this.entries[4] + ', ' + this.entries[8] + ', ' + this.entries[12] + '\\n';\r\n    str += this.entries[1] + ', ' + this.entries[5] + ', ' + this.entries[9] + ', ' + this.entries[13] + '\\n';\r\n    str += this.entries[2] + ', ' + this.entries[6] + ', ' + this.entries[10] + ', ' + this.entries[14] + '\\n';\r\n    str += this.entries[3] + ', ' + this.entries[7] + ', ' + this.entries[11] + ', ' + this.entries[15] + '\\n';\r\n\r\n    return str;\r\n  }\r\n\r\n  /**\r\n   * Multiply the two matrices (a * b).\r\n   * \r\n   * @static\r\n   * @param {any} a A matrix to be multiplied.\r\n   * @param {any} b A matrix to be multiplied.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static multiply(a, b) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n\r\n    let a00 = a.entries[0],\r\n      a01 = a.entries[4],\r\n      a02 = a.entries[8],\r\n      a03 = a.entries[12];\r\n    let a10 = a.entries[1],\r\n      a11 = a.entries[5],\r\n      a12 = a.entries[9],\r\n      a13 = a.entries[13];\r\n    let a20 = a.entries[2],\r\n      a21 = a.entries[6],\r\n      a22 = a.entries[10],\r\n      a23 = a.entries[14];\r\n    let a30 = a.entries[3],\r\n      a31 = a.entries[7],\r\n      a32 = a.entries[11],\r\n      a33 = a.entries[15];\r\n\r\n    let b00 = b.entries[0],\r\n      b01 = b.entries[4],\r\n      b02 = b.entries[8],\r\n      b03 = b.entries[12];\r\n    let b10 = b.entries[1],\r\n      b11 = b.entries[5],\r\n      b12 = b.entries[9],\r\n      b13 = b.entries[13];\r\n    let b20 = b.entries[2],\r\n      b21 = b.entries[6],\r\n      b22 = b.entries[10],\r\n      b23 = b.entries[14];\r\n    let b30 = b.entries[3],\r\n      b31 = b.entries[7],\r\n      b32 = b.entries[11],\r\n      b33 = b.entries[15];\r\n\r\n    return new Matrix4f(new Float32Array([\r\n      a00 * b00 + a01 * b10 + a02 * b20 + a03 * b30,\r\n      a10 * b00 + a11 * b10 + a12 * b20 + a13 * b30,\r\n      a20 * b00 + a21 * b10 + a22 * b20 + a23 * b30,\r\n      a30 * b00 + a31 * b10 + a32 * b20 + a33 * b30,\r\n      a00 * b01 + a01 * b11 + a02 * b21 + a03 * b31,\r\n      a10 * b01 + a11 * b11 + a12 * b21 + a13 * b31,\r\n      a20 * b01 + a21 * b11 + a22 * b21 + a23 * b31,\r\n      a30 * b01 + a31 * b11 + a32 * b21 + a33 * b31,\r\n      a00 * b02 + a01 * b12 + a02 * b22 + a03 * b32,\r\n      a10 * b02 + a11 * b12 + a12 * b22 + a13 * b32,\r\n      a20 * b02 + a21 * b12 + a22 * b22 + a23 * b32,\r\n      a30 * b02 + a31 * b12 + a32 * b22 + a33 * b32,\r\n      a00 * b03 + a01 * b13 + a02 * b23 + a03 * b33,\r\n      a10 * b03 + a11 * b13 + a12 * b23 + a13 * b33,\r\n      a20 * b03 + a21 * b13 + a22 * b23 + a23 * b33,\r\n      a30 * b03 + a31 * b13 + a32 * b23 + a33 * b33\r\n    ]));\r\n  }\r\n\r\n  /**\r\n   * Initialize a matrix from a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static fromQuaternion(q) {\r\n    // First, store the values in local variables.\r\n    // See:\r\n    // http://blog.tojicode.com/2010/06/stupidly-fast-webgl-matricies.html\r\n    // https://en.wikipedia.org/wiki/Quaternions_and_spatial_rotation#Quaternion-derived_rotation_matrix\r\n    let x = q.components[0],\r\n      y = q.components[1],\r\n      z = q.components[2],\r\n      w = q.components[3];\r\n    let x2 = x + x,\r\n      y2 = y + y,\r\n      z2 = z + z;\r\n    let xx = x * x2,\r\n      xy = x * y2,\r\n      xz = x * z2;\r\n    let yy = y * y2,\r\n      yz = y * z2,\r\n      zz = z * z2;\r\n    let wx = w * x2,\r\n      wy = w * y2,\r\n      wz = w * z2;\r\n\r\n    return new Matrix4f(new Float32Array([\r\n      1 - (yy + zz), xy + wz, xz - wy, 0,\r\n      xy - wz, 1 - (xx + zz), yz + wx, 0,\r\n      xz + wy, yz - wx, 1 - (xx + yy), 0,\r\n      0, 0, 0, 1\r\n    ]));\r\n  }\r\n\r\n  /**\r\n   * Create a lookat matrix for a camera.\r\n   * \r\n   * @static\r\n   * @param {Vector3f} cameraPosition The position of the camera.\r\n   * @param {Vector3f} target The lookat (target) of the camera.\r\n   * @param {Vector3f} up The up vector of the camera node.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static lookAt(cameraPosition, target, up) {\r\n    // See here in order to return a quaternion directly:\r\n    // http://www.euclideanspace.com/maths/algebra/vectors/lookat/\r\n    let z = Vector3f.subtract(cameraPosition, target).normalize();\r\n\r\n    if (z.lengthSq() === 0.0) {\r\n      z.components[2] = 1.0\r\n    }\r\n\r\n    let x = Vector3f.cross(up, z).normalize();\r\n\r\n    if (x.lengthSq() === 0.0) {\r\n      z.components[2] += 0.0001;\r\n      x = Vector3f.cross(up, z).normalize();\r\n    }\r\n\r\n    let y = Vector3f.cross(z, x);\r\n\r\n    return new Matrix4f(new Float32Array([\r\n      x.components[0], x.components[1], x.components[2], 0,\r\n      y.components[0], y.components[1], y.components[2], 0,\r\n      z.components[0], z.components[1], z.components[2], 0,\r\n      0, 0, 0, 1\r\n    ]));\r\n  }\r\n\r\n  /**\r\n   * Composes a matrix from the positional, rotational and scaling components.\r\n   * \r\n   * @param {Vector3f} position The positional component.\r\n   * @param {Quaternion} quaternion The rotational component.\r\n   * @param {Vector3f} scale The scaling component.\r\n   * @returns {Matrix4f} A matrix.\r\n   */\r\n  static compose(position, quaternion, scale) {\r\n    let m = new Matrix4f();\r\n\r\n    m.setRotation(quaternion);\r\n    m.scale(scale);\r\n    m.setPosition(position);\r\n\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Inverts a matrix.\r\n   * \r\n   * @static\r\n   * @param {Matrix4f} matrix A matrix to be inverted.\r\n   * @returns The inverted matrix.\r\n   */\r\n  static invert(matrix) {\r\n    // Fugly implementation lifted from MESA (originally in C++)\r\n    let im = new Matrix4f();\r\n\r\n    let m = matrix.entries;\r\n\r\n    im.entries[0] = m[5] * m[10] * m[15] -\r\n      m[5] * m[11] * m[14] -\r\n      m[9] * m[6] * m[15] +\r\n      m[9] * m[7] * m[14] +\r\n      m[13] * m[6] * m[11] -\r\n      m[13] * m[7] * m[10];\r\n\r\n    im.entries[4] = -m[4] * m[10] * m[15] +\r\n      m[4] * m[11] * m[14] +\r\n      m[8] * m[6] * m[15] -\r\n      m[8] * m[7] * m[14] -\r\n      m[12] * m[6] * m[11] +\r\n      m[12] * m[7] * m[10];\r\n\r\n    im.entries[8] = m[4] * m[9] * m[15] -\r\n      m[4] * m[11] * m[13] -\r\n      m[8] * m[5] * m[15] +\r\n      m[8] * m[7] * m[13] +\r\n      m[12] * m[5] * m[11] -\r\n      m[12] * m[7] * m[9];\r\n\r\n    im.entries[12] = -m[4] * m[9] * m[14] +\r\n      m[4] * m[10] * m[13] +\r\n      m[8] * m[5] * m[14] -\r\n      m[8] * m[6] * m[13] -\r\n      m[12] * m[5] * m[10] +\r\n      m[12] * m[6] * m[9];\r\n\r\n    im.entries[1] = -m[1] * m[10] * m[15] +\r\n      m[1] * m[11] * m[14] +\r\n      m[9] * m[2] * m[15] -\r\n      m[9] * m[3] * m[14] -\r\n      m[13] * m[2] * m[11] +\r\n      m[13] * m[3] * m[10];\r\n\r\n    im.entries[5] = m[0] * m[10] * m[15] -\r\n      m[0] * m[11] * m[14] -\r\n      m[8] * m[2] * m[15] +\r\n      m[8] * m[3] * m[14] +\r\n      m[12] * m[2] * m[11] -\r\n      m[12] * m[3] * m[10];\r\n\r\n    im.entries[9] = -m[0] * m[9] * m[15] +\r\n      m[0] * m[11] * m[13] +\r\n      m[8] * m[1] * m[15] -\r\n      m[8] * m[3] * m[13] -\r\n      m[12] * m[1] * m[11] +\r\n      m[12] * m[3] * m[9];\r\n\r\n    im.entries[13] = m[0] * m[9] * m[14] -\r\n      m[0] * m[10] * m[13] -\r\n      m[8] * m[1] * m[14] +\r\n      m[8] * m[2] * m[13] +\r\n      m[12] * m[1] * m[10] -\r\n      m[12] * m[2] * m[9];\r\n\r\n    im.entries[2] = m[1] * m[6] * m[15] -\r\n      m[1] * m[7] * m[14] -\r\n      m[5] * m[2] * m[15] +\r\n      m[5] * m[3] * m[14] +\r\n      m[13] * m[2] * m[7] -\r\n      m[13] * m[3] * m[6];\r\n\r\n    im.entries[6] = -m[0] * m[6] * m[15] +\r\n      m[0] * m[7] * m[14] +\r\n      m[4] * m[2] * m[15] -\r\n      m[4] * m[3] * m[14] -\r\n      m[12] * m[2] * m[7] +\r\n      m[12] * m[3] * m[6];\r\n\r\n    im.entries[10] = m[0] * m[5] * m[15] -\r\n      m[0] * m[7] * m[13] -\r\n      m[4] * m[1] * m[15] +\r\n      m[4] * m[3] * m[13] +\r\n      m[12] * m[1] * m[7] -\r\n      m[12] * m[3] * m[5];\r\n\r\n    im.entries[14] = -m[0] * m[5] * m[14] +\r\n      m[0] * m[6] * m[13] +\r\n      m[4] * m[1] * m[14] -\r\n      m[4] * m[2] * m[13] -\r\n      m[12] * m[1] * m[6] +\r\n      m[12] * m[2] * m[5];\r\n\r\n    im.entries[3] = -m[1] * m[6] * m[11] +\r\n      m[1] * m[7] * m[10] +\r\n      m[5] * m[2] * m[11] -\r\n      m[5] * m[3] * m[10] -\r\n      m[9] * m[2] * m[7] +\r\n      m[9] * m[3] * m[6];\r\n\r\n    im.entries[7] = m[0] * m[6] * m[11] -\r\n      m[0] * m[7] * m[10] -\r\n      m[4] * m[2] * m[11] +\r\n      m[4] * m[3] * m[10] +\r\n      m[8] * m[2] * m[7] -\r\n      m[8] * m[3] * m[6];\r\n\r\n    im.entries[11] = -m[0] * m[5] * m[11] +\r\n      m[0] * m[7] * m[9] +\r\n      m[4] * m[1] * m[11] -\r\n      m[4] * m[3] * m[9] -\r\n      m[8] * m[1] * m[7] +\r\n      m[8] * m[3] * m[5];\r\n\r\n    im.entries[15] = m[0] * m[5] * m[10] -\r\n      m[0] * m[6] * m[9] -\r\n      m[4] * m[1] * m[10] +\r\n      m[4] * m[2] * m[9] +\r\n      m[8] * m[1] * m[6] -\r\n      m[8] * m[2] * m[5];\r\n\r\n    let det = m[0] * im.entries[0] +\r\n      m[1] * im.entries[4] +\r\n      m[2] * im.entries[8] +\r\n      m[3] * im.entries[12];\r\n\r\n    if (det == 0) {\r\n      throw 'Determinant is zero.';\r\n    }\r\n\r\n    det = 1.0 / det;\r\n\r\n    for (let i = 0; i < 16; i++) {\r\n      im.entries[i] = im.entries[i] * det;\r\n    }\r\n\r\n    return im;\r\n  }\r\n}\r\n\r\nmodule.exports = Matrix4f","//@ts-check\r\n\r\nconst Matrix4f = require('./Matrix4f');\r\nconst Utils = require('../Utils/Utils');\r\n\r\n/** A class representing a projection matrix */\r\nclass ProjectionMatrix extends Matrix4f {\r\n    /**\r\n     * Set the projection matrix to an orthographic projection.\r\n     *\r\n     * @param {number} left The left edge.\r\n     * @param {number} right The right edge.\r\n     * @param {number} top The top edge.\r\n     * @param {number} bottom The bottom edge.\r\n     * @param {number} near The near-cutoff value.\r\n     * @param {number} far The far-cutoff value.\r\n     * @returns {ProjectionMatrix} Returns this projection matrix.\r\n     */\r\n    setOrthographic(left, right, top, bottom, near, far) {\r\n        let w = 1.0 / (right - left);\r\n        let h = 1.0 / (top - bottom);\r\n        let d = 1.0 / (far - near);\r\n\r\n        let x = (right + left) * w;\r\n        let y = (top + bottom) * h;\r\n        let z = (far + near) * d;\r\n\r\n        this.setZero();\r\n\r\n        this.entries[0] = 2 * w;\r\n        this.entries[4] = 0;\r\n        this.entries[8] = 0;\r\n        this.entries[12] = -x;\r\n        this.entries[1] = 0;\r\n        this.entries[5] = 2 * h;\r\n        this.entries[9] = 0;\r\n        this.entries[13] = -y;\r\n        this.entries[2] = 0;\r\n        this.entries[6] = 0;\r\n        this.entries[10] = -2 * d;\r\n        this.entries[14] = -z;\r\n        this.entries[3] = 0;\r\n        this.entries[7] = 0;\r\n        this.entries[11] = 0;\r\n        this.entries[15] = 1;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the projection matrix to a perspective projection.\r\n     *\r\n     * @param {number} fov The field of view.\r\n     * @param {number} aspect The aspect ratio (width / height).\r\n     * @param {number} near The near-cutoff value.\r\n     * @param {number} far The far-cutoff value.\r\n     * @returns {ProjectionMatrix} Returns this projection matrix.\r\n     */\r\n    setPerspective(fov, aspect, near, far) {\r\n        let range = near - far;\r\n        let tanHalfFov = Math.tan(Utils.DEG2RAD * 0.5 * fov);\r\n        \r\n        let top = near * tanHalfFov;\r\n        let height = 2.0 * top;\r\n        let width = aspect * height;\r\n        let left = -width / 2.0;\r\n        let right = left + width;\r\n        let bottom = top - height;\r\n        // let bottom = -top;\r\n        // let right = top * aspect;\r\n        // let left = -right;\r\n\r\n        let x = 2.0 * near / (right - left);\r\n        let y = 2.0 * near / (top - bottom);\r\n\r\n        let a = (right + left) / (right - left);\r\n        let b = (top + bottom) / (top - bottom);\r\n        let c = -(far + near) / (far - near);\r\n        let d = -2 * far * near / (far - near);\r\n        \r\n        this.setZero();\r\n\r\n        this.entries[0] = x;\r\n        this.entries[4] = 0;\r\n        this.entries[8] = a;\r\n        this.entries[12] = 0;\r\n        this.entries[1] = 0;\r\n        this.entries[5] = y;\r\n        this.entries[9] = b;\r\n        this.entries[13] = 0;\r\n        this.entries[2] = 0;\r\n        this.entries[6] = 0;\r\n        this.entries[10] = c;\r\n        this.entries[14] = d;\r\n        this.entries[3] = 0;\r\n        this.entries[7] = 0;\r\n        this.entries[11] = -1;\r\n        this.entries[15] = 0;\r\n\r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = ProjectionMatrix","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f');\r\nconst Matrix4f = require('./Matrix4f');\r\n\r\n/** \r\n * A class representing a quaternion.\r\n * \r\n * @property {Float32Array} components A typed array storing the components of this quaternion.\r\n */\r\nclass Quaternion {\r\n  /**\r\n   * Creates an instance of Quaternion.\r\n   * @param {Number} x The x component of the quaternion.\r\n   * @param {Number} y The y component of the quaternion.\r\n   * @param {Number} z The z component of the quaternion.\r\n   * @param {Number} w The w component of the quaternion.\r\n   */\r\n  constructor(x, y, z, w) {\r\n    if (arguments.length === 1) {\r\n      this.components = new Float32Array(x);\r\n    } else if (arguments.length === 2) {\r\n      this.components = new Float32Array(4);\r\n      this.setFromAxisAngle(x, y);\r\n    } else {\r\n      this.components = new Float32Array(4);\r\n      this.components[0] = x || 0.0;\r\n      this.components[1] = y || 0.0;\r\n      this.components[2] = z || 0.0;\r\n      this.components[3] = (w !== undefined) ? w : 1.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the x component of this quaternion.\r\n   * \r\n   * @returns {Number} The x component of this quaternion.\r\n   */\r\n  getX() {\r\n    return this.components[0];\r\n  }\r\n\r\n  /**\r\n   * Get the y component of this quaternion.\r\n   * \r\n   * @returns {Number} The y component of this quaternion.\r\n   */\r\n  getY() {\r\n    return this.components[1];\r\n  }\r\n\r\n  /**\r\n   * Get the z component of this quaternion.\r\n   * \r\n   * @returns {Number} The z component of this quaternion.\r\n   */\r\n  getZ() {\r\n    return this.components[2];\r\n  }\r\n\r\n  /**\r\n   * Get the w component of this quaternion.\r\n   * \r\n   * @returns {Number} The w component of this quaternion.\r\n   */\r\n  getW() {\r\n    return this.components[3];\r\n  }\r\n\r\n  /**\r\n   * Set the components of this quaternion.\r\n   * \r\n   * @param {Number} x The x component of this quaternion.\r\n   * @param {Number} y The y component of this quaternion.\r\n   * @param {Number} z The z component of this quaternion.\r\n   * @param {Number} w The w component of this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  set(x, y, z, w) {\r\n    this.components[0] = x;\r\n    this.components[1] = y;\r\n    this.components[2] = z;\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the x component of this quaternion.\r\n   * \r\n   * @param {Number} x The x component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setX(x) {\r\n    this.components[0] = x;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the y component of this quaternion.\r\n   * \r\n   * @param {Number} y The y component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setY(y) {\r\n    this.components[1] = y;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the z component of this quaternion.\r\n   * \r\n   * @param {Number} z The z component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setZ(z) {\r\n    this.components[2] = z;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the w component of this quaternion.\r\n   * \r\n   * @param {Number} w The w component of this quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setW(w) {\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the quaternion from the axis angle representation.\r\n   * \r\n   * @param {Vector3f} axis The axis component.\r\n   * @param {Number} angle The angle component.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setFromAxisAngle(axis, angle) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n    // Normalize the axis. The resulting quaternion will be normalized as well\r\n    let normAxis = Vector3f.normalize(axis);\r\n    let halfAngle = angle / 2.0;\r\n    let sinHalfAngle = Math.sin(halfAngle);\r\n\r\n    this.components[0] = normAxis.components[0] * sinHalfAngle;\r\n    this.components[1] = normAxis.components[1] * sinHalfAngle;\r\n    this.components[2] = normAxis.components[2] * sinHalfAngle;\r\n    this.components[3] = Math.cos(halfAngle);\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sets the quaternion from unit vectors.\r\n   * \r\n   * @param {Vector3f} from The from vector.\r\n   * @param {Vector3f} to The to vector.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setFromUnitVectors(from, to) {\r\n    let v = null;\r\n    let r = from.dot(to) + 1;\r\n\r\n    if (r < 0.000001) {\r\n      v = new Vector3f(0.0, 0.0, 0.0);\r\n      r = 0;\r\n      if (Math.abs(from.components[0]) > Math.abs(from.components[2]))\r\n        v.set(-from.components[1], from.components[0], 0);\r\n      else\r\n        v.set(0, -from.components[2], from.components[1]);\r\n    } else {\r\n      v = Vector3f.cross(from, to);\r\n    }\r\n\r\n    this.set(v.components[0], v.components[1], v.components[2], r);\r\n    this.normalize();\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Set the quaternion based facing in a destionation direction.\r\n   * \r\n   * @param {Vector3f} source The source vector (the position).\r\n   * @param {Vector3f} dest The destination vector.\r\n   * @param {Vector3f} up The up vector of the source.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  lookAt(source, dest, up) {\r\n    this.setFromMatrix(Matrix4f.lookAt(source, dest, up));\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the square length of the quaternion.\r\n   * \r\n   * @returns {Number} The square of the length.\r\n   */\r\n  lengthSq() {\r\n    return this.components[0] * this.components[0] +\r\n      this.components[1] * this.components[1] +\r\n      this.components[2] * this.components[2] +\r\n      this.components[3] * this.components[3];\r\n  }\r\n\r\n  /**\r\n   * Get the length of this quaternion.\r\n   * \r\n   * @returns {Number} The length.\r\n   */\r\n  length() {\r\n    return Math.sqrt(this.lengthSq());\r\n  }\r\n\r\n  /**\r\n   * Get the inverse of this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  inverse() {\r\n    return this.conjugate().normalize();\r\n  }\r\n\r\n  /**\r\n   * Normalizes this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  normalize() {\r\n    let length = this.length();\r\n\r\n    if (length === 0) {\r\n      this.components[0] = 0.0;\r\n      this.components[1] = 0.0;\r\n      this.components[2] = 0.0;\r\n      this.components[3] = 1.0;\r\n    } else {\r\n      let inv = 1 / length;\r\n      this.components[0] *= inv;\r\n      this.components[1] *= inv;\r\n      this.components[2] *= inv;\r\n      this.components[3] *= inv;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Get the dot product of this and another quaternion.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Number} The dot product.\r\n   */\r\n  dot(q) {\r\n    return this.components[0] * q.components[0] +\r\n      this.components[1] * q.components[1] +\r\n      this.components[2] * q.components[2] +\r\n      this.components[3] * q.components[3];\r\n  }\r\n\r\n  /**\r\n   * Multiply this quaternion with another (a * b).\r\n   * \r\n   * @param {Quaternion} b Another quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  multiplyA(b) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n    let x = this.components[0] * b.components[3] + this.components[3] * b.components[0] + this.components[1] * b.components[2] - this.components[2] * b.components[1];\r\n    let y = this.components[1] * b.components[3] + this.components[3] * b.components[1] + this.components[2] * b.components[0] - this.components[0] * b.components[2];\r\n    let z = this.components[2] * b.components[3] + this.components[3] * b.components[2] + this.components[0] * b.components[1] - this.components[1] * b.components[0];\r\n    let w = this.components[3] * b.components[3] - this.components[0] * b.components[0] - this.components[1] * b.components[1] - this.components[2] * b.components[2];\r\n\r\n    this.components[0] = x;\r\n    this.components[1] = y;\r\n    this.components[2] = z;\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiply another with this quaternion (a * b).\r\n   * \r\n   * @param {Quaternion} a Another quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  multiplyB(a) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n    let x = a.components[0] * this.components[3] + a.components[3] * this.components[0] + a.components[1] * this.components[2] - a.components[2] * this.components[1];\r\n    let y = a.components[1] * this.components[3] + a.components[3] * this.components[1] + a.components[2] * this.components[0] - a.components[0] * this.components[2];\r\n    let z = a.components[2] * this.components[3] + a.components[3] * this.components[2] + a.components[0] * this.components[1] - a.components[1] * this.components[0];\r\n    let w = a.components[3] * this.components[3] - a.components[0] * this.components[0] - a.components[1] * this.components[1] - a.components[2] * this.components[2];\r\n\r\n    this.components[0] = x;\r\n    this.components[1] = y;\r\n    this.components[2] = z;\r\n    this.components[3] = w;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Multiply this quaternion with a scalar.\r\n   * \r\n   * @param {Number} s A scalar.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  multiplyScalar(s) {\r\n    this.components[0] *= s;\r\n    this.components[1] *= s;\r\n    this.components[2] *= s;\r\n    this.components[3] *= s;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Conjugate (* -1) this quaternion.\r\n   * \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  conjugate() {\r\n    // See:\r\n    // http://www.3dgep.com/understanding-quaternions/#Quaternion_Conjugate\r\n    this.components[0] *= -1;\r\n    this.components[1] *= -1;\r\n    this.components[2] *= -1;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Add another quaternion to this one.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  add(q) {\r\n    this.components[0] += q.components[0];\r\n    this.components[1] += q.components[1];\r\n    this.components[2] += q.components[2];\r\n    this.components[3] += q.components[3];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Subtract another quaternion from this one.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  subtract(q) {\r\n    this.components[0] -= q.components[0];\r\n    this.components[1] -= q.components[1];\r\n    this.components[2] -= q.components[2];\r\n    this.components[3] -= q.components[3];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Rotate this quaternion around the x axis.\r\n   * \r\n   * @param {Number} angle An angle in radians.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  rotateX(angle) {\r\n    let halfAngle = angle / 2.0;\r\n    return this.multiplyA(\r\n      new Quaternion(Math.sin(halfAngle), 0.0, 0.0, Math.cos(halfAngle))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rotate this quaternion around the y axis.\r\n   * \r\n   * @param {Number} angle An angle in radians.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  rotateY(angle) {\r\n    let halfAngle = angle / 2.0;\r\n    return this.multiplyA(\r\n      new Quaternion(0.0, Math.sin(halfAngle), 0.0, Math.cos(halfAngle))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Rotate this quaternion around the y axis.\r\n   * \r\n   * @param {Number} angle An angle in radians.\r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  rotateZ(angle) {\r\n    let halfAngle = angle / 2.0;\r\n    return this.multiplyA(\r\n      new Quaternion(0.0, 0.0, Math.sin(halfAngle), Math.cos(halfAngle))\r\n    );\r\n  }\r\n\r\n  toAxisAngle() {\r\n    // It seems like this isn't numerically stable. This could be solved\r\n    // by some checks as described here:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/\r\n    // or here:\r\n    // https://www.flipcode.com/documents/matrfaq.html#Q57\r\n    // However, this function currently isn't used.\r\n    console.warn('The method toAxisAngle() has not been implemented.')\r\n  }\r\n\r\n  /**\r\n   * Create a rotation matrix from this quaternion.\r\n   * \r\n   * @returns {Matrix4f} A rotation matrix representation of this quaternion.\r\n   */\r\n  toRotationMatrix() {\r\n    let i = this.components[0];\r\n    let j = this.components[1];\r\n    let k = this.components[2];\r\n    let r = this.components[3];\r\n\r\n    let ii = i * i;\r\n    let ij = i * j;\r\n    let ik = i * k;\r\n    let ir = i * r;\r\n\r\n    let jr = j * r;\r\n    let jj = j * j;\r\n    let jk = j * k;\r\n\r\n    let kk = k * k;\r\n    let kr = k * r;\r\n\r\n    let mat = new Matrix4f();\r\n\r\n    mat.entries[0] = 1 - 2 * (jj + kk);\r\n    mat.entries[1] = 2 * (ij + kr);\r\n    mat.entries[2] = 2 * (ik - jr);\r\n    mat.entries[4] = 2 * (jk - kr);\r\n    mat.entries[5] = 1 - 2 * (ii + kk);\r\n    mat.entries[6] = 2 * (jk + ir);\r\n    mat.entries[8] = 2 * (ik + jr);\r\n    mat.entries[9] = 2 * (jk - ir);\r\n    mat.entries[10] = 1 - 2 * (ii + jj);\r\n\r\n    return mat;\r\n  }\r\n\r\n  /**\r\n   * Set this quaternion from a (rotation) matrix.\r\n   * \r\n   * @param {Matrix4f} m \r\n   * @returns {Quaternion} Returns itself.\r\n   */\r\n  setFromMatrix(m) {\r\n    // As in three.js, this is an implementation straight from:\r\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n    // Get the rotation matrix (if m is a Matrix4f)\r\n    let m00 = m.entries[0],\r\n      m01 = m.entries[4],\r\n      m02 = m.entries[8];\r\n    let m10 = m.entries[1],\r\n      m11 = m.entries[5],\r\n      m12 = m.entries[9];\r\n    let m20 = m.entries[2],\r\n      m21 = m.entries[6],\r\n      m22 = m.entries[10];\r\n\r\n    let t = m00 + m11 + m22;\r\n\r\n    if (t > 0) {\r\n      let s = 0.5 / Math.sqrt(t + 1.0);\r\n      this.components[0] = (m21 - m12) * s;\r\n      this.components[1] = (m02 - m20) * s;\r\n      this.components[2] = (m10 - m01) * s;\r\n      this.components[3] = 0.25 / s;\r\n    } else if (m00 > m11 && m00 > m22) {\r\n      let s = 2.0 * Math.sqrt(1.0 + m00 - m11 - m22);\r\n      this.components[0] = 0.25 * s;\r\n      this.components[1] = (m01 + m10) / s;\r\n      this.components[2] = (m02 + m20) / s;\r\n      this.components[3] = (m21 - m12) / s;\r\n    } else if (m11 > m22) {\r\n      let s = 2.0 * Math.sqrt(1.0 + m11 - m00 - m22);\r\n      this.components[0] = (m01 + m10) / s;\r\n      this.components[1] = 0.25 * s;\r\n      this.components[2] = (m12 + m21) / s;\r\n      this.components[3] = (m02 - m20) / s;\r\n    } else {\r\n      let s = 2.0 * Math.sqrt(1.0 + m22 - m00 - m11);\r\n      this.components[0] = (m02 + m20) / s;\r\n      this.components[1] = (m12 + m21) / s;\r\n      this.components[2] = 0.25 * s;\r\n      this.components[3] = (m10 - m01) / s;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Clone this quaternion.\r\n   * \r\n   * @returns {Quaternion} A clone of this quaternion.\r\n   */\r\n  clone() {\r\n    return new Quaternion(this.components[0], this.components[1],\r\n      this.components[2], this.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the entries of this quaternion match another one.\r\n   * \r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Boolean} A boolean representing whether the entries of the two quaternions match.\r\n   */\r\n  equals(q) {\r\n    return this.components[0] === q.components[0] &&\r\n      this.components[1] === q.components[1] &&\r\n      this.components[2] === q.components[2] &&\r\n      this.components[3] === q.components[3];\r\n  }\r\n\r\n  /**\r\n   * Returns a string representation of this quaternion.\r\n   * \r\n   * @returns {String} A string representing this quaternion.\r\n   */\r\n  toString() {\r\n    return 'x: ' + this.getX() + ', y: ' + this.getY() + ', z: ' +\r\n      this.getZ() + ', w: ' + this.getW();\r\n  }\r\n\r\n  /**\r\n   * Calculate the dot product of two quaternions.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Quaternion} p A quaternion.\r\n   * @returns {Number} The dot product.\r\n   */\r\n  static dot(q, p) {\r\n    return new Quaternion(q.components[0] * p.components[0] +\r\n      q.components[1] * p.components[1] +\r\n      q.components[2] * p.components[2] +\r\n      q.components[3] * p.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Multiply (cross product) two quaternions.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} a A quaternion.\r\n   * @param {Quaternion} b A quaternion.\r\n   * @returns {Quaternion} The cross product quaternion.\r\n   */\r\n  static multiply(a, b) {\r\n    return new Quaternion(\r\n      a.components[0] * b.components[3] + a.components[3] * b.components[0] +\r\n      a.components[1] * b.components[2] - a.components[2] * b.components[1],\r\n      a.components[1] * b.components[3] + a.components[3] * b.components[1] +\r\n      a.components[2] * b.components[0] - a.components[0] * b.components[2],\r\n      a.components[2] * b.components[3] + a.components[3] * b.components[2] +\r\n      a.components[0] * b.components[1] - a.components[1] * b.components[0],\r\n      a.components[3] * b.components[3] + a.components[0] * b.components[0] +\r\n      a.components[1] * b.components[1] - a.components[2] * b.components[2]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Multiplies a quaternion with a scalar.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Number} s A scalar.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static multiplyScalar(q, s) {\r\n    return new Quaternion(q.components[0] * s, q.components[1] * s,\r\n      q.components[2] * s, q.components[3] * s);\r\n  }\r\n\r\n  /**\r\n   * Inverse a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static inverse(q) {\r\n    let p = new Quaternion(q.components);\r\n    return p.conjugate().normalize();\r\n  }\r\n\r\n  /**\r\n   * Normalize a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static normalize(q) {\r\n    let length = q.length();\r\n\r\n    if (length === 0) {\r\n      return new Quaternion(0.0, 0.0, 0.0, 1.0);\r\n    } else {\r\n      let inv = 1 / length;\r\n      return new Quaternion(q.components[0] * inv, q.components[1] * inv,\r\n        q.components[2] * inv, q.components[3] * inv);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Conjugate (* -1) a quaternion.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static conjugate(q) {\r\n    return new Quaternion(q.components[0] * -1, q.components[1] * -1,\r\n      q.components[2] * -1, q.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Sum two quaternions.\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Quaternion} p A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static add(q, p) {\r\n    return new Quaternion(q.components[0] + p.components[0],\r\n      q.components[1] + p.components[1],\r\n      q.components[2] + p.components[2],\r\n      q.components[3] + p.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Subtract a quaternion from another (q - p).\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q A quaternion.\r\n   * @param {Quaternion} p A quaternion.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static subtract(q, p) {\r\n    return new Quaternion(q.components[0] - p.components[0],\r\n      q.components[1] - p.components[1],\r\n      q.components[2] - p.components[2],\r\n      q.components[3] - p.components[3]);\r\n  }\r\n\r\n  /**\r\n   * Create a quaternion from a matrix.\r\n   * \r\n   * @static\r\n   * @param {Matrix4f} m A matrix.\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static fromMatrix(m) {\r\n    let q = new Quaternion();\r\n    q.setFromMatrix(m);\r\n    return q;\r\n  }\r\n\r\n  /**\r\n   * Interpolate between two quaternions (t is between 0 and 1).\r\n   * \r\n   * @static\r\n   * @param {Quaternion} q The source quaternion.\r\n   * @param {Quaternion} p The target quaternion.\r\n   * @param {Number} t The interpolation value / percentage (between 0 an 1).\r\n   * @returns {Quaternion} The resulting quaternion.\r\n   */\r\n  static slerp(q, p, t) {\r\n    // See:\r\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n    if (t === 0) return new Quaternion(q.components);\r\n    if (t === 1) return new Quaternion(p.components);\r\n\r\n    let tmp = new Quaternion(p.components);\r\n\r\n    // The angle between quaternions\r\n    let cosHalfTheta = q.components[0] * tmp.components[0] +\r\n      q.components[1] * tmp.components[1] +\r\n      q.components[2] * tmp.components[2] +\r\n      q.components[3] * tmp.components[3];\r\n\r\n    if (cosHalfTheta < 0) {\r\n      tmp.multiplyScalar(-1);\r\n      cosHalfTheta = -cosHalfTheta;\r\n    }\r\n\r\n    if (Math.abs(cosHalfTheta) >= 1.0) {\r\n      return new Quaternion(q.components);\r\n    }\r\n\r\n    let halfTheta = Math.acos(cosHalfTheta);\r\n    let sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);\r\n\r\n    if (Math.abs(sinHalfTheta) < 0.001) {\r\n      return new Quaternion(q.components[0] * 0.5 + tmp.components[0] * 0.5,\r\n        q.components[1] * 0.5 + tmp.components[1] * 0.5,\r\n        q.components[2] * 0.5 + tmp.components[2] * 0.5,\r\n        q.components[3] * 0.5 + tmp.components[3] * 0.5);\r\n    }\r\n\r\n    let ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta;\r\n    let ratioB = Math.sin(t * halfTheta) / sinHalfTheta;\r\n\r\n    return new Quaternion(q.components[0] * ratioA + tmp.components[0] * ratioB,\r\n      q.components[1] * ratioA + tmp.components[1] * ratioB,\r\n      q.components[2] * ratioA + tmp.components[2] * ratioB,\r\n      q.components[3] * ratioA + tmp.components[3] * ratioB);\r\n  }\r\n}\r\n\r\nmodule.exports = Quaternion","//@ts-check\r\n\r\n/** A class wrapping a radix sort for floats. */\r\nclass RadixSort {\r\n    /**\r\n     * Creates an instance of RadixSort.\r\n     * \r\n     */\r\n    constructor() {\r\n        this.max = undefined;\r\n        this.mask = undefined;\r\n        this.histograms = undefined;\r\n        this.indices = undefined;\r\n        this.tmpIndices = undefined;\r\n    }\r\n\r\n    /**\r\n     * Sorts a 32-bit float array using radix sort.\r\n     * \r\n     * @param {Float32Array} arr The array to be sorted.\r\n     * @param {Boolean} [copyArray=false] A boolean indicating whether to perform the sorting directly on the array or copy it.\r\n     * @returns {Object} The result in the form { array: sortedArray, indices: sortedIndices }.\r\n     * \r\n     */\r\n    sort(arr, copyArray = false) {\r\n        let array = null;\r\n\r\n        if (copyArray) {\r\n            array = new arr.constructor(arr.length);\r\n            array.set(arr);\r\n        } else {\r\n            array = arr;\r\n        }\r\n\r\n        this.max = 1 << 11; // = 2^11 = 2048 = 0x00000800\r\n        this.mask = this.max - 1; // = 2047 = 0x000007FF\r\n        this.histograms = new Int32Array(this.max * Math.ceil(64 / 11));\r\n\r\n        let input = new Int32Array(array.buffer, array.byteOffset, array.byteLength >> 2);\r\n        let nPasses = Math.ceil(array.BYTES_PER_ELEMENT * 8 / 11);\r\n        let maxOffset = this.max * (nPasses - 1);\r\n        let msbMask = 1 << ((array.BYTES_PER_ELEMENT * 8 - 1) % 11);\r\n        let lastMask = (msbMask << 1) - 1;\r\n        let tmp = null;\r\n        let aux = new input.constructor(input.length);\r\n\r\n        // In order to keep track of the indices\r\n        this.indices = new Uint32Array(input.length);\r\n        this.tmpIndices = new Uint32Array(input.length);\r\n\r\n        let normIndices = new Uint32Array(input.length);\r\n        let n = this.max * nPasses;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            this.histograms[i] = 0;\r\n        }\r\n\r\n        // Create the histogram\r\n        this.initHistograms(input, maxOffset, lastMask);\r\n\r\n        // Create the offset table\r\n        for (let i = 0; i <= maxOffset; i += this.max) {\r\n            let sum = 0;\r\n\r\n            for (let j = i; j < i + this.max; j++) {\r\n                let tmpSum = this.histograms[j] + sum;\r\n\r\n                this.histograms[j] = sum - 1;\r\n                sum = tmpSum;\r\n            }\r\n        }\r\n\r\n        // Sort by least significant byte\r\n        this.lsbPass(input, aux);\r\n        tmp = aux;\r\n        aux = input;\r\n        input = tmp;\r\n\r\n        this.pass(input, aux);\r\n        tmp = aux;\r\n        aux = input;\r\n        input = tmp;\r\n\r\n        // Sort by most significant byte\r\n        this.msbPass(input, aux, msbMask);\r\n\r\n        // This part is not needed, why was it still in???\r\n\r\n        // \"Normalize\" the indices, since they are split up just like the floats\r\n        // so 0, 1 -> 0, 2, 3 -> 2, etc.\r\n        // use multiplications not divisions for the second index -> speeeeed\r\n        // Also, invert it\r\n        // for(let i = 0; i < normIndices.length; i++) {\r\n        // \tnormIndices[normIndices.length - i] = this.indices[i];\r\n        // }\r\n\r\n        return {\r\n            array: new Float32Array(aux.buffer, aux.byteOffset, array.length),\r\n            indices: this.indices // instead of normIndices\r\n        };\r\n    }\r\n\r\n    /**\r\n     * The lsb (least significant bit) pass of the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array.\r\n     * @param {Float32Array} aux An auxilliary array.\r\n     * \r\n     */\r\n    lsbPass(arr, aux) {\r\n        for (let i = 0, n = arr.length; i < n; i++) {\r\n            let val = arr[i];\r\n            let sign = val >> 31;\r\n\r\n            val ^= sign | 0x80000000;\r\n\r\n            let x = ++this.histograms[val & this.mask];\r\n\r\n            this.indices[x] = i;\r\n            aux[x] = val;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The main pass of the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array.\r\n     * @param {Float32Array} aux An auxilliary array.\r\n     * \r\n     */\r\n    pass(arr, aux) {\r\n        let n = arr.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let val = arr[i];\r\n            let x = ++this.histograms[this.max + (val >>> 11 & this.mask)];\r\n\r\n            this.tmpIndices[x] = this.indices[i];\r\n            aux[x] = val;\r\n        }\r\n\r\n        this.indices.set(this.tmpIndices);\r\n    }\r\n\r\n    /**\r\n     * The msb (most significant bit) pass of the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array.\r\n     * @param {Float32Array} aux An auxilliary array.\r\n     * \r\n     */\r\n    msbPass(arr, aux, msbMask) {\r\n        let lastMask = (msbMask << 1) - 1;\r\n        let n = arr.length;\r\n        let offset = 2 * this.max;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let val = arr[i];\r\n            let sign = val >> 31;\r\n            let x = ++this.histograms[offset + (val >>> 22 & lastMask)];\r\n\r\n            this.tmpIndices[x] = this.indices[i];\r\n            aux[x] = val ^ (~sign | 0x80000000);\r\n        }\r\n\r\n        this.indices.set(this.tmpIndices);\r\n    }\r\n    \r\n    /**\r\n     * Initialize the histogram used by the algorithm.\r\n     * \r\n     * @param {Float32Array} arr The array to be sorted.\r\n     * @param {Number} maxOffset The maximum offset.\r\n     * @param {Number} lastMask The last max, based on the msb (most significant bit) mask.\r\n     * \r\n     */\r\n    initHistograms(arr, maxOffset, lastMask) {\r\n        let n = arr.length;\r\n\r\n        for (let i = 0; i < n; i++) {\r\n            let val = arr[i];\r\n            let sign = val >> 31;\r\n\r\n            val ^= sign | 0x80000000;\r\n            \r\n            let j = 0;\r\n            let k = 0;\r\n\r\n            for (; j < maxOffset; j += this.max, k += 11) {\r\n                this.histograms[j + (val >>> k & this.mask)]++;\r\n            }\r\n\r\n            this.histograms[j + (val >>> k & lastMask)]++;\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = RadixSort","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f');\r\nconst ProjectionMatrix = require('./ProjectionMatrix');\r\nconst Matrix4f = require('./Matrix4f');\r\n\r\n/** A class representing a ray */\r\nclass Ray {\r\n\r\n    /**\r\n     * Creates an instance of Ray.\r\n     * @param {Vector3f} source The source of the ray.\r\n     * @param {Vector3f} direction The direction of the ray.\r\n     */\r\n    constructor(source, direction) {\r\n        this.source = source || new Vector3f(0.0, 0.0, 0.0);\r\n        this.direction = direction || new Vector3f(0.0, 0.0, 0.0);\r\n    }\r\n\r\n    /**\r\n     * Copy the values from another ray.\r\n     * \r\n     * @param {Ray} r A ray.\r\n     * @returns {Ray} Returns itself.\r\n     */\r\n    copyFrom(r) {\r\n        this.source.copyFrom(r.source);\r\n        this.direction.copyFrom(r.direction);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Apply a projection matrix to this ray.\r\n     * \r\n     * @param {Matrix4f|ProjectionMatrix} m A matrix / projection matrix.\r\n     * @returns {Ray} Returns itself.\r\n     */\r\n    applyProjection(m) {\r\n        this.direction.add(this.source).applyProjection(m);\r\n        this.source.applyProjection(m);\r\n        this.direction.subtract(this.source);\r\n        this.direction.normalize();\r\n\r\n        return this;\r\n    }\r\n\r\n    // See if the two following functions can be optimized\r\n    /**\r\n     * The square of the distance of a vector to this ray.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The square pf the distance between the point and this ray.\r\n     */\r\n    distanceSqToPoint(v) {\r\n        let tmp = Vector3f.subtract(v, this.source);\r\n        let directionDistance = tmp.dot(this.direction);\r\n\r\n        if (directionDistance < 0) {\r\n            return this.source.distanceToSq(v);\r\n        }\r\n\r\n        tmp.copyFrom(this.direction).multiplyScalar(directionDistance).add(this.source);\r\n\r\n        return tmp.distanceToSq(v);\r\n    }\r\n\r\n    /**\r\n     * Find a point on the ray that is closest to a supplied vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} The cloest point on the ray to the supplied point.\r\n     */\r\n    closestPointToPoint(v) {\r\n        let result = Vector3f.subtract(v, this.source);\r\n        let directionDistance = result.dot(this.direction);\r\n\r\n        if (directionDistance < 0) {\r\n            return result.copyFrom(this.source);\r\n        }\r\n\r\n        return result.copyFrom(this.direction).multiplyScalar(directionDistance).add(this.source);\r\n    }\r\n}\r\n\r\nmodule.exports = Ray","//@ts-check\r\n\r\nconst Vector3f = require('./Vector3f')\r\n\r\n/** A class representing spherical coordinates. */\r\nclass SphericalCoords {\r\n    /**\r\n     * Creates an instance of SphericalCoords.\r\n     * @param {Number} [radius=1.0] The radius.\r\n     * @param {Number} [phi=0.0] Phi in radians.\r\n     * @param {Number} [theta=0.0] Theta in radians.\r\n     */\r\n    constructor(radius = 1.0, phi = 0.0, theta = 0.0) {\r\n        this.components = new Float32Array(3);\r\n        this.radius = radius;\r\n        this.phi = phi;\r\n        this.theta = theta;\r\n    }\r\n\r\n    /**\r\n     * Set the spherical coordinates from the radius, the phi angle and the theta angle.\r\n     * \r\n     * @param {Number} radius \r\n     * @param {Number} phi \r\n     * @param {Number} theta \r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    set(radius, phi, theta) {\r\n        this.components[0] = radius;\r\n        this.components[1] = phi;\r\n        this.components[2] = theta;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Avoid overflows.\r\n     * \r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    secure() {\r\n        this.components[1] = Math.max(0.000001, Math.min(Math.PI - 0.000001, this.components[1]));\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the spherical coordaintes from a vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    setFromVector(v) {\r\n        this.components[0] = v.length();\r\n\r\n        if (this.components[0] === 0.0) {\r\n            this.components[1] = 0.0;\r\n            this.components[2] = 0.0;\r\n        } else {\r\n            this.components[1] = Math.acos(Math.max(-1.0, Math.min(1.0, v.components[1] /\r\n                this.components[0])));\r\n            this.components[2] = Math.atan2(v.components[0], v.components[2]);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Limit the rotation by setting maxima and minima for phi and theta.\r\n     * \r\n     * @param {Number} phiMin The minimum for phi.\r\n     * @param {Number} phiMax The maximum for phi.\r\n     * @param {Number} thetaMin The minimum for theta.\r\n     * @param {Number} thetaMax The maximum for theta.\r\n     * @returns {SphericalCoords} Returns itself.\r\n     */\r\n    limit(phiMin, phiMax, thetaMin, thetaMax) {\r\n        // Limits for orbital controls\r\n        this.components[1] = Math.max(phiMin, Math.min(phiMax, this.components[1]));\r\n        this.components[2] = Math.max(thetaMin, Math.min(thetaMax, this.components[2]));\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Clone this spherical coordinates object.\r\n     * \r\n     * @returns {SphericalCoords} A clone of the spherical coordinates object.\r\n     */\r\n    clone() {\r\n        return new SphericalCoords(this.radius, this.phi, this.theta);\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of these spherical coordinates.\r\n     * \r\n     * @returns {String} A string representing spherical coordinates.\r\n     */\r\n    toString() {\r\n        return '(' + this.components[0] + ', ' +\r\n            this.components[1] + ', ' + this.components[2] + ')';\r\n    }\r\n}\r\n\r\nmodule.exports = SphericalCoords","//@ts-check\r\n\r\n/** A helper class containing statistics methods. */\r\nclass Statistics {\r\n    /**\r\n     * Transposes an array of arrays (2d array).\r\n     \r\n     * @param {Array} arr The 2d array to be transposed.\r\n     * @returns {Array} The transpose of the 2d array.\r\n     */\r\n    static transpose2dArray(arr) {\r\n      return arr[0].map((col, i) => arr.map(row => row[i]));\r\n    }\r\n\r\n    /**\r\n     * Returns a normally distributed (pseudo) random number.\r\n     * \r\n     * @returns {Number} A normally distributed (pseudo) random number.\r\n     */\r\n    static randomNormal() {\r\n        let val, u, v, s, mul;\r\n\r\n        if (Statistics.spareRandomNormal !== null) {\r\n            val = Statistics.spareRandomNormal;\r\n            Statistics.spareRandomNormal = null;\r\n        } else {\r\n            do {\r\n                u = Math.random() * 2 - 1;\r\n                v = Math.random() * 2 - 1;\r\n\r\n                s = u * u + v * v;\r\n            } while (s === 0 || s >= 1);\r\n\r\n            mul = Math.sqrt(-2 * Math.log(s) / s);\r\n            val = u * mul;\r\n            Statistics.spareRandomNormal = v * mul;\r\n        }\r\n\r\n        return val / 14;\r\n    }\r\n\r\n    /**\r\n     * Returns a normally distributed (pseudo) random number within a range.\r\n     * \r\n     * @param {Number} a The start of the range.\r\n     * @param {Number} b The end of the range.\r\n     * @returns {Number} A normally distributed (pseudo) random number within a range.\r\n     */\r\n    static randomNormalInRange(a, b) {\r\n        let val;\r\n\r\n        do {\r\n            val = Statistics.randomNormal();\r\n        } while (val < a || val > b);\r\n\r\n        return val;\r\n    }\r\n\r\n    /**\r\n     * Returns a normally distributed (pseudo) random number around a mean with a standard deviation.\r\n     * \r\n     * @param {Number} mean The mean.\r\n     * @param {Number} sd The standard deviation.\r\n     * @returns {Number} A normally distributed (pseudo) random number around a mean with a standard deviation.\r\n     */\r\n    static randomNormalScaled(mean, sd) {\r\n        let r = Statistics.randomNormalInRange(-1, 1);\r\n        \r\n        return r * sd + mean;\r\n    }\r\n\r\n    /**\r\n     * Normalize / scale an array between 0 and 1.\r\n     * \r\n     * @param {Number[]} arr An array.\r\n     * @returns {Number[]} The normalized / scaled array.\r\n     */\r\n    static normalize(arr) {\r\n        let newArr = arr.slice();\r\n        let max = Number.NEGATIVE_INFINITY;\r\n        let min = Number.POSITIVE_INFINITY;\r\n\r\n        for (let i = 0; i < newArr.length; i++) {\r\n            let val = newArr[i];\r\n            if (val > max) max = val;\r\n            if (val < min) min = val;\r\n        }\r\n\r\n        let diff = max - min;\r\n\r\n        for (let i = 0; i < newArr.length; i++) {\r\n            newArr[i] = (newArr[i] - min) / diff;\r\n        }\r\n        \r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * Normalize / scale an array between 0 and 1 (outliers will be set to max or min respectively).\r\n     * The IQR method is used for outlier detection.\r\n     * \r\n     * @param {Number[]} arr An array.\r\n     * @param {Number} q1 The q1 percentage.\r\n     * @param {Number} q3 The q3 percentage.\r\n     * @param {Number} k The IQR scaling factor.\r\n     * @returns {Number[]} The normalized / scaled array.\r\n     */\r\n    static normalizeNoOutliers(arr, q1 = 0.25, q3 = 0.75, k = 1.5) {\r\n        let newArr = arr.slice();\r\n\r\n        newArr.sort((a, b) => a - b);\r\n\r\n        let a = Statistics.getPercentile(newArr, q1);\r\n        let b = Statistics.getPercentile(newArr, q3);\r\n        let iqr = b - a;\r\n        let lower = a - (iqr * k);\r\n        let upper = b + (iqr * k);\r\n        \r\n        let diff = upper - lower;\r\n\r\n        for (let i = 0; i < arr.length; i++) {\r\n            if (arr[i] < lower) {\r\n                newArr[i] = 0.0;\r\n            } else if (arr[i] > upper) {\r\n                newArr[i] = 1.0;\r\n            } else {\r\n                newArr[i] = (arr[i] - lower) / diff;\r\n            }\r\n        }\r\n        \r\n        return newArr;\r\n    }\r\n\r\n    /**\r\n     * Gets the percentile from a sorted array.\r\n     * \r\n     * @param {Number[]} arr A sorted array.\r\n     * @param {Number} percentile The percentile (e.g. 0.25).\r\n     * @returns {Number} The percentile value.\r\n     */\r\n    static getPercentile(arr, percentile) {\r\n        let index = percentile * arr.length;\r\n\r\n        if (Math.floor(index) === index) {\r\n            return (arr[index - 1] + arr[index]) / 2.0;\r\n        } else {\r\n            return arr[Math.floor(index)];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Scales a number to within a given scale.\r\n     * \r\n     * @param {Number} value The number.\r\n     * @param {Number} oldMin The current minimum.\r\n     * @param {Number} oldMax The current maximum.\r\n     * @param {Number} newMin The cnew minimum.\r\n     * @param {Number} newMax The new maximum.\r\n     * @returns {Number} The scaled number.\r\n     */\r\n    static scale(value, oldMin, oldMax, newMin, newMax) {\r\n        return (newMax - newMin) * (value - oldMin) / (oldMax - oldMin) + newMin;\r\n    }\r\n}\r\n\r\nStatistics.spareRandomNormal = null;\r\n\r\nmodule.exports = Statistics\r\n","//@ts-check\r\n\r\nconst SphericalCoordinates = require('./SphericalCoords');\r\n\r\n/** \r\n * A class representing 3D float vector.\r\n * \r\n * @property {Float32Array} components A typed array storing the components of this vector.\r\n */\r\nclass Vector3f {\r\n    /**\r\n     * Creates an instance of Vector3f.\r\n     * @param {Number} x The x component of the vector.\r\n     * @param {Number} y The y component of the vector.\r\n     * @param {Number} z The z component of the vector.\r\n     */\r\n    constructor(x, y, z) {\r\n        if (arguments.length === 1) {\r\n            this.components = new Float32Array(x);\r\n        } else {\r\n            this.components = new Float32Array(3);\r\n            this.components[0] = x || 0.0;\r\n            this.components[1] = y || 0.0;\r\n            this.components[2] = z || 0.0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the x, y and z components of this vector.\r\n     * \r\n     * @param {Number} x The x component of the vector.\r\n     * @param {Number} y The y component of the vector.\r\n     * @param {Number} z The z component of the vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    set(x, y, z) {\r\n        this.components[0] = x;\r\n        this.components[1] = y;\r\n        this.components[2] = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the x component of this vector.\r\n     * \r\n     * @returns {Number} The x component of this vector.\r\n     */\r\n    getX() {\r\n        return this.components[0];\r\n    }\r\n\r\n     /**\r\n     * Gets the y component of this vector.\r\n     * \r\n     * @returns {Number} The y component of this vector.\r\n     */\r\n    getY() {\r\n        return this.components[1];\r\n    }\r\n\r\n     /**\r\n     * Gets the z component of this vector.\r\n     * \r\n     * @returns {Number} The z component of this vector.\r\n     */\r\n    getZ() {\r\n        return this.components[2];\r\n    }\r\n\r\n    /**\r\n     * Sets the x component of this vector.\r\n     * \r\n     * @param {Number} x The value to which the x component of this vectors will be set.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setX(x) {\r\n        this.components[0] = x;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the y component of this vector.\r\n     * \r\n     * @param {Number} y The value to which the y component of this vectors will be set.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setY(y) {\r\n        this.components[1] = y;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the z component of this vector.\r\n     * \r\n     * @param {Number} z The value to which the z component of this vectors will be set.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setZ(z) {\r\n        this.components[2] = z;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets this vector from spherical coordinates.\r\n     * \r\n     * @param {SphericalCoordinates} s A spherical coordinates object.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setFromSphericalCoords(s) {\r\n        var radius = s.components[0];\r\n        var phi = s.components[1];\r\n        var theta = s.components[2];\r\n\r\n        var t = Math.sin(phi) * radius;\r\n\r\n        this.components[0] = Math.sin(theta) * t;\r\n        this.components[1] = Math.cos(phi) * radius;\r\n        this.components[2] = Math.cos(theta) * t;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Copies the values from another vector\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    copyFrom(v) {\r\n        this.components[0] = v.components[0];\r\n        this.components[1] = v.components[1];\r\n        this.components[2] = v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Set the length / magnitude of the vector.\r\n     * \r\n     * @param {Number} length The length / magnitude to set the vector to.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    setLength(length) {\r\n        return this.multiplyScalar(length / this.length());\r\n    }\r\n\r\n    /**\r\n     * Get the square of the length / magnitude of the vector.\r\n     * \r\n     * @returns {Number} The square of length / magnitude of the vector.\r\n     */\r\n    lengthSq() {\r\n        return this.components[0] * this.components[0] +\r\n            this.components[1] * this.components[1] +\r\n            this.components[2] * this.components[2];\r\n    }\r\n\r\n    /**\r\n     * The length / magnitude of the vector.\r\n     * \r\n     * @returns {Number} The length / magnitude of the vector.\r\n     */\r\n    length() {\r\n        return Math.sqrt(this.lengthSq());\r\n    }\r\n\r\n    /**\r\n     * Normalizes the vector.\r\n     * \r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    normalize() {\r\n        return this.divideScalar(this.length());\r\n    }\r\n\r\n    /**\r\n     * Multiply the vector with another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    multiply(v) {\r\n        this.components[0] *= v.components[0];\r\n        this.components[1] *= v.components[1];\r\n        this.components[2] *= v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Multiplies this vector with a scalar.\r\n     * \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    multiplyScalar(s) {\r\n        this.components[0] *= s;\r\n        this.components[1] *= s;\r\n        this.components[2] *= s;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the vector by another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    divide(v) {\r\n        this.components[0] /= v.components[0];\r\n        this.components[1] /= v.components[1];\r\n        this.components[2] /= v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Divides the vector by a scalar.\r\n     * \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    divideScalar(s) {\r\n        this.components[0] /= s;\r\n        this.components[1] /= s;\r\n        this.components[2] /= s;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sums the vector with another.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    add(v) {\r\n        this.components[0] += v.components[0];\r\n        this.components[1] += v.components[1];\r\n        this.components[2] += v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Substracts a vector from this one.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    subtract(v) {\r\n        this.components[0] -= v.components[0];\r\n        this.components[1] -= v.components[1];\r\n        this.components[2] -= v.components[2];\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculates the dot product for the vector with another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The dot product of the two vectors.\r\n     */\r\n    dot(v) {\r\n        return this.components[0] * v.components[0] +\r\n            this.components[1] * v.components[1] +\r\n            this.components[2] * v.components[2];\r\n    }\r\n\r\n    /**\r\n     * Calculates the cross product for the vector with another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Vector3f} The cross product of the two vectors.\r\n     */\r\n    cross(v) {\r\n        return new Vector3f(\r\n            this.components[1] * v.components[2] - this.components[2] * v.components[1],\r\n            this.components[2] * v.components[0] - this.components[0] * v.components[2],\r\n            this.components[0] * v.components[1] - this.components[1] * v.components[0]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Applies a projection matrix to the vector.\r\n     * \r\n     * @param {Matrix4f} m A (projection) matrix.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    applyProjection(m) {\r\n        var x = this.components[0];\r\n        var y = this.components[1];\r\n        var z = this.components[2];\r\n\r\n        var e = m.entries;\r\n        var p = 1.0 / (e[3] * x + e[7] * y + e[11] * z + e[15]);\r\n\r\n        this.components[0] = (e[0] * x + e[4] * y + e[8] * z + e[12]) * p;\r\n        this.components[1] = (e[1] * x + e[5] * y + e[9] * z + e[13]) * p;\r\n        this.components[2] = (e[2] * x + e[6] * y + e[10] * z + e[14]) * p;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Rotates the vector into the direction defined by the rotational component of a matrix.\r\n     * \r\n     * @param {Matrix4f} m A matrix.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    toDirection(m) {\r\n        var x = this.components[0];\r\n        var y = this.components[1];\r\n        var z = this.components[2];\r\n\r\n        var e = m.entries;\r\n\r\n        this.components[0] = e[0] * x + e[4] * y + e[8] * z;\r\n        this.components[1] = e[1] * x + e[5] * y + e[9] * z;\r\n        this.components[2] = e[2] * x + e[6] * y + e[10] * z;\r\n\r\n        this.normalize();\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Applies a quaternion to the vector (usually a rotation).\r\n     * \r\n     * @param {Quaternion} q Quaternion.\r\n     * @returns {Vector3f} Returns itself.\r\n     */\r\n    applyQuaternion(q) {\r\n        var x = this.components[0];\r\n        var y = this.components[1];\r\n        var z = this.components[2];\r\n\r\n        var qx = q.components[0];\r\n        var qy = q.components[1];\r\n        var qz = q.components[2];\r\n        var qw = q.components[3];\r\n\r\n        var ix = qw * x + qy * z - qz * y;\r\n        var iy = qw * y + qz * x - qx * z;\r\n        var iz = qw * z + qx * y - qy * x;\r\n        var iw = -qx * x - qy * y - qz * z;\r\n\r\n        this.components[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\r\n        this.components[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\r\n        this.components[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Calculates the square of the distance to another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The square of the distance to the other vector.\r\n     */\r\n    distanceToSq(v) {\r\n        var dx = this.components[0] - v.components[0];\r\n        var dy = this.components[1] - v.components[1];\r\n        var dz = this.components[2] - v.components[2];\r\n\r\n        return dx * dx + dy * dy + dz * dz;\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance to another vector.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Number} The distance to the other vector.\r\n     */\r\n    distanceTo(v) {\r\n        return Math.sqrt(this.distanceToSq(v));\r\n    }\r\n\r\n    /**\r\n     * Clones this vector.\r\n     * \r\n     * @returns {Vector3f} A clone of this vector.\r\n     */\r\n    clone() {\r\n        return new Vector3f(this.components[0], this.components[1],\r\n            this.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Compares the components of the vector to those of another.\r\n     * \r\n     * @param {Vector3f} v A vector.\r\n     * @returns {Boolean} A vector indicating whether or not the two vectors are equal.\r\n     */\r\n    equals(v) {\r\n        return this.components[0] === v.components[0] &&\r\n            this.components[1] === v.components[1] &&\r\n            this.components[2] === v.components[2];\r\n    }\r\n\r\n    /**\r\n     * Returns a string representation of the vector.\r\n     * \r\n     * @returns {String} A string representation of the vector.\r\n     */\r\n    toString() {\r\n        return '(' + this.components[0] + ', ' + this.components[1] + ', ' +\r\n            this.components[2] + ')';\r\n    }\r\n\r\n    /**\r\n     * Normalizes a vector.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The noramlized vector.\r\n     */\r\n    static normalize(v) {\r\n        return Vector3f.divideScalar(v, v.length());\r\n    }\r\n\r\n    /**\r\n     * Multiplies two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The product of the two vectors.\r\n     */\r\n    static multiply(u, v) {\r\n        return new Vector3f(u.components[0] * v.components[0],\r\n            u.components[1] * v.components[1],\r\n            u.components[2] * v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Multiplies a vector with a scalar.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} v A vector. \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} The vector multiplied by the scalar.\r\n     */\r\n    static multiplyScalar(v, s) {\r\n        return new Vector3f(v.components[0] * s,\r\n            v.components[1] * s,\r\n            v.components[2] * s);\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by another vector (u / v).\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The fraction vector.\r\n     */\r\n    static divide(u, v) {\r\n        return new Vector3f(u.components[0] / v.components[0],\r\n            u.components[1] / v.components[1],\r\n            u.components[2] / v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Divides a vector by a scalar.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} v A vector. \r\n     * @param {Number} s A scalar.\r\n     * @returns {Vector3f} The vector divided by the scalar.\r\n     */\r\n    static divideScalar(v, s) {\r\n        return new Vector3f(v.components[0] / s,\r\n            v.components[1] / s,\r\n            v.components[2] / s);\r\n    }\r\n\r\n    /**\r\n     * Sums two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The sum of the two vectors.\r\n     */\r\n    static add(u, v) {\r\n        return new Vector3f(u.components[0] + v.components[0],\r\n            u.components[1] + v.components[1],\r\n            u.components[2] + v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Subtracts one scalar from another (u - v)\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The difference between the two vectors.\r\n     */\r\n    static subtract(u, v) {\r\n        return new Vector3f(u.components[0] - v.components[0],\r\n            u.components[1] - v.components[1],\r\n            u.components[2] - v.components[2]);\r\n    }\r\n\r\n    /**\r\n     * Calculates the cross product of two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Vector3f} The cross product of the two vectors.\r\n     */\r\n    static cross(u, v) {\r\n        return new Vector3f(\r\n            u.components[1] * v.components[2] - u.components[2] * v.components[1],\r\n            u.components[2] * v.components[0] - u.components[0] * v.components[2],\r\n            u.components[0] * v.components[1] - u.components[1] * v.components[0]\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Calculates the dot product of two vectors.\r\n     * \r\n     * @static\r\n     * @param {Vector3f} u A vector. \r\n     * @param {Vector3f} v A vector. \r\n     * @returns {Number} The dot product of the two vectors.\r\n     */\r\n    static dot(u, v) {\r\n        return u.components[0] * v.components[0] +\r\n            u.components[1] * v.components[1] +\r\n            u.components[2] * v.components[2];\r\n    }\r\n\r\n    /**\r\n     * Returns the forward vector (0, 0, 1).\r\n     * \r\n     * @static\r\n     * @returns {Vector3f} The forward vector.\r\n     */\r\n    static forward() {\r\n        return new Vector3f(0, 0, 1);\r\n    }\r\n\r\n    /**\r\n     * Returns the up vector (0, 1, 0).\r\n     * \r\n     * @static\r\n     * @returns {Vector3f} The up vector.\r\n     */\r\n    static up() {\r\n        return new Vector3f(0, 1, 0);\r\n    }\r\n\r\n    /**\r\n     * Returns the right vector (1, 0, 0).\r\n     * \r\n     * @static\r\n     * @returns {Vector3f} The right vector.\r\n     */\r\n    static right() {\r\n        return new Vector3f(1, 0, 0);\r\n    }\r\n}\r\n\r\nmodule.exports = Vector3f\r\n","const Matrix3f = require('./Matrix3f');\r\nconst Matrix4f = require('./Matrix4f');\r\nconst ProjectionMatrix = require('./ProjectionMatrix');\r\nconst Quaternion = require('./Quaternion');\r\nconst RadixSort = require('./RadixSort');\r\nconst Ray = require('./Ray');\r\nconst SphericalCoords = require('./SphericalCoords');\r\nconst Statistics = require('./Statistics');\r\nconst Vector3f = require('./Vector3f');\r\n\r\nmodule.exports = {\r\n  Matrix3f,\r\n  Matrix4f,\r\n  ProjectionMatrix,\r\n  Quaternion,\r\n  RadixSort,\r\n  Ray,\r\n  SphericalCoords,\r\n  Statistics,\r\n  Vector3f\r\n}","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('circle', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                           cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                           clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                           fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'vec3 N;',\r\n        'N.xy = gl_PointCoord * 2.0 - vec2(1.0);',\r\n        'float mag = dot(N.xy, N.xy);',\r\n        'if (mag > 1.0) discard;   // discard fragments outside circle',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('coordinates', 1, { }, [\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'void main() {',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'gl_PointSize = 1.0;',\r\n        'vColor = color;',\r\n    '}'\r\n], [\r\n    'varying vec3 vColor;',\r\n    'void main() {',\r\n        'gl_FragColor = vec4(vColor, 1.0);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('default', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                            type: new Uniform('type', 0.0, 'float'),\r\n                                            cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                            clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                            fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('defaultAnimated', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                                    cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                                    time: new Uniform('time', 0.0, 'float'),\r\n                                                    clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                                    fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'uniform float time;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = size;',\r\n        'hsv.g *= max(0.15, abs(sin(time * 0.002)));',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('defaultEffect', 1, {}, [\r\n    'attribute vec2 v_coord;',\r\n    'uniform sampler2D fbo_texture;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main() {',\r\n        'gl_Position = vec4(v_coord, 0.0, 1.0);',\r\n        'f_texcoord = (v_coord + 1.0) / 2.0;',\r\n    '}'\r\n], [\r\n    'uniform sampler2D fbo_texture;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main(void) {',\r\n        'vec4 color = texture2D(fbo_texture, f_texcoord);',\r\n        'gl_FragColor = color;',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('FXAAEffect', 1, { resolution: new Uniform('resolution', [ 500.0, 500.0 ], 'float_vec2') }, [\r\n    'attribute vec2 v_coord;',\r\n    'uniform sampler2D fbo_texture;',\r\n    'uniform vec2 resolution;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main() {',\r\n        'gl_Position = vec4(v_coord, 0.0, 1.0);',\r\n        'f_texcoord = (v_coord + 1.0) / 2.0;',\r\n    '}'\r\n], /*\r\n[\r\n    '#define FXAA_REDUCE_MIN   (1.0/ 128.0)',\r\n    '#define FXAA_REDUCE_MUL   (1.0 / 8.0)',\r\n    '#define FXAA_SPAN_MAX     8.0',\r\n\r\n    'vec4 applyFXAA(vec2 fragCoord, sampler2D tex, vec2 resolution)',\r\n    '{',\r\n        'fragCoord = fragCoord * resolution;',\r\n        'vec2 inverseVP = vec2(1.0 / 500.0, 1.0 / 500.0);',\r\n        'vec3 rgbNW = texture2D(tex, (fragCoord.xy + vec2(-1.0, -1.0)) * inverseVP).xyz;',\r\n        'vec3 rgbNE = texture2D(tex, (fragCoord.xy + vec2(1.0, -1.0)) * inverseVP).xyz;',\r\n        'vec3 rgbSW = texture2D(tex, (fragCoord.xy + vec2(-1.0, 1.0)) * inverseVP).xyz;',\r\n        'vec3 rgbSE = texture2D(tex, (fragCoord.xy + vec2(1.0, 1.0)) * inverseVP).xyz;',\r\n        'vec4 rgbaM  = texture2D(tex, fragCoord.xy  * inverseVP);',\r\n        'vec3 rgbM = rgbaM.xyz;',\r\n        'float opacity = rgbaM.w;',\r\n        'vec3 luma = vec3(0.299, 0.587, 0.114);',\r\n        'float lumaNW = dot(rgbNW, luma);',\r\n        'float lumaNE = dot(rgbNE, luma);',\r\n        'float lumaSW = dot(rgbSW, luma);',\r\n        'float lumaSE = dot(rgbSE, luma);',\r\n        'float lumaM  = dot(rgbM,  luma);',\r\n        'float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));',\r\n        'float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));',\r\n\r\n        'vec2 dir;',\r\n        'dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));',\r\n        'dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));',\r\n\r\n        'float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL), FXAA_REDUCE_MIN);',\r\n        'float rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);',\r\n\r\n        'dir = min(vec2(FXAA_SPAN_MAX, FXAA_SPAN_MAX), max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX), dir * rcpDirMin)) * inverseVP;',\r\n\r\n        'vec3 rgbA = 0.5 * (texture2D(tex, fragCoord.xy * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +',\r\n                           'texture2D(tex, fragCoord.xy * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);',\r\n\r\n        'vec3 rgbB = rgbA * 0.5 + 0.25 * (texture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +',\r\n                                         'texture2D(tex, fragCoord.xy * inverseVP + dir * 0.5).xyz);',\r\n\r\n        'float lumaB = dot(rgbB, luma);',\r\n        'if ((lumaB < lumaMin) || (lumaB > lumaMax))',\r\n            'return vec4(rgbA, 1.0);',\r\n        'else',\r\n            'return vec4(rgbB, 1.0);',\r\n    '}',\r\n\r\n    'uniform sampler2D fbo_texture;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main(void) {',\r\n        'gl_FragColor = applyFXAA(f_texcoord, fbo_texture, vec2(500.0, 500.0));',\r\n    '}'\r\n]);\r\n*/\r\n[\r\n    '#define fxaaTexture2D(t, p, o, r) texture2D(t, p + (o * r), 0.0)',\r\n    '#define fxaaSat(x) clamp(x, 0.0, 1.0)',\r\n\r\n    '#define FXAA_QUALITY_PS 8',\r\n    '#define FXAA_QUALITY_P0 1.0',\r\n    '#define FXAA_QUALITY_P1 1.5',\r\n    '#define FXAA_QUALITY_P2 2.0',\r\n    '#define FXAA_QUALITY_P3 2.0',\r\n    '#define FXAA_QUALITY_P4 2.0',\r\n    '#define FXAA_QUALITY_P5 2.0',\r\n    '#define FXAA_QUALITY_P6 4.0',\r\n    '#define FXAA_QUALITY_P7 12.0',\r\n\r\n    'vec4 fxaa(vec2 pos, sampler2D tex, vec2 resolution,',\r\n          'float subpixQuality, float edgeThreshold, float edgeThresholdMin) {',\r\n        'vec2 posM;',\r\n        'posM.x = pos.x;',\r\n        'posM.y = pos.y;',\r\n\r\n        'vec4 rgbyM = texture2D(tex, posM);',\r\n        'vec3 luma = vec3(0.299, 0.587, 0.114);',\r\n        'float lumaM = dot(rgbyM.xyz, luma);',\r\n\r\n        'float lumaS = dot(fxaaTexture2D(tex, posM, vec2(0, 1), resolution.xy).xyz, luma);',\r\n        'float lumaE = dot(fxaaTexture2D(tex, posM, vec2(1, 0), resolution.xy).xyz, luma);',\r\n        'float lumaN = dot(fxaaTexture2D(tex, posM, vec2(0, -1), resolution.xy).xyz, luma);',\r\n        'float lumaW = dot(fxaaTexture2D(tex, posM, vec2(-1, 0), resolution.xy).xyz, luma);',\r\n\r\n        'float maxSM = max(lumaS, lumaM);',\r\n        'float minSM = min(lumaS, lumaM);',\r\n        'float maxESM = max(lumaE, maxSM);',\r\n        'float minESM = min(lumaE, minSM);',\r\n        'float maxWN = max(lumaN, lumaW);',\r\n        'float minWN = min(lumaN, lumaW);',\r\n        'float rangeMax = max(maxWN, maxESM);',\r\n        'float rangeMin = min(minWN, minESM);',\r\n        'float rangeMaxScaled = rangeMax * edgeThreshold;',\r\n        'float range = rangeMax - rangeMin;',\r\n        'float rangeMaxClamped = max(edgeThresholdMin, rangeMaxScaled);',\r\n        'bool earlyExit = range < rangeMaxClamped;',\r\n        \r\n        '// maybe return rgbyM -> leave unchanged',\r\n        'if(earlyExit) return rgbyM;',\r\n\r\n        'float lumaNW = dot(fxaaTexture2D(tex, posM, vec2(-1, -1), resolution.xy).xyz, luma);',\r\n        'float lumaSE = dot(fxaaTexture2D(tex, posM, vec2(1, 1), resolution.xy).xyz, luma);',\r\n        'float lumaNE = dot(fxaaTexture2D(tex, posM, vec2(1, -1), resolution.xy).xyz, luma);',\r\n        'float lumaSW = dot(fxaaTexture2D(tex, posM, vec2(-1, 1), resolution.xy).xyz, luma);',\r\n\r\n        'float lumaNS = lumaN + lumaS;',\r\n        'float lumaWE = lumaW + lumaE;',\r\n        'float subpixRcpRange = 1.0 / range;',\r\n        'float subpixNSWE = lumaNS + lumaWE;',\r\n        'float edgeHorz1 = (-2.0 * lumaM) + lumaNS;',\r\n        'float edgeVert1 = (-2.0 * lumaM) + lumaWE;',\r\n\r\n        'float lumaNESE = lumaNE + lumaSE;',\r\n        'float lumaNWNE = lumaNW + lumaNE;',\r\n        'float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;',\r\n        'float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;',\r\n\r\n        'float lumaNWSW = lumaNW + lumaSW;',\r\n        'float lumaSWSE = lumaSW + lumaSE;',\r\n        'float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);',\r\n        'float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);',\r\n        'float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;',\r\n        'float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;',\r\n        'float edgeHorz = abs(edgeHorz3) + edgeHorz4;',\r\n        'float edgeVert = abs(edgeVert3) + edgeVert4;',\r\n\r\n        'float subpixNWSWNESE = lumaNWSW + lumaNESE;',\r\n        'float lengthSign = resolution.x;',\r\n        'bool horzSpan = edgeHorz >= edgeVert;',\r\n        'float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;',\r\n\r\n        'if(!horzSpan) lumaN = lumaW;',\r\n        'if(!horzSpan) lumaS = lumaE;',\r\n        'if(horzSpan) lengthSign = resolution.y;',\r\n        'float subpixB = (subpixA * (1.0/12.0)) - lumaM;',\r\n\r\n        'float gradientN = lumaN - lumaM;',\r\n        'float gradientS = lumaS - lumaM;',\r\n        'float lumaNN = lumaN + lumaM;',\r\n        'float lumaSS = lumaS + lumaM;',\r\n        'bool pairN = abs(gradientN) >= abs(gradientS);',\r\n        'float gradient = max(abs(gradientN), abs(gradientS));',\r\n        'if(pairN) lengthSign = -lengthSign;',\r\n        'float subpixC = fxaaSat(abs(subpixB) * subpixRcpRange);',\r\n\r\n        'vec2 posB;',\r\n        'posB.x = posM.x;',\r\n        'posB.y = posM.y;',\r\n        'vec2 offNP;',\r\n        'offNP.x = (!horzSpan) ? 0.0 : resolution.x;',\r\n        'offNP.y = ( horzSpan) ? 0.0 : resolution.y;',\r\n        'if(!horzSpan) posB.x += lengthSign * 0.5;',\r\n        'if( horzSpan) posB.y += lengthSign * 0.5;',\r\n\r\n        'vec2 posN;',\r\n        'posN.x = posB.x - offNP.x * FXAA_QUALITY_P0;',\r\n        'posN.y = posB.y - offNP.y * FXAA_QUALITY_P0;',\r\n        'vec2 posP;',\r\n        'posP.x = posB.x + offNP.x * FXAA_QUALITY_P0;',\r\n        'posP.y = posB.y + offNP.y * FXAA_QUALITY_P0;',\r\n        'float subpixD = ((-2.0)*subpixC) + 3.0;',\r\n        'float lumaEndN = texture2D(tex, posN).w;',\r\n        'float subpixE = subpixC * subpixC;',\r\n        'float lumaEndP = texture2D(tex, posP).w;',\r\n\r\n        'if(!pairN) lumaNN = lumaSS;',\r\n        'float gradientScaled = gradient * 1.0/4.0;',\r\n        'float lumaMM = lumaM - lumaNN * 0.5;',\r\n        'float subpixF = subpixD * subpixE;',\r\n        'bool lumaMLTZero = lumaMM < 0.0;',\r\n\r\n        'lumaEndN -= lumaNN * 0.5;',\r\n        'lumaEndP -= lumaNN * 0.5;',\r\n        'bool doneN = abs(lumaEndN) >= gradientScaled;',\r\n        'bool doneP = abs(lumaEndP) >= gradientScaled;',\r\n        'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;',\r\n        'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;',\r\n        'bool doneNP = (!doneN) || (!doneP);',\r\n        'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;',\r\n        'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;',\r\n\r\n        'if(doneNP) {',\r\n            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;',\r\n            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;',\r\n            'doneNP = (!doneN) || (!doneP);',\r\n            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;',\r\n            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;',\r\n\r\n            '#if (FXAA_QUALITY_PS > 3)',\r\n            'if(doneNP) {',\r\n                'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;',\r\n                'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;',\r\n                'doneNP = (!doneN) || (!doneP);',\r\n                'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;',\r\n                'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;',\r\n\r\n                '#if (FXAA_QUALITY_PS > 4)',\r\n                'if(doneNP) {',\r\n                    'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                    'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                    'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                    'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                    'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                    'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                    'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;',\r\n                    'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;',\r\n                    'doneNP = (!doneN) || (!doneP);',\r\n                    'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;',\r\n                    'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;',\r\n\r\n                    '#if (FXAA_QUALITY_PS > 5)',\r\n                    'if(doneNP) {',\r\n                        'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                        'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                        'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                        'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                        'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                        'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                        'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;',\r\n                        'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;',\r\n                        'doneNP = (!doneN) || (!doneP);',\r\n                        'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;',\r\n                        'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;',\r\n\r\n                        '#if (FXAA_QUALITY_PS > 6)',\r\n                        'if(doneNP) {',\r\n                            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;',\r\n                            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;',\r\n                            'doneNP = (!doneN) || (!doneP);',\r\n                            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;',\r\n                            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;',\r\n\r\n                            '#if (FXAA_QUALITY_PS > 7)',\r\n                            'if(doneNP) {',\r\n                                'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                                'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                                'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                                'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                                'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                                'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                                'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;',\r\n                                'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;',\r\n                                'doneNP = (!doneN) || (!doneP);',\r\n                                'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;',\r\n                                'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;',\r\n\r\n        '#if (FXAA_QUALITY_PS > 8)',\r\n        'if(doneNP) {',\r\n            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;',\r\n            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;',\r\n            'doneNP = (!doneN) || (!doneP);',\r\n            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;',\r\n            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;',\r\n\r\n            '#if (FXAA_QUALITY_PS > 9)',\r\n            'if(doneNP) {',\r\n                'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;',\r\n                'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;',\r\n                'doneNP = (!doneN) || (!doneP);',\r\n                'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;',\r\n                'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;',\r\n\r\n                '#if (FXAA_QUALITY_PS > 10)',\r\n                'if(doneNP) {',\r\n                    'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                    'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                    'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                    'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                    'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                    'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                    'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;',\r\n                    'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;',\r\n                    'doneNP = (!doneN) || (!doneP);',\r\n                    'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;',\r\n                    'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;',\r\n\r\n                    '#if (FXAA_QUALITY_PS > 11)',\r\n                    'if(doneNP) {',\r\n                        'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                        'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                        'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                        'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                        'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                        'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                        'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;',\r\n                        'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;',\r\n                        'doneNP = (!doneN) || (!doneP);',\r\n                        'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;',\r\n                        'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;',\r\n\r\n                        '#if (FXAA_QUALITY_PS > 12)',\r\n                        'if(doneNP) {',\r\n                            'if(!doneN) lumaEndN = dot(texture2D(tex, posN.xy).xyz, luma);',\r\n                            'if(!doneP) lumaEndP = dot(texture2D(tex, posP.xy).xyz, luma);',\r\n                            'if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;',\r\n                            'if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;',\r\n                            'doneN = abs(lumaEndN) >= gradientScaled;',\r\n                            'doneP = abs(lumaEndP) >= gradientScaled;',\r\n                            'if(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;',\r\n                            'if(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;',\r\n                            'doneNP = (!doneN) || (!doneP);',\r\n                            'if(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;',\r\n                            'if(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;',\r\n                        '}',\r\n                        '#endif',\r\n                    '}',\r\n                    '#endif',\r\n                '}',\r\n                '#endif',\r\n            '}',\r\n            '#endif',\r\n        '}',\r\n        '#endif',\r\n                            '}',\r\n                            '#endif',\r\n                        '}',\r\n                        '#endif',\r\n                    '}',\r\n                    '#endif',\r\n                '}',\r\n                '#endif',\r\n\r\n            '}',\r\n            '#endif',\r\n        '}',\r\n\r\n        'float dstN = posM.x - posN.x;',\r\n        'float dstP = posP.x - posM.x;',\r\n        'if(!horzSpan) dstN = posM.y - posN.y;',\r\n        'if(!horzSpan) dstP = posP.y - posM.y;',\r\n\r\n        'bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;',\r\n        'float spanLength = (dstP + dstN);',\r\n        'bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;',\r\n        'float spanLengthRcp = 1.0 / spanLength;',\r\n\r\n        'bool directionN = dstN < dstP;',\r\n        'float dst = min(dstN, dstP);',\r\n        'bool goodSpan = directionN ? goodSpanN : goodSpanP;',\r\n        'float subpixG = subpixF * subpixF;',\r\n        'float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;',\r\n        'float subpixH = subpixG * subpixQuality;',\r\n\r\n        'float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;',\r\n        'float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);',\r\n        'if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;',\r\n        'if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;',\r\n\r\n        '// maybe return vec4(texture2D(tex, posM).xyz, lumaM);',\r\n        'return texture2D(tex, posM);',\r\n    '}',\r\n\r\n    'uniform sampler2D fbo_texture;',\r\n    'uniform vec2 resolution;',\r\n    'varying vec2 f_texcoord;',\r\n    'void main(void) {',\r\n        'gl_FragColor = fxaa(f_texcoord, fbo_texture, vec2(1.0 / resolution.x, 1.0 / resolution.y), 0.75, 0.166, 0.0833);',\r\n    '}'\r\n]);","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('simpleSphere', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                                 cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                                 clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                                 fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'vec3 N;',\r\n        'N.xy = gl_PointCoord * 2.0 - vec2(1.0);',\r\n        'float mag = dot(N.xy, N.xy);',\r\n        'if (mag > 1.0) discard;   // discard fragments outside circle',\r\n        'N.z = sqrt(1.0 - mag);',\r\n        'vec3 light_dir = vec3(0.25, -0.25, 1.0);',\r\n        'float diffuse = max(0.25, dot(light_dir, N));',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'vec3 color = vColor * diffuse;',\r\n        'gl_FragColor = mix(clearColor, vec4(color, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('smoothCircle', 2, { size: new Uniform('size', 5.0, 'float'),\r\n                                                 cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                                 clearColor: new Uniform('clearColor', [1.0, 1.0, 1.0, 1.0], 'float_vec4'),\r\n                                                 fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'in vec3 position;',\r\n    'in vec3 color;',\r\n    'out vec3 vColor;',\r\n    'out float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'in vec3 vColor;',\r\n    'in float vDiscard;',\r\n    'out vec4 fragColor;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float r = 0.0, delta = 0.0, alpha = 1.0;',\r\n        'vec2 cxy = 2.0 * gl_PointCoord - 1.0;',\r\n        'r = dot(cxy, cxy);',\r\n        'delta = fwidth(r);',\r\n        'alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',,\r\n        '// fragColor = vec4(vec3(gl_FragDepth) * fog, 1.0);',\r\n        'fragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('sphere', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                           cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                           clearColor: new Uniform('clearColor', [1.0, 1.0, 1.0, 1.0], 'float_vec4'),\r\n                                           fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 1.0);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0 || mv_pos.z > 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = point_size * size;',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'float rand(vec2 co) {',\r\n        'return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);',\r\n    '}',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'vec3 N;',\r\n        'N.xy = gl_PointCoord * 2.0 - vec2(1.0);',\r\n        'float mag = dot(N.xy, N.xy);',\r\n        'if (mag > 1.0) discard;   // discard fragments outside circle',\r\n        'N.z = sqrt(1.0 - mag);',\r\n        'vec3 light_dir = vec3(0.25, -0.25, 1.0);',\r\n        'float diffuse = max(0.25, dot(light_dir, N));',\r\n        'vec3 v = normalize(vec3(0.1, -0.2, 1.0));',\r\n        'vec3 h = normalize(light_dir + v);',\r\n        'float specular = pow(max(0.0, dot(N, h)), 100.0);',\r\n        '// specular += 0.1 * rand(gl_PointCoord);',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'vec3 color = vColor * diffuse + specular * 0.5;',\r\n        'gl_FragColor = mix(clearColor, vec4(color, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","const Shader = require('../Core/Shader')\r\nconst Uniform = require('../Core/Uniform')\r\n\r\nmodule.exports = new Shader('tree', 1, { size: new Uniform('size', 5.0, 'float'),\r\n                                         cutoff: new Uniform('cutoff', 0.0, 'float'),\r\n                                         clearColor: new Uniform('clearColor', [0.0, 0.0, 0.0, 1.0], 'float_vec4'),\r\n                                         fogDensity: new Uniform('fogDensity', 6.0, 'float') }, [\r\n    'uniform float size;',\r\n    'uniform float cutoff;',\r\n    'attribute vec3 position;',\r\n    'attribute vec3 color;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'vec3 rgb2hsv(vec3 c) {',\r\n        'vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);',\r\n        'vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));',\r\n        'vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));',\r\n\r\n        'float d = q.x - min(q.w, q.y);',\r\n        'float e = 1.0e-10;',\r\n        'return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);',\r\n    '}',\r\n    'vec3 hsv2rgb(vec3 c) {',\r\n        'vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);',\r\n        'vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);',\r\n        'return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);',\r\n    '}',\r\n    'void main() {',\r\n        'vec3 hsv = vec3(color.r, color.g, 0.75);',\r\n        'float saturation = color.g;',\r\n        'float point_size = color.b;',\r\n        'gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);',\r\n        'vec4 mv_pos = modelViewMatrix * vec4(position, 1.0);',\r\n        'vDiscard = 0.0;',\r\n        'if(-mv_pos.z < cutoff || point_size <= 0.0) {',\r\n            'vDiscard = 1.0;',\r\n            'return;',\r\n        '}',\r\n        'gl_PointSize = size;',\r\n        'vColor = hsv2rgb(hsv);',\r\n    '}'\r\n], [\r\n    'uniform vec4 clearColor;',\r\n    'uniform float fogDensity;',\r\n    'varying vec3 vColor;',\r\n    'varying float vDiscard;',\r\n    'void main() {',\r\n        'if(vDiscard > 0.5) discard;',\r\n        'float z = gl_FragCoord.z / gl_FragCoord.w;',\r\n        'float fog_factor = clamp(exp2(-fogDensity * fogDensity * z * z * 1.442695), 0.025, 1.0);',\r\n        'gl_FragColor = mix(clearColor, vec4(vColor, 1.0), fog_factor);',\r\n    '}'\r\n]);\r\n","var circle = require('./Circle');\r\nvar coordinates = require('./Coordinates');\r\nvar defaultSquare = require('./Default');\r\nvar defaultAnimated = require('./DefaultAnimated');\r\nvar defaultEffect = require('./DefaultEffect');\r\nvar simpleSphere = require('./SimpleSphere');\r\nvar smoothCircle = require('./SmoothCircle');\r\nvar sphere = require('./Sphere');\r\nvar tree = require('./Tree');\r\nvar fxaaEffect = require('./FXAAEffect');\r\n\r\nmodule.exports = {\r\n  circle,\r\n  coordinates,\r\n  defaultSquare,\r\n  defaultAnimated,\r\n  defaultEffect,\r\n  simpleSphere,\r\n  smoothCircle,\r\n  sphere,\r\n  tree,\r\n  fxaaEffect\r\n}","//@ts-check\r\n\r\nconst Vector3f = require('../Math/Vector3f');\r\n\r\n/**\r\n* @class\r\n* Axis-aligned bounding boxes with the constraint that they are cubes with equal sides.\r\n* @property {Vector3f} center - The center of this axis-aligned bounding box.\r\n* @property {number} radius - The radius of this axis-aligned bounding box.\r\n* @property {number} locCode - The location code of this axis-aligned bounding box in the octree.\r\n* @property {number} left - The distance of the left plane to the world ZY plane.\r\n* @property {number} right - The distance of the right plane to the world ZY plane.\r\n* @property {number} back - The distance of the back plane to the world XY plane.\r\n* @property {number} front - The distance of the front plane to the world XY plane.\r\n* @property {number} bottom - The distance of the bottom plane to the world XZ plane.\r\n* @property {number} top - The distance of the top plane to the world XZ plane.\r\n* @property {Array} neighbours - The neighbours of this axis-aligned bounding box in an an octree.\r\n* @property {Float32Array} min - An array specifying the minimum corner point (x, y, z) of the axis-aligned bounding box.\r\n* @property {Float32Array} max - An array specifying the maximum corner point (x, y, z) of the axis-aligned bounding box.\r\n* @constructor\r\n* @param {Vector3f} center - A radius for this axis-aligned bounding box.\r\n* @param {number} radius - A radius for this axis-aligned bounding box.\r\n*/\r\nclass AABB {\r\n    \r\n    constructor(center, radius) {\r\n        this.center = center || new Vector3f(0.0, 0.0, 0.0);\r\n        this.radius = radius || 0;\r\n        this.locCode = 0;\r\n        this.left = 0;\r\n        this.right = 0;\r\n        this.back = 0;\r\n        this.front = 0;\r\n        this.bottom = 0;\r\n        this.top = 0;\r\n        this.neighbours = new Array(6);\r\n        this.min = new Float32Array(3);\r\n        this.max = new Float32Array(3);\r\n\r\n        this.updateDimensions();\r\n    }\r\n\r\n    /**\r\n     * Calculates the distance of the axis-aligned bounding box's planes to the world planes.\r\n     */\r\n    updateDimensions() {\r\n        let cx = this.center.components[0];\r\n        let cy = this.center.components[1];\r\n        let cz = this.center.components[2];\r\n\r\n        this.min[0] = cx - this.radius;\r\n        this.min[1] = cy - this.radius;\r\n        this.min[2] = cz - this.radius;\r\n        this.max[0] = cx + this.radius;\r\n        this.max[1] = cy + this.radius;\r\n        this.max[2] = cz + this.radius;\r\n\r\n        // Precalculate to simplify ray test\r\n        this.left = cx - this.radius;\r\n        this.right = cx + this.radius;\r\n        this.back = cz - this.radius;\r\n        this.front = cz + this.radius;\r\n        this.bottom = cy - this.radius;\r\n        this.top = cy + this.radius;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Sets the location code of this axis-aligned bounding box.\r\n     * \r\n     * @param {number} locCode - The location code.\r\n     */\r\n    setLocCode(locCode) {\r\n        this.locCode = locCode;\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Gets the location code of this axis-aligned bounding box.\r\n     * \r\n     * @returns {number} The location code.\r\n     */\r\n    getLocCode() {\r\n        return this.locCode;\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not this axis-aligned bounding box is intersected by a ray.\r\n     * \r\n     * @param {Vector3f} source - The source of the ray.\r\n     * @param {Vector3f} inverseDir - A normalized vector of the direction of the ray.\r\n     * @param {number} dist - The maximum distance from the source that still counts as an intersect (the far property of the Lore.Raycaster object).\r\n     * @returns {boolean} - Whether or not there is an intersect.\r\n     */\r\n    rayTest(source, inverseDir, dist) {\r\n        // dir is the precomputed inverse of the direction of the ray,\r\n        // this means that the costly divisions can be omitted\r\n        let oc = source.components;\r\n        let ic = inverseDir.components;\r\n\r\n        let t0 = (this.left - oc[0]) * ic[0];\r\n        let t1 = (this.right - oc[0]) * ic[0];\r\n        let t2 = (this.bottom - oc[1]) * ic[1];\r\n        let t3 = (this.top - oc[1]) * ic[1];\r\n        let t4 = (this.back - oc[2]) * ic[2];\r\n        let t5 = (this.front - oc[2]) * ic[2];\r\n\r\n        let maxT = Math.min(Math.max(t0, t1), Math.max(t2, t3), Math.max(t4, t5));\r\n\r\n        // Ray intersects in reverse direction, which means\r\n        // that the box is behind the camera\r\n        if (maxT < 0) {\r\n            return false;\r\n        }\r\n\r\n        let minT = Math.max(Math.min(t0, t1), Math.min(t2, t3), Math.min(t4, t5));\r\n\r\n        if (minT > maxT || minT > dist) {\r\n            return false;\r\n        }\r\n\r\n        // Intersection happens when minT is larger or equal to maxT\r\n        // and minT is smaller than the distance (distance == radius == ray.far)\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not this axis-aligned bounding box is intersected by a cylinder. CAUTION: If this runs multi-threaded, it might fail.\r\n     * \r\n     * @param {Vector3f} source - The source of the ray.\r\n     * @param {Vector3f} inverseDir - A normalized vector of the direction of the ray.\r\n     * @param {number} dist - The maximum distance from the source that still counts as an intersect (the far property of the Lore.Raycaster object).\r\n     * @param {number} radius - The radius of the cylinder\r\n     * @returns {boolean} - Whether or not there is an intersect.\r\n     */\r\n    cylinderTest(source, inverseDir, dist, radius) {\r\n        // Instead of testing an actual cylinder against this aabb, we simply\r\n        // expand the radius of the box temporarily.\r\n        this.radius += radius;\r\n        this.updateDimensions();\r\n\r\n        // Do the normal ray intersection test\r\n        let result = this.rayTest(source, inverseDir, dist);\r\n\r\n        this.radius -= radius;\r\n        this.updateDimensions();\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Returns the square distance of this axis-aligned bounding box to the point supplied as an argument.\r\n     * \r\n     * @param {number} x - The x component of the point coordinate.\r\n     * @param {number} y - The y component of the point coordinate.\r\n     * @param {number} z - The z component of the point coordinate.\r\n     * @returns {number} The square distance of this axis-aligned bounding box to the input point.\r\n     */\r\n    distanceToPointSq(x, y, z) {\r\n        // From book, real time collision detection\r\n        let sqDist = 0;\r\n        let p = [x, y, z];\r\n        // Add the distances for each axis\r\n        for (var i = 0; i < 3; i++) {\r\n            if (p[i] < this.min[i])\r\n                sqDist += Math.pow(this.min[i] - p[i], 2);\r\n            if (p[i] > this.max[i])\r\n                sqDist += Math.pow(p[i] - this.max[i], 2);\r\n        }\r\n\r\n        return sqDist;\r\n    }\r\n\r\n    /**\r\n     * Returns the box that is closest to the point (measured from center).\r\n     * \r\n     * @param {number} x - The x component of the point coordinate.\r\n     * @param {number} y - The y component of the point coordinate.\r\n     * @param {number} z - The z component of the point coordinate.\r\n     * @returns {number} The square distance of this axis-aligned bounding box to the input point.\r\n     */\r\n    distanceFromCenterToPointSq(x, y, z) {\r\n        let center = this.center.components;\r\n\r\n        return Math.pow(center[0] - x, 2) + Math.pow(center[1] - y, 2) + Math.pow(center[2] - z, 2);\r\n    }\r\n\r\n    /**\r\n     * Tests whether or not this axis-aligned bounding box overlaps or shares an edge or a vertex with another axis-aligned bounding box.\r\n     * This method can also be used to assert whether or not two boxes are neighbours.\r\n     * \r\n     * @param {AABB} aabb - The axis-aligned bounding box to test against.\r\n     * @returns {boolean} - Whether or not there is an overlap.\r\n     */\r\n    testAABB(aabb) {\r\n        for (var i = 0; i < 3; i++) {\r\n            if (this.max[i] < aabb.min[i] || this.min[i] > aabb.max[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a axis-aligned bounding box surrounding a set of vertices.\r\n     * \r\n     * @param {Float32Array} vertices - The vertices which will all be inside the axis-aligned bounding box.\r\n     * @returns {AABB} An axis-aligned bounding box surrounding the vertices.\r\n     */\r\n    static fromPoints(vertices) {\r\n        let x = vertices[0];\r\n        let y = vertices[1];\r\n        let z = vertices[2];\r\n\r\n        let min = new Vector3f(x, y, z);\r\n        let max = new Vector3f(x, y, z);\r\n\r\n        let minc = min.components;\r\n        let maxc = max.components;\r\n\r\n        for (var i = 1; i < vertices.length / 3; i++) {\r\n            if (vertices[i * 3 + 0] < minc[0]) minc[0] = vertices[i * 3 + 0];\r\n            if (vertices[i * 3 + 1] < minc[1]) minc[1] = vertices[i * 3 + 1];\r\n            if (vertices[i * 3 + 2] < minc[2]) minc[2] = vertices[i * 3 + 2];\r\n            if (vertices[i * 3 + 0] > maxc[0]) maxc[0] = vertices[i * 3 + 0];\r\n            if (vertices[i * 3 + 1] > maxc[1]) maxc[1] = vertices[i * 3 + 1];\r\n            if (vertices[i * 3 + 2] > maxc[2]) maxc[2] = vertices[i * 3 + 2];\r\n        }\r\n\r\n        // Calculate the radius in each direction\r\n        let radii = Vector3f.subtract(max, min);\r\n        radii.multiplyScalar(0.5);\r\n\r\n        let rx = radii.components[0];\r\n        let ry = radii.components[1];\r\n        let rz = radii.components[2];\r\n\r\n        let center = new Vector3f(rx, ry, rz);\r\n        center.add(min);\r\n        // Since the octree always stores cubes, there is of course only\r\n        // one radius - take the biggest one\r\n        let radius = Math.max(rx, ry, rz);\r\n\r\n        return new AABB(center, radius);\r\n    }\r\n\r\n    /**\r\n     * Returns an array representing the 8 corners of the axis-aligned bounding box.\r\n     * \r\n     * @param {AABB} aabb An axis-aligned bounding box.\r\n     * @returns {Array} An array containing the 8 corners of the axisa-aligned bunding box. E.g [[x, y, z], [x, y, z], ...]\r\n     */\r\n    static getCorners(aabb) {\r\n        let c = aabb.center.components;\r\n        let x = c[0];\r\n        let y = c[1];\r\n        let z = c[2];\r\n        let r = aabb.radius;\r\n\r\n        return [\r\n            [x - r, y - r, z - r],\r\n            [x - r, y - r, z + r],\r\n            [x - r, y + r, z - r],\r\n            [x - r, y + r, z + r],\r\n            [x + r, y - r, z - r],\r\n            [x + r, y - r, z + r],\r\n            [x + r, y + r, z - r],\r\n            [x + r, y + r, z + r]\r\n        ]\r\n    }\r\n\r\n    /**\r\n     * Clones an axis-aligned bounding box.\r\n     * \r\n     * @param {AABB} original - The axis-aligned bounding box to be cloned.\r\n     * @returns {AABB} The cloned axis-aligned bounding box.\r\n     */\r\n    static clone(original) {\r\n        let clone = new AABB();\r\n        clone.back = original.back;\r\n        clone.bottom = original.bottom;\r\n        clone.center = new Vector3f(original.center.components[0],\r\n            original.center.components[1], original.center.components[2]);\r\n        clone.front = original.front;\r\n        clone.left = original.left;\r\n        clone.locCode = original.locCode;\r\n        clone.max = original.max;\r\n        clone.min = original.min;\r\n        clone.radius = original.radius;\r\n        clone.right = original.right;\r\n        clone.top = original.top;\r\n\r\n        return clone;\r\n    }\r\n}\r\n\r\nmodule.exports = AABB","//@ts-check\r\n\r\nconst AABB = require('./AABB');\r\nconst Vector3f = require('../Math/Vector3f');\r\nconst Utils = require('../Utils/Utils');\r\nconst Raycaster = require('./Raycaster');\r\nconst RadixSort = require('../Math/RadixSort');\r\n\r\n/** \r\n * @class\r\n * An octree constructed using the point cloud.\r\n * @property {number} threshold - A threshold indicating whether or not a further subdivision is needed based on the number of data points in the current node.\r\n * @property {number} maxDepth - A maximum depth of the octree.\r\n * @property {Object} points - An object storing the points belonging to each node indexed by the location id of the node.\r\n * @property {Object} aabbs - An object storing the axis-aligned bounding boxes belonging to each node indexed by the location id of the node.\r\n * @constructor\r\n * @param {number} threshold - A threshold indicating whether or not a further subdivision is needed based on the number of data points in the current node.\r\n * @param {number} maxDepth - A maximum depth of the octree.\r\n */\r\n\r\nclass Octree {\r\n  constructor(threshold, maxDepth) {\r\n    this.threshold = threshold || 500;\r\n    this.maxDepth = maxDepth || 8;\r\n    this.points = {};\r\n    this.aabbs = {};\r\n\r\n    this.offsets = [\r\n      [-0.5, -0.5, -0.5],\r\n      [-0.5, -0.5, +0.5],\r\n      [-0.5, +0.5, -0.5],\r\n      [-0.5, +0.5, +0.5],\r\n      [+0.5, -0.5, -0.5],\r\n      [+0.5, -0.5, +0.5],\r\n      [+0.5, +0.5, -0.5],\r\n      [+0.5, +0.5, +0.5]\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Builds the octree by assigning the indices of data points and axis-aligned bounding boxes to assoziative arrays indexed by the location code.\r\n   * @param {Uint32Array} pointIndices - An set of points that are either sub-divided into sub nodes or assigned to the current node.\r\n   * @param {Float32Array} vertices - An array containing the positions of all the vertices.\r\n   * @param {AABB} aabb - The bounding box of the current node.\r\n   * @param {number} [locCode=1] - A binary code encoding the id and the level of the current node.\r\n   */\r\n  build(pointIndices, vertices, aabb, locCode = 1) {\r\n    // Set the location code of the axis-aligned bounding box\r\n    aabb.setLocCode(locCode);\r\n\r\n    // Store the axis aligned bounding box of this node\r\n    // and set the points belonging to the node to null\r\n    this.points[locCode] = null;\r\n    this.aabbs[locCode] = aabb;\r\n\r\n    // Check if this node reaches the maximum depth or the threshold\r\n    let depth = this.getDepth(locCode);\r\n\r\n    if (pointIndices.length <= this.threshold || depth >= this.maxDepth) {\r\n      this.points[locCode] = new Uint32Array(pointIndices.length);\r\n      for (var i = 0; i < pointIndices.length; i++) {\r\n        this.points[locCode][i] = pointIndices[i];\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    let childPointCounts = new Uint32Array(8);\r\n    let codes = new Float32Array(pointIndices.length);\r\n\r\n    for (var i = 0; i < pointIndices.length; i++) {\r\n      // Points are indices to the vertices array\r\n      // which stores x,y,z coordinates linear\r\n      let k = pointIndices[i] * 3;\r\n\r\n      // Assign point to subtree, this gives a code\r\n      // 000, 001, 010, 011, 100, 101, 110, 111\r\n      // (-> 8 possible subtrees)\r\n      if (vertices[k + 0] >= aabb.center.components[0]) codes[i] |= 4;\r\n      if (vertices[k + 1] >= aabb.center.components[1]) codes[i] |= 2;\r\n      if (vertices[k + 2] >= aabb.center.components[2]) codes[i] |= 1;\r\n\r\n      childPointCounts[codes[i]]++;\r\n    }\r\n\r\n    let nextPoints = new Array(8);\r\n    let nextAabb = new Array(8);\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      if (childPointCounts[i] == 0) continue;\r\n      nextPoints[i] = new Uint32Array(childPointCounts[i]);\r\n\r\n      for (var j = 0, k = 0; j < pointIndices.length; j++) {\r\n        if (codes[j] == i) {\r\n          nextPoints[i][k++] = pointIndices[j];\r\n        }\r\n      }\r\n\r\n      let o = this.offsets[i];\r\n      let offset = new Vector3f(o[0], o[1], o[2]);\r\n      offset.multiplyScalar(aabb.radius);\r\n      nextAabb[i] = new AABB(aabb.center.clone().add(offset), 0.5 * aabb.radius);\r\n    }\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      if (childPointCounts[i] == 0) {\r\n        continue;\r\n      }\r\n\r\n      let nextLocCode = this.generateLocCode(locCode, i);\r\n      this.build(nextPoints[i], vertices, nextAabb[i], nextLocCode);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Returns an array containing the location codes of all the axis-aligned\r\n   * bounding boxes inside this octree.\r\n   */\r\n  getLocCodes() {\r\n    return Object.keys(this.aabbs);\r\n  }\r\n\r\n  /**\r\n   * Calculates the depth of the node from its location code.\r\n   * @param {number} locCode - A binary code encoding the id and the level of the current node.\r\n   * @returns {number} The depth of the node with the provided location code.\r\n   */\r\n  getDepth(locCode) {\r\n    // If the msb is at position 6 (e.g. 1000000) the\r\n    // depth is 2, since the locCode contains two nodes (2 x 3 bits)\r\n    return Utils.msb(locCode) / 3;\r\n  }\r\n\r\n  /**\r\n   * Generates a location code for a node based on the full code of the parent and the code of the current node.\r\n   * @param {number} parentCode The full location code of the parent node.\r\n   * @param {number} nodeCode The 3 bit code of the current node.\r\n   * @returns {number} The full location code for the current node.\r\n   */\r\n  generateLocCode(parentCode, nodeCode) {\r\n    // Insert the code of this new node, just before the msb (that is set to 1)\r\n    // of the parents code\r\n    let msb = Utils.msb(parentCode);\r\n\r\n    if (msb == -1) {\r\n      return nodeCode | 8;\r\n    } else {\r\n      // Left-shift the parent code by msb\r\n      parentCode = parentCode <<= 3;\r\n      // OR parent code with node code\r\n      return parentCode | nodeCode;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traverses the octree depth-first.\r\n   * @param {Function} traverseCallback - Is called for each node where a axis-aligned bounding box exists.\r\n   * @param {number} [locCode=1] - The location code of the node that serves as the starting node for the traversion.\r\n   */\r\n  traverse(traverseCallback, locCode = 1) {\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        traverseCallback(this.points[next], this.aabbs[next], next);\r\n        this.traverse(traverseCallback, next);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Traverses the octree depth-first, does not visit nodes / subtrees if a condition is not met.\r\n   * @param {Function} traverseIfCallback - Is called for each node where a axis-aligned bounding box exists and returns either true or false, with false stopping further exploration of the subtree.\r\n   * @param {Function} conditionCallback - Is called to test whether or not a subtree should be explored.\r\n   * @param {number} [locCode=1] - The location code of the node that serves as the starting node for the traversion.\r\n   */\r\n  traverseIf(traverseIfCallback, conditionCallback, locCode = 1) {\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        if (!conditionCallback(this.aabbs[next], next)) {\r\n          continue;\r\n        }\r\n\r\n        traverseIfCallback(this.points[next], this.aabbs[next], next);\r\n        this.traverseIf(traverseIfCallback, conditionCallback, next);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Searches for octree nodes that are intersected by the ray and returns all the points associated with those nodes.\r\n   * @param {Raycaster} raycaster - The raycaster used for checking for intersects.\r\n   * @returns {Array} A set of points which are associated with octree nodes intersected by the ray.\r\n   */\r\n  raySearch(raycaster) {\r\n    let result = [];\r\n\r\n    // Info: shouldn't be necessary any more\r\n    // Always add the points from the root\r\n    // The root has the location code 1\r\n    // ... looks like it's still necessary\r\n    if (this.points[1]) {\r\n      for (var i = 0; i < this.points[1].length; i++) {\r\n        result.push({\r\n          index: this.points[1][i],\r\n          locCode: 1\r\n        });\r\n      }\r\n    }\r\n\r\n    // Calculate the direction, and the percentage\r\n    // of the direction, of the ray\r\n    let dir = raycaster.ray.direction.clone();\r\n    dir.normalize();\r\n\r\n    let inverseDir = new Vector3f(1, 1, 1);\r\n    inverseDir.divide(dir);\r\n\r\n    this.traverseIf(function (points, aabb, locCode) {\r\n      // If there is an aabb, that contains no points but only\r\n      // nodes, skip here\r\n      if (!points) {\r\n        return;\r\n      }\r\n\r\n      for (var i = 0; i < points.length; i++) {\r\n        result.push({\r\n          index: points[i],\r\n          locCode: locCode\r\n        });\r\n      }\r\n    }, function (aabb, locCode) {\r\n      return aabb.cylinderTest(raycaster.ray.source, inverseDir,\r\n        raycaster.far, raycaster.threshold);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Returns an array containing all the centers of the axis-aligned bounding boxes\r\n   * in this octree that have points associated with them.\r\n   * @returns {Array} An array containing the centers as Lore.Vector3f objects.\r\n   */\r\n  getCenters(threshold) {\r\n    threshold = threshold || 0;\r\n    let centers = new Array();\r\n\r\n    this.traverse(function (points, aabb, next) {\r\n      if (points && points.length > threshold) {\r\n        centers.push(aabb.center);\r\n      }\r\n    });\r\n\r\n    return centers;\r\n  }\r\n\r\n  /**\r\n   * This function returns the closest box in the octree to the point given as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {number} threshold - The minimum number of points an axis-aligned bounding box should contain to count as a hit.\r\n   * @param {number} [locCode=1] - The starting locCode, if not set, starts at the root.\r\n   * @returns {AABB} The closest axis-aligned bounding box to the input point.\r\n   */\r\n  getClosestBox(point, threshold, locCode = 1) {\r\n    let closest = -1;\r\n    let minDist = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        // Continue if under threshold\r\n        if (this.points[next] && this.points[next].length < threshold) {\r\n          continue;\r\n        }\r\n\r\n        let dist = this.aabbs[next].distanceToPointSq(point.components[0], point.components[1], point.components[2]);\r\n        if (dist < minDist) {\r\n          minDist = dist;\r\n          closest = next;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closest < 0) {\r\n      return this.aabbs[locCode];\r\n    } else {\r\n      return this.getClosestBox(point, threshold, closest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function returns the closest box in the octree to the point given as an argument. The distance measured is to the\r\n   * box center.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {number} threshold - The minimum number of points an axis-aligned bounding box should contain to count as a hit.\r\n   * @param {number} [locCode=1] - The starting locCode, if not set, starts at the root.\r\n   * @returns {AABB} The closest axis-aligned bounding box to the input point.\r\n   */\r\n  getClosestBoxFromCenter(point, threshold, locCode = 1) {\r\n    let closest = -1;\r\n    let minDist = Number.MAX_VALUE;\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        // Continue if under threshold\r\n        if (this.points[next] && this.points[next].length < threshold) {\r\n          continue;\r\n        }\r\n\r\n        let dist = this.aabbs[next].distanceFromCenterToPointSq(point.components[0], point.components[1], point.components[2]);\r\n\r\n        if (dist < minDist) {\r\n          minDist = dist;\r\n          closest = next;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closest < 0) {\r\n      return this.aabbs[locCode];\r\n    } else {\r\n      return this.getClosestBox(point, threshold, closest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This function returns the farthest box in the octree to the point given as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {number} threshold - The minimum number of points an axis-aligned bounding box should contain to count as a hit.\r\n   * @param {number} [locCode=1] - The starting locCode, if not set, starts at the root.\r\n   * @returns {AABB} The farthest axis-aligned bounding box to the input point.\r\n   */\r\n  getFarthestBox(point, threshold, locCode) {\r\n    let farthest = -1;\r\n    let maxDist = Number.MIN_VALUE;\r\n\r\n    for (var i = 0; i < 8; i++) {\r\n      let next = locCode << 3 | i;\r\n\r\n      // If it has an aabb, it exists\r\n      if (this.aabbs[next]) {\r\n        // Continue if under threshold\r\n        if (this.points[next] && this.points[next].length < threshold) {\r\n          continue;\r\n        }\r\n\r\n        let dist = this.aabbs[next].distanceToPointSq(point.components[0], point.components[1], point.components[2]);\r\n        if (dist > maxDist) {\r\n          maxDist = dist;\r\n          farthest = next;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (farthest < 0) {\r\n      return this.aabbs[locCode];\r\n    } else {\r\n      return this.getFarthestBox(point, threshold, farthest);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Finds the closest point inside the octree to the point provided as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {Float32Array} positions - An array containing the positions of the points.\r\n   * @param {number} threshold - Only consider points inside a axis-aligned bounding box with a minimum of [threshold] points.\r\n   * @param {number} locCode - If specified, the axis-aligned bounding box in which the point is searched for. If not set, all boxes are searched.\r\n   * @returns {Vector3f} The position of the closest point.\r\n   */\r\n  getClosestPoint(point, positions, threshold, locCode) {\r\n    threshold = threshold || 0;\r\n    let minDist = Number.MAX_VALUE;\r\n    let result = null;\r\n\r\n    let box = null;\r\n\r\n    if (locCode) {\r\n      box = this.aabbs[locCode];\r\n    } else {\r\n      box = this.getClosestBox(point, threshold);\r\n    }\r\n\r\n    let boxPoints = this.points[box.getLocCode()];\r\n\r\n    // If the box does not contain any points\r\n    if (!boxPoints) {\r\n      return null;\r\n    }\r\n\r\n    for (var i = 0; i < boxPoints.length; i++) {\r\n      let index = boxPoints[i];\r\n      index *= 3;\r\n      let x = positions[index];\r\n      let y = positions[index + 1];\r\n      let z = positions[index + 2];\r\n\r\n      let pc = point.components;\r\n\r\n      let distSq = Math.pow(pc[0] - x, 2) + Math.pow(pc[1] - y, 2) + Math.pow(pc[2] - z, 2);\r\n      if (distSq < minDist) {\r\n        minDist = distSq;\r\n        result = {\r\n          x: x,\r\n          y: y,\r\n          z: z\r\n        };\r\n      }\r\n    }\r\n\r\n    if (!result) {\r\n      return null;\r\n    }\r\n\r\n    return new Vector3f(result.x, result.y, result.z);\r\n  }\r\n\r\n  /**\r\n   * Finds the farthest point inside the octree to the point provided as an argument.\r\n   * @param {Vector3f} point - The point.\r\n   * @param {Float32Array} positions - An array containing the positions of the points.\r\n   * @param {number} threshold - Only consider points inside a axis-aligned bounding box with a minimum of [threshold] points.\r\n   * @param {number} locCode - If specified, the axis-aligned bounding box in which the point is searched for. If not set, all boxes are searched.\r\n   * @returns {Vector3f} The position of the farthest point.\r\n   */\r\n  getFarthestPoint(point, positions, threshold, locCode) {\r\n    threshold = threshold || 0;\r\n    let maxDist = Number.MIN_VALUE;\r\n    let result = null;\r\n\r\n    // Get farthest box\r\n    let box = null;\r\n\r\n    if (locCode) {\r\n      box = this.aabbs[locCode];\r\n    } else {\r\n      box = this.getFarthestBox(point, threshold);\r\n    }\r\n\r\n    let boxPoints = this.points[box.getLocCode()];\r\n\r\n    // If the box does not contain any points\r\n    if (!boxPoints) {\r\n      return null;\r\n    }\r\n\r\n    for (var i = 0; i < boxPoints.length; i++) {\r\n      let index = boxPoints[i];\r\n      index *= 3;\r\n      let x = positions[index];\r\n      let y = positions[index + 1];\r\n      let z = positions[index + 2];\r\n\r\n      let pc = point.components;\r\n\r\n      let distSq = Math.pow(pc[0] - x, 2) + Math.pow(pc[1] - y, 2) + Math.pow(pc[2] - z, 2);\r\n      if (distSq > maxDist) {\r\n        maxDist = distSq;\r\n        result = {\r\n          x: x,\r\n          y: y,\r\n          z: z\r\n        };\r\n      }\r\n    }\r\n\r\n    if (!result) {\r\n      return null;\r\n    }\r\n\r\n    return new Vector3f(result.x, result.y, result.z);\r\n  }\r\n\r\n  /**\r\n   * Returns the parent of a given location code by simply shifting it to the right by tree, removing the current code.\r\n   * @param {number} locCode - The location code of a node.\r\n   */\r\n  getParent(locCode) {\r\n    return locCode >>> 3;\r\n  }\r\n\r\n  /**\r\n   * Find neighbouring axis-aligned bounding boxes.\r\n   * @param {number} locCode - The location code of the axis-aligned bounding box whose neighbours will be returned\r\n   * @returns {Array} An array of location codes of the neighbouring axis-aligned bounding boxes.\r\n   */\r\n  getNeighbours(locCode) {\r\n    let self = this;\r\n    let locCodes = new Array();\r\n\r\n    this.traverseIf(function (points, aabbs, code) {\r\n      if (points && points.length > 0 && code != locCode) {\r\n        locCodes.push(code);\r\n      }\r\n    }, function (aabb, code) {\r\n      // Exit branch if this node is not a neighbour\r\n      return aabb.testAABB(self.aabbs[locCode]);\r\n    });\r\n\r\n    return locCodes;\r\n  }\r\n\r\n  /**\r\n   * Returns the k-nearest neighbours of a vertex.\r\n   * @param {number} k - The number of nearest neighbours to return.\r\n   * @param {number} point - The index of a vertex or a vertex.\r\n   * @param {number} locCode - The location code of the axis-aligned bounding box containing the vertex. If not set, the box is searched for.\r\n   * @param {Float32Array} positions - The position information for the points indexed in this octree.\r\n   * @param {Function} kNNCallback - The callback that is called after the k-nearest neighbour search has finished.\r\n   */\r\n  kNearestNeighbours(k, point, locCode, positions, kNNCallback) {\r\n    k += 1; // Account for the fact, that the point itself should be returned as well.\r\n    let length = positions.length / 3;\r\n    let p = point;\r\n\r\n    // TODO: WTF is happening here\r\n    if (!isNaN(parseFloat(point))) {\r\n      let p = {\r\n        x: positions[p * 3],\r\n        y: positions[p * 3 + 1],\r\n        z: positions[p * 3 + 2]\r\n      };\r\n    }\r\n\r\n    if (locCode === null) {\r\n      locCode = this.getClosestBoxFromCenter(new Vector3f(p.x, p.y, p.z), 0).locCode;\r\n    }\r\n\r\n    // Calculte the distances to the other cells\r\n    let cellDistances = this.getCellDistancesToPoint(p.x, p.y, p.z, locCode);\r\n\r\n    // Calculte the distances to the other points in the same cell\r\n    let pointDistances = this.pointDistancesSq(p.x, p.y, p.z, locCode, positions)\r\n\r\n    // Sort the indices according to distance\r\n    let radixSort = new RadixSort();\r\n    let sortedPointDistances = radixSort.sort(pointDistances.distancesSq, true);\r\n\r\n    // Sort the neighbours according to distance\r\n    let sortedCellDistances = radixSort.sort(cellDistances.distancesSq, true);\r\n\r\n    // Since the closest points always stay the closest points event when adding\r\n    // the points of another cell, instead of resizing the array, just define\r\n    // an offset\r\n    let pointOffset = 0;\r\n\r\n    // Get all the neighbours from this cell that are closer than the nereast box\r\n    let indexCount = 0;\r\n    let indices = new Uint32Array(k);\r\n\r\n    for (var i = 0; indexCount < k && i < sortedPointDistances.array.length; i++) {\r\n      // Break if closest neighbouring cell is closer than the closest remaining point\r\n      if (sortedPointDistances.array[i] > sortedCellDistances.array[0]) {\r\n        // Set the offset to the most distant closest member\r\n        pointOffset = i;\r\n        break;\r\n      }\r\n\r\n      indices[i] = pointDistances.indices[sortedPointDistances.indices[i]];\r\n      indexCount++;\r\n    }\r\n\r\n    // If enough neighbours have been found in the same cell, no need to continue\r\n    if (indexCount == k) {\r\n      return indices;\r\n    }\r\n\r\n    for (var i = 0; i < sortedCellDistances.array.length; i++) {\r\n      // Get the points from the cell and merge them with the already found ones\r\n      let locCode = cellDistances.locCodes[sortedCellDistances.indices[i]];\r\n      let newPointDistances = this.pointDistancesSq(p.x, p.y, p.z, locCode, positions);\r\n\r\n      pointDistances = Octree.mergePointDistances(pointDistances, newPointDistances);\r\n\r\n      // Sort the merged points\r\n      let sortedNewPointDistances = radixSort.sort(pointDistances.distancesSq, true);\r\n\r\n      for (var j = pointOffset; indexCount < k && j < sortedNewPointDistances.array.length; j++) {\r\n        if (sortedNewPointDistances.array[j] > sortedCellDistances.array[i + 1]) {\r\n          pointOffset = j;\r\n          break;\r\n        }\r\n\r\n        indices[j] = pointDistances.indices[sortedNewPointDistances.indices[j]];\r\n        indexCount++;\r\n      }\r\n\r\n      if (indexCount == k || indexCount >= length - 1) {\r\n        // kNNCallback(indices);\r\n        return indices;\r\n      }\r\n    }\r\n\r\n    //kNNCallback(indices);\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * Calculates the distances from a given point to all of the cells containing points\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The location code of the cell containing the point.\r\n   * @returns {Object} An object containing arrays for the locCodes and the squred distances.\r\n   */\r\n  getCellDistancesToPoint(x, y, z, locCode) {\r\n    let locCodes = new Array();\r\n\r\n    this.traverse(function (points, aabb, code) {\r\n      if (points && points.length > 0 && code != locCode) {\r\n        locCodes.push(code);\r\n      }\r\n    });\r\n\r\n    let dists = new Float32Array(locCodes.length);\r\n    for (var i = 0; i < locCodes.length; i++) {\r\n      dists[i] = this.aabbs[locCodes[i]].distanceToPointSq(x, y, z);\r\n    }\r\n\r\n    return {\r\n      locCodes: locCodes,\r\n      distancesSq: dists\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Expands the current neighbourhood around the cell where the point specified by x, y, z is in.\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The location code of the cell containing the point.\r\n   * @param {Object} cellDistances - The object containing location codes and distances.\r\n   * @returns {number} The number of added location codes.\r\n   */\r\n  expandNeighbourhood(x, y, z, locCode, cellDistances) {\r\n    let locCodes = cellDistances.locCodes;\r\n    let distancesSq = cellDistances.distancesSq;\r\n    let length = locCodes.length;\r\n\r\n    for (var i = length - 1; i >= 0; i--) {\r\n      let neighbours = this.getNeighbours(locCodes[i]);\r\n\r\n      for (var j = 0; j < neighbours.length; j++) {\r\n        if (neighbours[j] !== locCode && !Utils.arrayContains(locCodes, neighbours[j])) {\r\n          locCodes.push(neighbours[j]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Update the distances\r\n    let l1 = locCodes.length;\r\n    let l2 = distancesSq.length;\r\n\r\n    if (l1 === l2) {\r\n      return;\r\n    }\r\n\r\n    let dists = new Float32Array(l1 - l2);\r\n\r\n    for (var i = l2, c = 0; i < l1; i++, c++) {\r\n      dists[c] = this.aabbs[locCodes[i]].distanceToPointSq(x, y, z);\r\n    }\r\n\r\n    cellDistances.distancesSq = Utils.concatTypedArrays(distancesSq, dists);\r\n\r\n    return locCodes.length - length;\r\n  }\r\n\r\n  /**\r\n   * Returns a list of the cells neighbouring the cell with the provided locCode and the point specified by x, y and z.\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The number of the axis-aligned bounding box.\r\n   * @returns {Object} An object containing arrays for the locCodes and the squred distances.\r\n   */\r\n  cellDistancesSq(x, y, z, locCode) {\r\n    let locCodes = this.getNeighbours(locCode);\r\n\r\n    let dists = new Float32Array(locCodes.length);\r\n\r\n    for (var i = 0; i < locCodes.length; i++) {\r\n      dists[i] = this.aabbs[locCodes[i]].distanceToPointSq(x, y, z);\r\n    }\r\n\r\n    return {\r\n      locCodes: locCodes,\r\n      distancesSq: dists\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Returns a list of the the squared distances of the points contained in the axis-aligned bounding box to the provided coordinates.\r\n   * @param {number} x - The x-value of the coordinate.\r\n   * @param {number} y - The y-value of the coordinate.\r\n   * @param {number} z - The z-value of the coordinate.\r\n   * @param {number} locCode - The number of the axis-aligned bounding box.\r\n   * @param {Float32Array} positions - The array containing the vertex coordinates.\r\n   * @returns {Object} An object containing arrays for the indices and distances.\r\n   */\r\n  pointDistancesSq(x, y, z, locCode, positions) {\r\n    let points = this.points[locCode];\r\n    let indices = new Uint32Array(points.length);\r\n    let dists = new Float32Array(points.length);\r\n\r\n    for (var i = 0; i < points.length; i++) {\r\n      let index = points[i] * 3;\r\n      let x2 = positions[index];\r\n      let y2 = positions[index + 1];\r\n      let z2 = positions[index + 2];\r\n\r\n      indices[i] = points[i];\r\n      dists[i] = Math.pow(x2 - x, 2) + Math.pow(y2 - y, 2) + Math.pow(z2 - z, 2);\r\n    }\r\n    return {\r\n      indices: indices,\r\n      distancesSq: dists\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Concatenates the two typed arrays a and b and returns a new array. The two arrays have to be of the same type.\r\n   * Due to performance reasons, there is no check whether the types match.\r\n   * @param {Array} a - The first array.\r\n   * @param {Array} b - The second array.\r\n   * @returns {Array} The concatenated array.\r\n   */\r\n  static concatTypedArrays(a, b) {\r\n    let c = new a.constructor(a.length + b.length);\r\n\r\n    c.set(a);\r\n    c.set(b, a.length);\r\n\r\n    return c;\r\n  }\r\n\r\n  /**\r\n   * Merges the two arrays (indices and distancesSq) in the point distances object.\r\n   * @param {Object} a - The first point distances object.\r\n   * @param {Object} b - The second point distances object.\r\n   * @returns {Object} The concatenated point distances object.\r\n   */\r\n  static mergePointDistances(a, b) {\r\n    let newObj = {};\r\n\r\n    newObj.indices = Octree.concatTypedArrays(a.indices, b.indices);\r\n    newObj.distancesSq = Octree.concatTypedArrays(a.distancesSq, b.distancesSq);\r\n\r\n    return newObj;\r\n  }\r\n\r\n  /**\r\n   * Merges the two arrays (locCodes and distancesSq) in the cell distances object.\r\n   * @param {Object} a - The first cell distances object.\r\n   * @param {Object} b - The second cell distances object.\r\n   * @returns {Object} The concatenated cell distances object.\r\n   */\r\n  static mergeCellDistances(a, b) {\r\n    let newObj = {};\r\n\r\n    newObj.locCodes = Octree.concatTypedArrays(a.locCodes, b.locCodes);\r\n    newObj.distancesSq = Octree.concatTypedArrays(a.distancesSq, b.distancesSq);\r\n\r\n    return newObj;\r\n  }\r\n\r\n  /**\r\n   * Clones an octree.\r\n   * @param {Octree} original - The octree to be cloned.\r\n   * @returns {Octree} The cloned octree.\r\n   */\r\n  static clone(original) {\r\n    let clone = new Octree();\r\n\r\n    clone.threshold = original.threshold;\r\n    clone.maxDepth = original.maxDepth;\r\n    clone.points = original.points;\r\n\r\n    for (var property in original.aabbs) {\r\n      if (original.aabbs.hasOwnProperty(property)) {\r\n        clone.aabbs[property] = AABB.clone(original.aabbs[property]);\r\n      }\r\n    }\r\n\r\n    return clone;\r\n  }\r\n}\r\n\r\nmodule.exports = Octree","//@ts-check\r\n\r\nconst Ray = require('../Math/Ray');\r\nconst Matrix4f = require('../Math/Matrix4f')\r\n\r\n/** A class representing a raycaster. */\r\nclass Raycaster {\r\n    constructor() {\r\n        this.ray = new Ray();\r\n        this.near = 0;\r\n        this.far = 1000;\r\n        this.threshold = 0.1;\r\n    }\r\n\r\n    /**\r\n     * Set the raycaster based on a camera and the current mouse coordinates.\r\n     * \r\n     * @param {CameraBase} camera A camera object which extends Lore.CameraBase.\r\n     * @param {number} mouseX The x coordinate of the mouse.\r\n     * @param {number} mouseY The y coordinate of the mouse.\r\n     * @returns {Raycaster} Itself.\r\n     */\r\n    set(camera, mouseX, mouseY) {\r\n        this.near = camera.near;\r\n        this.far = camera.far;\r\n\r\n        this.ray.source.set(mouseX, mouseY, (camera.near + camera.far) / (camera.near - camera.far));\r\n        Matrix4f.unprojectVector(this.ray.source, camera);\r\n\r\n        this.ray.direction.set(0.0, 0.0, -1.0);\r\n        this.ray.direction.toDirection(camera.modelMatrix);\r\n        \r\n        return this;\r\n    }\r\n}\r\n\r\nmodule.exports = Raycaster\r\n","const AABB = require('./AABB');\r\nconst Octree = require('./Octree');\r\nconst Raycaster = require('./Raycaster');\r\n\r\nmodule.exports = {\r\n  AABB,\r\n  Octree,\r\n  Raycaster\r\n}","//@ts-check\r\n\r\n/** A utility class containing static methods. */\r\nclass Utils {\r\n    /**\r\n     * Merges two objects, overriding probierties set in both objects in the first one.\r\n     * \r\n     * @returns {object} The merged object.\r\n     */\r\n    static extend() {\r\n        let extended = {};\r\n        let deep = false;\r\n        let i = 0;\r\n        let length = arguments.length;\r\n\r\n        if (Object.prototype.toString.call(arguments[0]) === '[object Boolean]') {\r\n            deep = arguments[0];\r\n            i++;\r\n        }\r\n\r\n        let merge = function (obj) {\r\n            for (let prop in obj) {\r\n                if (Object.prototype.hasOwnProperty.call(obj, prop)) {\r\n                    if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {\r\n                        extended[prop] = Utils.extend(true, extended[prop], obj[prop]);\r\n                    } else {\r\n                        extended[prop] = obj[prop];\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        for ( ; i < length; i++) {\r\n            let obj = arguments[i];\r\n            merge(obj);\r\n        }\r\n\r\n        return extended;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not an array contains a given value.\r\n     * \r\n     * @param {Array} array An array.\r\n     * @param {object} value An object.\r\n     * @returns {boolean} A boolean whether or not the array contains the value.\r\n     */\r\n    static arrayContains(array, value) {\r\n        for(let i = 0; i < array.length; i++) {\r\n            if(array[i] === value) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Concatinate two typed arrays.\r\n     * \r\n     * @param {Array|Float32Array} arrA A typed array.\r\n     * @param {Array|Float32Array} arrB A typed array.\r\n     * @returns {Array|Float32Array} The concatinated typed array.\r\n     */\r\n    static concatTypedArrays(arrA, arrB) {\r\n        let arrC = new arrA.constructor(arrA.length + arrB.length);\r\n        \r\n        arrC.set(arrA);\r\n        arrC.set(arrB, arrA.length);\r\n\r\n        return arrC;\r\n    };\r\n\r\n    /**\r\n     * Get the most significant bit (MSB) of a number.\r\n     * \r\n     * @param {Number} n A number. \r\n     * @returns {Number} The most significant bit (0 or 1).\r\n     */\r\n    static msb(n) {\r\n        return (n & 0x80000000) ? 31 : Utils.msb((n << 1) | 1) - 1;\r\n    }\r\n\r\n    /**\r\n     *  An utility method to merge two point distance objects containing arrays of indices and squared distances.\r\n     * \r\n     * @static\r\n     * @param {object} a An object in the form of { indices: TypedArray, distancesSq: TypedArray }.\r\n     * @param {object} b An object in the form of { indices: TypedArray, distancesSq: TypedArray }.\r\n     * @returns  {object} The object with merged indices and squared distances.\r\n     */\r\n    static mergePointDistances(a, b) {\r\n        let newObj = {};\r\n\r\n        newObj.indices = Utils.concatTypedArrays(a.indices, b.indices);\r\n        newObj.distancesSq = Utils.concatTypedArrays(a.distancesSq, b.distancesSq);\r\n        \r\n        return newObj;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not the number is an integer.\r\n     * \r\n     * @param {number} n A number.\r\n     * @returns A boolean whether or not the number is an integer.\r\n     */\r\n    static isInt(n){\r\n        return Number(n) === n && n % 1 === 0;\r\n    }\r\n\r\n    /**\r\n     * Checks whether or not the number is a float.\r\n     * \r\n     * @param {number} n A number.\r\n     * @returns A boolean whether or not the number is a float.\r\n     */\r\n    static isFloat(n){\r\n        return Number(n) === n && n % 1 !== 0;\r\n    }\r\n\r\n    /**\r\n     * A helper method enabling JSONP requests to an url.\r\n     * \r\n     * @param {String} url An url.\r\n     * @param {Function} callback The callback to be called when the data is loaded.\r\n     */\r\n    static jsonp(url, callback) {\r\n        let callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());\r\n        window[callbackName] = function(response) {\r\n            delete window[callbackName];\r\n            document.body.removeChild(script);\r\n            callback(response);\r\n        };\r\n\r\n        let script = document.createElement('script');\r\n        script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + callbackName;\r\n        document.body.appendChild(script);\r\n    }\r\n}\r\n\r\nUtils.DEG2RAD = Math.PI / 180.0;\r\n\r\nmodule.exports = Utils","const Utils = require('./Utils');\r\n\r\nmodule.exports = {\r\n  Utils\r\n}"]}